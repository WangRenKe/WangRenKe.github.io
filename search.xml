<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angularjs自定义指令directive详解</title>
    <url>/2019/07/06/Angularjs%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4directive%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>一、自定义指令；</strong></p>
<pre><code>    1. var app = angular.module(&#39;app&#39;,[]);
    2. app.directive(&#39;directive1&#39;,[&#39;$scope&#39;,function($scope)&#123;
               return &#123;
                   restrict:&#39;ECAM&#39;,   // 限制，表示指令以什么形式写进页面
                   scope:&#123;        // 有了这个属性，自动创建独立作用域
                       &amp;(传递外部的函数)
                       @(单项绑定，只能读取外部传进来的指，且需是字符)
                       =(双向绑定，外部的值传进来也会随着指令里的操作而改变)
                   &#125;
                   template:&#39;&lt;div&gt;111111 &lt;div ng-transclude&gt;&lt;/div&gt; &lt;/div&gt;&#39;;  // 模板，指令放在页面之后显示的内容，如果内容过多，建议使用外部文件，写法如下；
                   templateUrl:&#39;../template/index.html&#39;; // 使用外部模板，内容过多的情况下使用。
                   replace:true, // 是否替换页面中指令里的内容，如果有这个属性，模板的外层必须要套一个标签
                   transclude:true,//这个属性为true，那么就可以将页面中指令里的内容保留下来，需要在指令的模板里添加一个标签使用ng-transclude,使用方法见template属性；
                   priority:10,// 指令执行的优先级，一般不会遇到，也不会用到，了解就行
                   terminal:true,  // 指令的权重，如果为true，那么优先级小于10的指令都不会执行，了解就行
                   require:&#39;parantController&#39;,  // 指向其他指令，指令间的通信，可以将其他指令传递给自己
                   compile:function(element,attr,transclude)&#123;  // 与link相同，二者选其一；
                       console.log(element); // 当前元素
                       console.log(element); // 当前指令的所有属性
                       transclude这个参数是如果指令用了这个属性，那么这个参数就代表了页面指令里的内容
                   &#125;,
                   link:function(scope,element,attr,parantController)&#123;   // 与compile相同，二者选其一；
                       scope就是$scope对象
                       element为当前元素
                       attr为指令的所有属性
                       当有require属性时，parantController其他指令的controller，与require配合
                       console.log(parantController.xxx); // 外面指令的this.xxx或当前controller设定的this.xxx
                        当前controller中定义的$scope.xxx也可以在这里使用
                   &#125;,
                   controller:function($scope, $element, $attrs)&#123;
                       这里面的参数其实就是link里面的参数，只是代码规范，操作元素的写进link，操作逻辑的写进controller
                   &#125;,
                   controllerAs:&#39;tempController&#39;, // 给controller起的别名，link的第四个参数也可以用这个，指向的就是当前controller
                   
               &#125;
       &#125;])
       补充：(1) templateUrl还可以使用script模板来带入，例如：
                   &lt;script type=&#39;text/ng-template&#39; id=&#39;template1&#39;&gt;
                       &lt;div&gt;这里是模板的内容&lt;/div&gt;
                   &lt;/script&gt;
                   那么就可以写成：templateUrl:&#39;template1&#39;; //这里要注意，如果使用script模板必须要给id
               (2)require:&#39;^aaa&#39;,
                  1. 没标记。在当前元素中查找，如果找不到就抛出错误。
                  2. ?标记。在当前元素中查找，如果查找不到，不抛出错误，链接函数的第四个参数为null（如上面代码link: function (scope, elem, attrs, d1)中的d1）
                  3. ^标记。不仅在当前元素中查找，还查找其所有父级。如果找不到就抛出错误。
                  4. ^^标记。只在当前元素的父级中查找。如果找不到就抛出错误。
                  5. ?^标记。不仅在当前元素中查找，还查找其所有父级。如果查找不到，不抛出错误，链接函数的第四个参数为null
                  6. ?^^标记。只在当前元素的父级中查找。如果查找不到，不抛出错误，链接函数的第四个参数为null
               (3) 如果directive直接return function()&#123;&#125;而不是一个&#123;&#125;对象，那么function就是link
</code></pre>
<p><strong>二、angularjs 指令编译的三个阶段</strong></p>
<pre><code>1. 标准浏览器API转化
   将html转化成dom，所以自定义的html标签必须符合html的格式
2. Angular compile
   搜索匹配directive，按照priority排序，并执行directive上的compile方法
3. Angular link
   执行directive上的link方法，进行scope绑定及事件绑定
</code></pre>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令 - 基础常用命令</title>
    <url>/2020/08/07/Linux%E5%91%BD%E4%BB%A4-%E5%9F%BA%E7%A1%80%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>基于项目中用到的一些命令</p>
</blockquote>
<ol>
<li>重启服务：<code>pm2 reload xxx</code></li>
<li>显示当前文件：<code>ls</code></li>
<li>删除文件命令：<code>rm -rf xxx</code></li>
<li>修改某个文件：<code>vim ./xxx</code></li>
<li>退出：<code>:q</code></li>
<li>不保存退出：<code>:q!</code></li>
<li>保存退出：<code>:wq</code></li>
<li>显示当前所在位置的路径：<code>pwd</code></li>
<li>将服务器上的文件拷贝下来，用作备份：<code>sz xxx</code></li>
<li>全量部署代码：<br>10.1：代码备份：<code>cd /opt/web</code>进入项目文件执行备份命令 <code>tar -cvf xxxx.tar i8Community || i8WorkflowNode</code><br>10.2：进入根目录：<code>cd /</code> –&gt; 进入script目录：<code>cd script</code> –&gt; 执行更新脚本：<code>./release_community.sh || ./release_workflow.sh</code></li>
<li>pm2常用命令<br>11.1：启动 –&gt; <code>pm2 start app.js</code><br>11.2：查看 –&gt; <code>pm2 list</code><br>11.3：重启 –&gt; <code>pm2 restart app.js</code><br>11.4：停止 –&gt; <code>pm2 stop xxx;pm2 stop all</code><br>11.5：删除 –&gt; <code>pm2 delete xxx;pm2 delete all</code><br>11.6：查看日志 –&gt; <code>pm2 ls;pm2 info xxx;view /test/pm2_logs/i8workflow.log</code><br>11.7：查看历史 –&gt; <code>history | grep xxx</code><br>11.8：停止/重启服务器上的nginx：<code>/opt/tengine/sbin/nginx -s stop  |  ~/nginx -s start</code></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库配置详解以及常用命令</title>
    <url>/2020/07/01/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h5 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h5><ol>
<li>官网下载：<code>https://www.mongodb.com/download-center/community</code>—-介绍<code>https://www.cnblogs.com/dreamsqin/p/10885038.html</code></li>
<li>安装到D盘MongoDB目录下，将D:\MongoDB\bin配置到环境变量path下</li>
<li>在MongoDB下创建data、log文件夹</li>
<li>测试MongDB是否安装成功</li>
</ol>
<p>– 打开cmd命令行<br>– 进入D:\MongoDB\bin目录<br>– 输入如下的命令启动mongodb服务：mongod –dbpath D:\MongoDB\data<br>– 在浏览器输入<a href="http://localhost:27017/">http://localhost:27017</a> （27017是mongodb的端口号）查看，若显示如下，则表示连接成功。如果不成功，可以查看端口是否被占用<br><img src="https://img-blog.csdnimg.cn/20200104155428901.png" alt="在这里插入图片描述"><br>– Ctrl+C退出数据库</p>
<h5 id="配置本地windows-MongoDB-服务（配置后可设置为开机自启动，可直接手动启动关闭，可通过命令行net-start-MongoDB-启动。"><a href="#配置本地windows-MongoDB-服务（配置后可设置为开机自启动，可直接手动启动关闭，可通过命令行net-start-MongoDB-启动。" class="headerlink" title="配置本地windows MongoDB 服务（配置后可设置为开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动。)"></a>配置本地windows MongoDB 服务（配置后可设置为开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动。)</h5><ol>
<li><p>在路径D:\MongoDB下创建配置文件mongo.config</p>
<pre><code> # mongod.conf
  
 # for documentation of all options, see:
 #   http://docs.mongodb.org/manual/reference/configuration-options/
  
 # Where and how to store data.
 storage:
   dbPath: D:\MongoDB\data
   journal:
     enabled: true
 #  engine:
 #  mmapv1:
 #  wiredTiger:
  
 # where to write logging data.
 systemLog:
   destination: file
   logAppend: true
   path:  D:\MongoDB\log\mongo.log
  
 # network interfaces
 net:
   port: 27017
   bindIp: 127.0.0.1
  
  
 #processManagement:
  
 #security:
  
 #operationProfiling:
  
 #replication:
  
 #sharding:
  
 ## Enterprise-Only Options:
  
 #auditLog:
  
 #snmp:
 #mp:
</code></pre>
</li>
<li><p>用管理员身份打开cmd，cd到 D:\MongoDB\bin目录下</p>
</li>
<li><p>输入：mongod –config “ D:\MongoDB\mongo.config” –install –serviceName “MongoDB”，即根据刚创建的mongo.config配置文件安装服务，名称为MongoDB。<br><img src="https://img-blog.csdnimg.cn/20200104161429143.png" alt="在这里插入图片描述"></p>
</li>
<li><p>通过命令行<code>net start MongoDB</code>启动或命令行<code>net stop MongoDB</code>关闭MongoDB服务。</p>
<h5 id="MongoDB命令语句-基本"><a href="#MongoDB命令语句-基本" class="headerlink" title="MongoDB命令语句(基本)"></a>MongoDB命令语句(基本)</h5></li>
<li><p>如果根据上面配置了服务的话，只需要启动服务<code>net start MongoDB</code></p>
</li>
<li><p><code>mongo</code>—-连接mongo数据库</p>
</li>
<li><p><code>show dbs</code>—-查看数据库</p>
</li>
<li><p><code>use project</code>、<code>db.dropDatabase()</code>—-删除名为project的数据库</p>
</li>
<li><p><code>use project</code>、<code>db.createCollection(&#39;users&#39;)</code>—-创建users</p>
</li>
<li><p><code>show collections</code>—-查看刚刚创建的users</p>
</li>
<li><p><code>db.users.insert(&#123;name:&#39;zhangsan&#39;&#125;)</code>—-向users插入数据</p>
</li>
<li><p><code>db.users.find()</code>—-查看users数据</p>
</li>
</ol>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs基础</title>
    <url>/2021/04/01/NodeJs%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="Nodejs（所有的知识点都可以去nodejs官网查看详细文档）！"><a href="#Nodejs（所有的知识点都可以去nodejs官网查看详细文档）！" class="headerlink" title="Nodejs（所有的知识点都可以去nodejs官网查看详细文档）！"></a>Nodejs（所有的知识点都可以去nodejs官网查看详细文档）！</h2><h3 id="一-Nodejs可以用来做什么？"><a href="#一-Nodejs可以用来做什么？" class="headerlink" title="一. Nodejs可以用来做什么？"></a>一. Nodejs可以用来做什么？</h3><ol>
<li>具有复杂逻辑的动态网站</li>
<li>WebSocket服务器</li>
<li>命令行工具</li>
<li>带有图形界面的本地应用程序<h3 id="二-终端基本使用"><a href="#二-终端基本使用" class="headerlink" title="二. 终端基本使用"></a>二. 终端基本使用</h3></li>
<li>打开应用<br>notepad打开记事本<br>mspaint打开画图<br>calc打开计算机<br>write写字板<br>sysdm.cpl打开环境变量设置窗口</li>
<li>常用命令<br>md创建目录<br>rmdir(rd)删除目录，目录内没有文档<br>echo on a.txt创建空文件夹<br>del删除文件<br>rm 文件名 –&gt;删除文件<br>cat 文件名 —&gt;查看文件内容<br>cat &gt; 文件名 –&gt;向文件中写上内容<h3 id="三-Nodejs开发环境准备"><a href="#三-Nodejs开发环境准备" class="headerlink" title="三. Nodejs开发环境准备"></a>三. Nodejs开发环境准备</h3></li>
<li>普通安装方式–&gt;官方网站</li>
<li>多版本安装方式<br>卸载已有的nodejs<br>下载nvm<br>在C盘创建目录dev，并且把nvm包解压进去<br>配置nvm环境变量<br>配置nodejs环境变量<h3 id="三-nvm常用的命令"><a href="#三-nvm常用的命令" class="headerlink" title="三. nvm常用的命令"></a>三. nvm常用的命令</h3>nvm list 查看当前安装的Nodejs所有版本<br>nvm install 版本号 安装指定版本的Nodejs<br>nvm uninstall 版本号 卸载指定版本的Nodejs<br>nvm use 版本号 选择指定版本的Nodejs<h3 id="四-Nodejs之Hello-World"><a href="#四-Nodejs之Hello-World" class="headerlink" title="四. Nodejs之Hello World"></a>四. Nodejs之Hello World</h3></li>
<li>命令行方式REPL</li>
</ol>
<p>– REPL read-eval-print-loop 读取代码-执行-打印结果-循环这个过程<br>– 在REPL环境中，_表示最后一次执行结果<br>–退出REPL环境：.exit<br>2. 运行文件方式<br>3. 全局对象概览</p>
<h3 id="五-模块化"><a href="#五-模块化" class="headerlink" title="五. 模块化"></a>五. 模块化</h3><pre><code>模块化开发
传统非模块化开发有如下缺点
1. 命名冲突（变量的冲突，人多提交时会被覆盖）
2. 文件依赖

前端-标准的模块化规范
1. AMD - requirejs  (国外用的比较多)
2. CMD - seajs      (国产的，阿里巴巴的)

服务器端(后端)-模块化规范
1. CommonJs - Node.js

模块化相关的规则：
1. 如何定义模块：一个js文件就是一个模块，模块与模块内部的成员都是相互独立的
2. 模块成员的导出和引入
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191108163312345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019110816334160.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191108163357244.png" alt="在这里插入图片描述"></p>
<h3 id="六-ES6语法-后续加上"><a href="#六-ES6语法-后续加上" class="headerlink" title="六. ES6语法(后续加上)"></a>六. ES6语法(后续加上)</h3><h3 id="七-核心模块API"><a href="#七-核心模块API" class="headerlink" title="七. 核心模块API"></a>七. 核心模块API</h3><ol>
<li>路径操作</li>
</ol>
<p>– 路径基本操作API（==详情看github上nodejs_express/02_day/02.js==）<br>2. 文件操作<br>– 文件信息获取（==通过fs.stat() || fs.statSync()==）</p>
<pre><code>    /* 文件操作(查看文件信息)*/
    // console.log(1);
    // const fs = require(&#39;fs&#39;);
    // fs.stat(&#39;./data.txt&#39;,(err,stats)=&gt;&#123;
    //     // 一般回调函数的第一个参数是错误对象。如果err为null，表示没有错误，否则表示报错，应该终止进程
    //     if(err) return;
    //     // console.log(stats);
    //     /*
    //         atime  文件访问时间
    //         ctime  文件修改时间（文件的状态信息发生变化的时间，比如：文件的权限）
    //         mtime  文件数据发生变化的时间
    //         birthtime  文件创建的时间
    //     */
    //     if(stats.isFile())&#123;
    //         console.log(&#39;文件&#39;);
    //     &#125; else if(stats.isDirectory()) &#123;
    //         console.log(&#39;目录&#39;);
    //     &#125;
    //     console.log(2);
    // &#125;)
    // console.log(3);
    // 同步操作（API）
    // console.log(1);
    // let ret = fs.statSync(&#39;./data.txt&#39;);
    // console.log(ret);
    // console.log(2);
-- 读文件操作

    /*读文件操作(读取文件) */
    const fs = require(&#39;fs&#39;);
    const path = require(&#39;path&#39;);
    let strpath = path.join(__dirname,&#39;data.txt&#39;);
    fs.readFile(strpath,(err,data)=&gt;&#123;
        if(err) return;
        console.log(data.toString());
    &#125;)
    // 另一种简便的方式
    // 第二个参数加上格式。就不需要用.toString()这个方法来转换了
    // 如果没有第二个参数，那么得到的就是一个Buffer实例对象
    fs.readFile(strpath,&#39;utf8&#39;,(err,data)=&gt;&#123;  
        if(err) return;
        console.log(data);
    &#125;)
    // 同步操作
    let ret = fs.readFileSync(strpath,&#39;utf8&#39;);
    console.log(ret);
-- 写文件操作

    /* 写文件操作 */
    const fs = require(&#39;fs&#39;);
    const path = require(&#39;path&#39;);
    
    let strpath = path.join(__dirname,&#39;./data.txt&#39;);
    
    // fs.writeFile(strpath,&#39;哈哈哈哈哈我写完了！&#39;,&#39;utf8&#39;,(err)=&gt;&#123;
    //     if(!err) &#123;
    //         console.log(&#39;写入成功！&#39;);
    //     &#125;;
    // &#125;)
    
    // let str=Buffer.from(&#39;hi!&#39;);
    // fs.writeFile(strpath,str,&#39;utf8&#39;,(err)=&gt;&#123;
    //     if(!err) &#123;
    //         console.log(&#39;写入成功！&#39;);
    //     &#125;;
    // &#125;)
    
    // 同步操作
    fs.writeFileSync(strpath,&#39;tom and jerry&#39;);
-- 大文件操作

    /* 大文件操作（流式操作） */
    let fs = require(&#39;fs&#39;);
    let path = require(&#39;path&#39;);
    
    let spath = path.join(__dirname,&#39;./JsMath.zip&#39;);
    let dpath = path.join(__dirname,&#39;./temp&#39;,&#39;JsMath.zip&#39;);
    
    // let readStream = fs.createReadStream(spath);
    // let writeStream = fs.createWriteStream(dpath);
    
    // 基于事件的处理
    // let num = 1;
    // readStream.on(&#39;data&#39;,(chunk)=&gt;&#123;  // 文件读取的时候会触发
    //     num++;
    //     writeStream.write(chunk);
    // &#125;)
    
    // readStream.on(&#39;end&#39;,()=&gt;&#123;   // 文件处理完毕事件
    //     console.log(&#39;文件处理完成&#39;+num);
    // &#125;)
    // --------------------------------------------------------------
    // 另一种方式---&gt;pipe()的作用直接链接输入流和输出流
    // readStream.pipe(writeStream)
    fs.createReadStream(spath).pipe(fs.createWriteStream(dpath));
-- 目录操作

        /**
     * 目录操作
     * 1. 创建目录
     * fs.mkdir(path[,mode],callback)
     * fs.mkdirSync(path[,mode])
     * 2. 读取目录
     * fs.readdir(path[,options],callback)
     * fs.readdirSync(path[,options])
     * 3. 删除目录
     * fs.rmdir(path,callback)
     * fs.rmdirSync(path)
     */
    let fs = require(&#39;fs&#39;);
    let path = require(&#39;path&#39;);
    
    // fs.mkdir(path.join(__dirname,&#39;./temp/abc&#39;),(err)=&gt;&#123;  // 创建目录abc
    //     console.log(err);
    // &#125;)
    // fs.mkdirSync(path.join(__dirname,&#39;./temp/bcd&#39;));  // 同步方式
    // --------------------------------------------------------------------
    // 读取目录
    // fs.readdir(path.join(__dirname),(err,files)=&gt;&#123;
    //     // console.log(files);
    //     files.forEach((item)=&gt;&#123;
    //         fs.stat(path.join(__dirname,item),(err,stat)=&gt;&#123;
    //             if(stat.isFile())&#123;
    //                 console.log(item,&#39;----------文件&#39;);
    //             &#125;else if(stat.isDirectory())&#123;
    //                 console.log(item,&#39;----------目录&#39;);
    //             &#125;
    //         &#125;)
    //     &#125;)
    // &#125;)
    // 同步方式（不建议使用）
    // let files = fs.readdirSync(__dirname);
    // files.forEach((item)=&gt;&#123;
    //     fs.stat(path.join(__dirname,item),(err,stat)=&gt;&#123;
    //         if(stat.isFile())&#123;
    //             console.log(item,&#39;----------文件&#39;);
    //         &#125;else if(stat.isDirectory())&#123;
    //             console.log(item,&#39;----------目录&#39;);
    //         &#125;
    //     &#125;)
    // &#125;)
    // --------------------------------------------------------------
    // 删除目录
    // fs.rmdir(path.join(__dirname,&#39;./temp/bcd&#39;),(err)=&gt;&#123;
    //     console.log(err);
    // &#125;);
    fs.rmdirSync(path.join(__dirname,&#39;./temp/abc&#39;));
</code></pre>
<ol start="3">
<li><p>文件操作案例</p>
<pre><code> /* 文件操作案例（初始化目录结构）*/
 const path=require(&#39;path&#39;);  // 模块
 const fs=require(&#39;fs&#39;);   // 模块
 
  let root=&#39;F:\\demo\\nodejs_express\\01_day&#39;;   // 初始化目录
  let fileContent = `&lt;!DOCTYPE html&gt;
  &lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
      &lt;meta charset=&quot;UTF-8&quot;&gt;
      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
      &lt;title&gt;Document&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;div&gt;hello world!&lt;/div&gt;
  &lt;/body&gt;
  &lt;/html&gt;`;
  // 初始化数据
  let initData = &#123;
      projectName:&#39;mydemo&#39;,
      data:[&#123;
          name:&#39;img&#39;,
          type:&#39;dir&#39;
      &#125;,&#123;
         name:&#39;js&#39;,
         type:&#39;dir&#39;
     &#125;,&#123;
         name:&#39;css&#39;,
         type:&#39;dir&#39;
     &#125;,&#123;
         name:&#39;index.html&#39;,
         type:&#39;file&#39;
     &#125;]
 
  &#125;
 
  // 创建项目根路径----path.join(root,initData.projectName);在root根目录下创建initData.projectName
  fs.mkdir(path.join(root,initData.projectName),(err)=&gt;&#123;
      if(err) return;  // 如果报错，直接终结
      // 创建子目录
      initData.data.forEach((item)=&gt;&#123;
          if(item.type == &#39;dir&#39;)&#123;
             // 创建子目录
             fs.mkdirSync(path.join(root,initData.projectName,item.name))
          &#125;else if(item.type == &#39;file&#39;)&#123;
             // 创建文件并写入内容
             fs.writeFileSync(path.join(root,initData.projectName,item.name),fileContent);
          &#125;
      &#125;)
  &#125;)
</code></pre>
<h3 id="八-Buffer基本操作-Buffer不是模块，是一个全局成员–-gt-02-day-01-js"><a href="#八-Buffer基本操作-Buffer不是模块，是一个全局成员–-gt-02-day-01-js" class="headerlink" title="八. Buffer基本操作(Buffer不是模块，是一个全局成员–&gt;02_day/01.js)"></a>八. Buffer基本操作(Buffer不是模块，是一个全局成员–&gt;02_day/01.js)</h3></li>
<li><p>Buffer对象是node处理二进制数据的一个接口，==它是node原生提供的全局对象，可以直接使用，不需要require(‘Buffer’)==</p>
</li>
<li><p>实例化：</p>
</li>
</ol>
<p>– Buffer.from(array)<br>– Buffer.alloc(size)<br>3. 功能方法：<br>– Buffer.isEncodeing() 判断是否支持该编码<br>– Buffer.isBuffer() 判断是否为Buffer<br>– Buffer.byteLength() 返回指定编码的字节长度，默认uft8<br>– Buffer.concat() 将一组Buffer对象合并为一个Buffer对象<br>4. 实例方法<br>– write() 向Buffer对象中写入内容<br>– slice() 截取新的Buffer对象<br>– toString() 把Buffer对象转成字符串<br>– toJson() 把Buffer对象转成json形式的字符串(不需要显式调用，当调用JSON.stringify时，会自动调用toJSON方法)</p>
<h3 id="九-Node-js基础-异步编程概念分析"><a href="#九-Node-js基础-异步编程概念分析" class="headerlink" title="九. Node.js基础-异步编程概念分析"></a>九. Node.js基础-异步编程概念分析</h3><h5 id="异步处理（-node当中叫-异步I-O-input-output-）"><a href="#异步处理（-node当中叫-异步I-O-input-output-）" class="headerlink" title="异步处理（==node当中叫 异步I/O input/output==）"></a>异步处理（==node当中叫 异步I/O input/output==）</h5><ol>
<li>文件操作 （查看文件信息、读取文件、写入文件）</li>
<li>网络操作<h6 id="在浏览器中也存在异步操作"><a href="#在浏览器中也存在异步操作" class="headerlink" title="在浏览器中也存在异步操作"></a>在浏览器中也存在异步操作</h6></li>
<li>定时任务</li>
<li>事件处理</li>
<li>ajax回调处理</li>
</ol>
<h6 id="js的运行是单线程的（node当中也是一样）"><a href="#js的运行是单线程的（node当中也是一样）" class="headerlink" title="js的运行是单线程的（node当中也是一样）"></a>js的运行是单线程的（node当中也是一样）</h6><ol>
<li>解决的办法：引入事件队列机制<h6 id="Node-js中的事件模型与浏览器中的事件明模型类似"><a href="#Node-js中的事件模型与浏览器中的事件明模型类似" class="headerlink" title="Node.js中的事件模型与浏览器中的事件明模型类似"></a>Node.js中的事件模型与浏览器中的事件明模型类似</h6></li>
<li>都是采用单线程+事件队列<h6 id="Node-js中异步执行的任务："><a href="#Node-js中异步执行的任务：" class="headerlink" title="Node.js中异步执行的任务："></a>Node.js中异步执行的任务：</h6></li>
<li>文件I/O</li>
<li>网络I/O<h6 id="基于回调函数的编码风格"><a href="#基于回调函数的编码风格" class="headerlink" title="基于回调函数的编码风格"></a>基于回调函数的编码风格</h6><h3 id="十-包"><a href="#十-包" class="headerlink" title="十. 包"></a>十. 包</h3></li>
<li>npm</li>
<li>npm安装方式</li>
</ol>
<p>– 本地安装<br>– 全局安装</p>
<pre><code>    /**
     * 全局安装  -g
     * 本地安装
     * npm常用的命令
     * 1. 安装包：npm install -g 包名称  （全局安装）
     *           npm install 包名称  （本地安装）
     * 2. 卸载包：npm uninstall -g 包名称 （全局卸载）
     *           npm uninstall 包名称     （本地卸载）
     * 3. 更新包：npm update -g 包名称 （会更新到最新的版本）
     * 
     * 开发环境（开发的时候用的环境）   --save-dev    添加到了devDependencies
     * 生产环境（项目部署上线到服务器的环境）  --save  添加到了dependencies
     */
</code></pre>
<h3 id="十一-yarn工具的基本使用"><a href="#十一-yarn工具的基本使用" class="headerlink" title="十一. yarn工具的基本使用"></a>十一. yarn工具的基本使用</h3><pre><code>/**
 * yarn工具的基本使用
 * 安装yarn工具：npm install -g yarn
 * 1. 初始化包：npm init -y--------yarn init
 * 2. 安装包(生产环境)：npm install xxx -S---------yarn add xxx
 * 3. 卸载包：npm uninstall xxx----------yarn remove xxx
 * 4. 更新包：npm update xxx-------------yarn upgrade xxx
 * 5. 安装包(开发环境)：npm install xxx -D---------yarn add xxx --dev
 * 6. 全局安装：npm install -g xxx----------------yarn global add xxx
 * 7. 设置下载镜像：npm config set registry url ------- yarn config set registry url
 * 8. 安装依赖：npm install -------- yarn install
 * 9. 执行包：npm run ------- yarn run
 */
</code></pre>
<h3 id="十二-自定义包"><a href="#十二-自定义包" class="headerlink" title="十二. 自定义包"></a>十二. 自定义包</h3><ol>
<li>包的规范</li>
</ol>
<p>– package.json 必须在包的顶层目录下<br>– 二进制文件应该在bin目录下<br>– javascript代码应该在lib目录下<br>– 文档应该doc目录下<br>– 单元测试应该在test目录下<br>2. package.json字段分析<br><img src="https://img-blog.csdnimg.cn/20191113173535189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>angularjs的angular-tree-dnd、angular-tree-control树结构控件简单使用</title>
    <url>/2019/07/22/angularjs%E7%9A%84angular-tree-dnd%E3%80%81angular-tree-control%E6%A0%91%E7%BB%93%E6%9E%84%E6%8E%A7%E4%BB%B6%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>个人总结</strong></p>
<blockquote>
<p>做树形图的话用angular-ui-tree比较方便，但这个控件并不支持树形表格</p>
</blockquote>
<p><strong>一：angular-tree-dnd树形表格</strong></p>
<blockquote>
<p>先说说数据格式的问题，说到树形图，很多人脑子里出现的数据格式可能就是子节点套在父节点里面，子子节点再套在子节点里面，一层一层嵌套下去，这样的数据格式阅读起来结构是比较清晰，做成树形图的话依赖angular-ui-tree会比较好,例如：<br>{<br>    “id”: 1,<br>    “title”: “node1”,<br>    “nodes”: []<br>  }<br>还有一种数据格式是通过parent_id来确定父子节点对应关系，而我现在的项目的数据格式就是这种：<br>[<br>  {<br>    “DemographicId”: 1,<br>    “ParentId”: null,<br>    “Name”: “United States of America”,<br>    “Description”: “United States of America”,<br>    “Area”: 9826675,<br>    “Population”: 318212000,<br>    “TimeZone”: “UTC -5 to -10”<br>  },<br>  {<br>    “DemographicId”: 2,<br>    “ParentId”: 1,<br>    “Name”: “California”,<br>    “Description”: “The Tech State”,<br>    “Area”: 423970,<br>    “Population”: 38340000,<br>    “TimeZone”: “Pacific Time”<br>  }<br>]</p>
</blockquote>
<blockquote>
<p>相关网站：<a href="https://www.npmjs.com/package/ng-tree-dnd">https://www.npmjs.com/package/ng-tree-dnd</a></p>
</blockquote>
<pre><code>结合angularjs、bootstrap、使用angular-tree-dnd控件的步骤
1.css样式需要引入：bootstrap.css、ng-tree-dnd.css
2.js需要引入：jquery-1.12.4.js、bootstrap.min.js、angular.min.js、prism.jstoaster.min.js、ng-tree-dnd.debug.js
3.声明angular模块时需要注入ng-tree-dnd依赖，var app = angular.module(&#39;app&#39;,[&#39;ntt.TreeDnD&#39;]);
4.控制器controller中要注入ng-tree-dnd控件的服务方法‘‘$TreeDnDConvert’’
    app.controller(&#39;controlleraId&#39;, [&#39;$scope&#39;, &#39;$TreeDnDConvert&#39;, function ($scope, $TreeDnDConvert)&#123;&#125;)
</code></pre>
<p><strong>下面贴代码</strong></p>
<blockquote>
<p>html</p>
</blockquote>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot; ng-app=&#39;app&#39;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;angular-tree-dnd表格树形结构&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./bootstrap/dist/css/bootstrap.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./ng-tree-dnd.css&quot;&gt;
&lt;/head&gt;
&lt;body ng-controller=&#39;controlleraId&#39;&gt;
        &lt;div class=&quot;main-tlt&quot;&gt;&lt;div class=&quot;cn&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-record&quot;&gt;&lt;/i&gt;菜单管理&lt;/div&gt;&lt;/div&gt;

        &lt;div class=&quot;table-top-btn02&quot;&gt;
            &lt;div class=&quot;col-btn&quot;&gt;
                &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; ng-click=&quot;createMenu()&quot;&gt;添加菜单&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;table-mn&quot;&gt;
            &lt;div class=&quot;table table-striped table-hover&quot;&gt;
                &lt;tree-dnd tree-class=&quot;table table-bordered table-hover table-striped&quot;
                          tree-data=&quot;tree_data&quot;
                          tree-control=&quot;my_tree&quot;
                          primary-key=&quot;id&quot;
                          column-defs=&quot;col_defs&quot;
                          expand-on=&quot;expanding_property&quot;&gt;
                &lt;/tree-dnd&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;script src=&quot;./jquery-1.12.4.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./bootstrap/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./prism.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./toaster.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./ng-tree-dnd.debug.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<blockquote>
<p>controller</p>
</blockquote>
<pre><code>var app = angular.module(&#39;app&#39;,[&#39;ntt.TreeDnD&#39;]);

app.controller(&#39;controlleraId&#39;, [
    &#39;$scope&#39;, &#39;$TreeDnDConvert&#39;, function ($scope, $TreeDnDConvert) &#123;
        $scope.a = [
            &#123;
                child: [
                    &#123;child: [],id: 38,isBackMenu: 1,linkUrl: &quot;createRequestForm/local&quot;,menuName: &quot;创建需求单&quot;,parentMenuId: 21,remark: &quot;&quot;,sort: 0&#125;
                ],
                id: 21,
                isBackMenu: 1,
                linkUrl: &quot;index&quot;,
                menuName: &quot;服务需求单&quot;,
                parentMenuId: 0,
                remark: &quot;&quot;,
                sort: 1
            &#125;,
            &#123;
                child: [
                    &#123;child: [],id: 52,isBackMenu: 1,linkUrl: &quot;assignRequirement&quot;,menuName: &quot;需求单指派&quot;,parentMenuId: 46,remark: &quot;&quot;,sort: 1&#125;
                ],
                id: 46,
                isBackMenu: 1,
                linkUrl: &quot;index&quot;,
                menuName: &quot;调度管理&quot;,
                parentMenuId: 0,
                remark: &quot;&quot;,
                sort: 2
            &#125;
        ]
        $scope.getMenu = function () &#123;
            $scope.tree_data = $TreeDnDConvert.line2tree($scope.a, &#39;id&#39;, &#39;parentMenuId&#39;);
            angular.forEach($scope.tree_data, function (data) &#123;
                data[&#39;__expanded__&#39;] = false;
                angular.forEach(data.child, function (item) &#123;
                    item[&#39;__expanded__&#39;] = false;
                    angular.forEach(item.child, function (value) &#123;
                        item[&#39;__expanded__&#39;] = false;
                        value.newData = 3;
                    &#125;);
                &#125;);
            &#125;);
            return $scope.tree_data;
        &#125;;
        $scope.getMenu();
        var tree = &#123;&#125;;
        $scope.tree_data = $scope.getMenu();
        $scope.my_tree = tree = &#123;&#125;;

        $scope.expanding_property = &#123;
            field: &#39;menuName&#39;,
            titleClass: &#39;text-center&#39;,
            cellClass: &#39;v-middle&#39;,
            displayName: &#39;名称&#39;
        &#125;;
        $scope.col_defs = [
            &#123;
                field: &#39;linkUrl&#39;,
                titleClass: &#39;text-center&#39;,
                cellClass: &#39;v-middle&#39;,
                displayName: &#39;地址&#39;
            &#125;,
            &#123;
                field: &#39;remark&#39;,
                titleClass: &#39;text-center&#39;,
                cellClass: &#39;v-middle&#39;,
                displayName: &#39;备注&#39;
            &#125;,
            &#123;
                displayName: &#39;操作&#39;,
                cellTemplate: &#39;&lt;i ng-if = &quot;node.newData != 3&quot;  class=&quot;glyphicon glyphicon-th&quot; aria-hidden=&quot;true&quot; title=&quot;创建子集&quot; ng-click=&quot;createMenu(node)&quot;&gt;&lt;/i&gt;&lt;i class=&quot;glyphicon glyphicon-pencil&quot; aria-hidden=&quot;true&quot; title=&quot;编辑&quot; ng-click=&quot;editMenu(node)&quot;&gt;&lt;/i&gt;&lt;i class=&quot;glyphicon glyphicon-trash&quot; aria-hidden=&quot;true&quot; title=&quot;删除&quot; ng-click=&quot;deleteMenu(node)&quot;&gt;&lt;/i&gt;&#39;
            &#125;];
    &#125;]);
</code></pre>
<p><strong>效果如下</strong><br><img src="https://img-blog.csdnimg.cn/20190722160410418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><strong>二：Angular-Tree——-angular-tree-control.js</strong></p>
<blockquote>
<p>引入步骤<br>1.css：&lt;link rel=”stylesheet” href=”./tree-control.css”&gt;&lt;link rel=”stylesheet” href=”./tree-control-attribute.css”&gt;<br>2.js：&lt;script src=”./angular.min.js”&gt;</script>&lt;script src=”./angular-tree-control.js”&gt;</script>&lt;script src=”./lib/angular-tree/context-menu.js”&gt;</script><br>3.模块注入：var app = angular.module(‘App’,[‘treeControl’]);<br>4.控制器里的内容就是定义数据结构，网上有案例，可以参考官网：<a href="http://wix.github.io/angular-tree-control/">http://wix.github.io/angular-tree-control/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular-tree-dnd</tag>
        <tag>angular-tree-control</tag>
      </tags>
  </entry>
  <entry>
    <title>angularjs loading拦截器.请求,跳转页面等loading效果</title>
    <url>/2019/07/13/angularjs-loading%E6%8B%A6%E6%88%AA%E5%99%A8-%E8%AF%B7%E6%B1%82-%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2%E7%AD%89loading%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p><strong>个人总结</strong></p>
<blockquote>
<p>前言: 今天周末,闲来无事又看了看拦截器,发现不只是截获http请求,同样还可以制作很多好玩的东西,今天来写一个loading案例,请求http或者跳转渲染页面时,会有一定的等待时间,可能一两秒,也可能是十几秒,在等待的过程中,用户是不知道的,所以我们要给用户一个直观的等待效果,让用户知道!</p>
</blockquote>
<p><strong>步骤(需要引入的文件)</strong></p>
<blockquote>
<p>第一步: 引入bootstrap.css<br>第二步: 引入jquery库<br>第三步: 引入angular.js<br>第四步: 引入angular-ui-router.js<br>第五步: 引入angular-animate.js</p>
</blockquote>
<p><strong>下面看代码(需要的直接复制看效果就好!)</strong></p>
<pre><code>&lt;!DOCTYPE html&gt;
    &lt;html lang=&quot;zh-CN&quot; ng-app=&quot;myApp&quot;&gt;
      &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;../../angularjs/bootstrap-3.3.7-dist/css/bootstrap.min.css&quot;&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            .mask-loading .loading-icon &#123;
                -webkit-animation: rotate 1s linear infinite;
                -o-animation: rotate 1s linear infinite;
                animation: rotate 1s linear infinite;
                position: absolute;
                top: 50%;
                left: 50%;
                width: 30px;
                height: 30px;
                margin: -20px 0 0 -20px;
                border-width: 5px;
                border-style: solid;
                border-color: #37c3aa #37c3aa #fff #fff;
                opacity: .9;
                border-radius: 20px;
            &#125;
     
            @-webkit-keyframes rotate&#123;
              0% &#123;-webkit-transform:rotate(0)&#125;
              100% &#123;-webkit-transform:rotate(360deg)&#125;
            &#125;
     
            @keyframes rotate&#123;
              0% &#123;transform:rotate(0)&#125;
              100% &#123;transform:rotate(360deg)&#125;
            &#125;
     
            .mask-loading &#123;
              position:fixed;
              top:0;
              right:0;
              bottom:0;
              left:0;
              background:0 0;
              z-index:9999;
            &#125;
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;h1&gt;index&lt;/h1&gt;
        &lt;div id=&quot;mask-loading&quot; class=&quot;mask-loading&quot; ng-if=&quot;loading&quot; style=&quot;background-color: rgba(0, 0, 0, 0.17);&quot;&gt;
            &lt;div class=&quot;loading-icon&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div ui-view&gt;&lt;/div&gt;
        &lt;a ui-sref=&quot;a&quot;&gt;go to a.html&lt;/a&gt;
        &lt;br/&gt;
        &lt;a ui-sref=&quot;b&quot;&gt;go to b.html&lt;/a&gt;
        &lt;script src=&quot;../../angularjs/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;../../angularjs/angular-1.5.8/angular.min.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./angular-animate.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./angular-ui-router.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
          var myApp = angular.module(&#39;myApp&#39;,[&#39;ui.router&#39;, &#39;ngAnimate&#39;]);
          myApp.config([&quot;$stateProvider&quot;, &quot;$httpProvider&quot;, &#39;$urlRouterProvider&#39;, function ($stateProvider, $httpProvider, $urlRouterProvider) &#123;
              $stateProvider
              .state(&#39;a&#39;, &#123;
                  url: &#39;/a&#39;,
                  templateUrl: &quot;./a.html&quot;,
                  controller: &quot;aController&quot;
              &#125;)
              .state(&#39;b&#39;, &#123;
                  url: &#39;/b&#39;,
                  templateUrl: &quot;./b.html&quot;,
                  controller: &quot;bController&quot;
              &#125;);
              $urlRouterProvider.otherwise(&#39;/&#39;);
              $httpProvider.interceptors.push(&#39;myInterceptor&#39;);
          &#125;]);
           
          //loading拦截器
          myApp.factory(&#39;myInterceptor&#39;, [&quot;$rootScope&quot;, function ($rootScope) &#123;
              var timestampMarker = &#123;
                  request: function (config) &#123;   //请求前或跳转前或渲染后
                      $rootScope.loading = true;  // loading特效容器为true 显示
                      return config;
                  &#125;,
                  response: function (response) &#123;   // 请求后或跳转后或渲染后
                    setTimeout(function()&#123;//由于并没有调接口,所以体现不出来时间差距,为了体现有时间差,这里用到了定时器,
                        $rootScope.$apply(function()&#123;  //重新脏检查
                            $rootScope.loading = false;   
                        &#125;);
                    &#125;,2000);
                      return response;
                  &#125;
              &#125;;
              return timestampMarker;
          &#125;]);
     
          myApp.controller(&#39;aController&#39;, function($scope) &#123;
            $scope.page = &quot;a&quot;;
          &#125;);
     
          myApp.controller(&#39;bController&#39;, function($scope) &#123;
            $scope.page = &quot;b&quot;;
          &#125;);
        &lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
</code></pre>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>angularjs项目中的appService.js的用处</title>
    <url>/2019/07/16/angularjs%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84appService-js%E7%9A%84%E7%94%A8%E5%A4%84/</url>
    <content><![CDATA[<blockquote>
<p>公司中angular的项目，appService.js是angularjs实例的声明、配置等文件。<br>就目前来讲，配置接口服务器域名地址、发送请求统一带上token(拦截器)、封装http请求,支持get,post,delete,put,DownloadFile方式，下面代码体现</p>
</blockquote>
<pre><code>var app = angular.module(&#39;app&#39;, [ /声明一个angular模块
    &#39;ngAnimate&#39;,    // 动画模块
    &#39;ngSanitize&#39;,    // $sanitize服务依赖于此模块，具体查百度
    &#39;ui.router&#39;,   // 路由模块
    &#39;ui.bootstrap&#39;,  // 基于angular的bootstrap
    &#39;ui.jq&#39;,   // 基于angular的juqery
    &#39;ntt.TreeDnD&#39;,   // 基于angular的树插件所依赖的模块
    &#39;treeControl&#39;,  // 基于angular的Angular-tree-control所依赖的模块
    &#39;ngCookies&#39;, // $cookie所依赖的模块
     &#39;ui.select&#39;,  // 基于Angular中ui-select控件所依赖的模块
     &#39;angularFileUpload&#39;,  // 基于Angular的angular-file-upload控件所依赖的模块
     &#39;ngDragDrop&#39;   // 拖拽功能所依赖的模块(ng-drag等，以后会详谈)；
]);

//配置接口服务器域名地址(属于服务，使用的地方注入serverDomain即可)
app.value(&quot;serverDomain&quot;, &quot;http://localhost:21888/&quot;);
//app.value(&quot;serverDomain&quot;, &quot;http://10.5.253.86:21888/&quot;);

//发送请求统一带上token
app.factory(&#39;authInterceptor&#39;, [&quot;$rootScope&quot;, &quot;$cookies&quot;, &quot;$injector&quot;, &quot;$q&quot;, &quot;$location&quot;, function ($rootScope, $cookies, $injector, $q, $location) &#123;
    return &#123;
        request: function (config) &#123;  // 请求拦截
            config.headers = config.headers || &#123;&#125;;
            var headerName = &#39;Authorization&#39;;
            var cookieName = &#39;XSRF-TOKEN&#39;;
            //检查cookie是否存在
            if ($cookies.get(cookieName) == undefined || $cookies.get(cookieName) == &#39;&#39;) &#123;
                $location.path(&#39;/Index&#39;);
            &#125;
            else &#123;
                config.headers[headerName] = &#39;Bearer &#39; + $cookies.get(cookieName);
            &#125;

            //设置不缓存
            config.headers[&quot;X-Requested-With&quot;] = &#39;XMLHttpRequest&#39;;
            config.headers[&quot;Cache-Control&quot;] = &quot;no-cache&quot;;
            config.headers[&#39;Pragma&#39;] = &#39;no-cache&#39;;

            return config;
        &#125;,
        responseError: function (response) &#123;  //请求错误异常处理拦截
            abp.ui.clearBusy(&quot;#mianBody&quot;);
            abp.ui.clearBusy($(&#39;.modal-content&#39;));//清除Modal遮罩层
            //401服务端返回授权失败
            if (response.status == 401) &#123;
                var msg = &quot;您访问的接口未授权，请联系管理员&quot;;// response.data.error.message || 
                abp.message.warn(msg, &quot;提示&quot;);
            &#125; else if (response.status == 400) &#123;
                abp.message.warn(&quot;您输入的参数不符合规范，请重新核对&quot;, &quot;提示&quot;);
            &#125; else if (response.status == 403) &#123;
                abp.message.warn(&quot;您没有接口访问权限，请联系管理员&quot;, &quot;提示&quot;);
            &#125; else if (response.status == 500 &amp;&amp; response.data.error.code == 200)//code为200需要提示到界面的错误信息
            &#123;
                abp.message.warn(response.data.error.message, &quot;提示&quot;);
            &#125;
            else &#123;
                var errorData = &quot;&lt;div&gt;&lt;p&gt;&quot; + response.status + &quot;:&quot; + response.statusText + &quot;&lt;/p&gt;&quot; +
                    &quot;&lt;p&gt;请求接口为：&quot; + response.config.url + &quot;&lt;/p&gt;&quot;
                    + &quot;&lt;/div&gt;&quot;

                if (response.data.error &amp;&amp; response.data.error.message) &#123;
                    errorData += &quot;&lt;p&gt;&quot; + response.data.error.message + &quot;&lt;p&gt;&quot;;
                &#125;

                var topMenuId = $location.search().topMenuId;
                $location.path(&quot;/error&quot;).search(&#123; topMenuId: topMenuId, errorData: errorData &#125;);
                return $q.reject(response);
            &#125;

            //else
            //    if (response.status === 404) &#123;
            //    $location.path(&#39;/Index&#39;);
            //    return $q.reject(response);
            //&#125;
        &#125;,
        response: function (response) &#123; // 响应拦截
            return response;
        &#125;
    &#125;;
&#125;]);

//封装http请求,支持get,post,delete,put方式
app.factory(&#39;httpService&#39;, function ($http) &#123;
    var factory = &#123;
        Get: function (url, data, success_CallBack, error_CallBack) &#123;
            $http.get(url, &#123; params: data &#125;).then(function successCallback(response) &#123;
                success_CallBack(response.data);
            &#125;, function errorCallback(response) &#123;
                // 请求失败执行代码
                error_CallBack(response);
            &#125;);
        &#125;,
        Post: function (url, data, success_CallBack, error_CallBack) &#123;
            $http.post(url, data).then(function successCallback(response) &#123;
                success_CallBack(response.data);
            &#125;, function errorCallback(response) &#123;
                // 请求失败执行代码
                error_CallBack(response);
            &#125;);

        &#125;,
        Delete: function (url, success_CallBack, error_CallBack) &#123;
            $http.delete(url).then(function successCallback(response) &#123;
                success_CallBack(response.data);
            &#125;, function errorCallback(response) &#123;
                // 请求失败执行代码
                error_CallBack(response);
            &#125;);

        &#125;,
        Put: function (url, data, success_CallBack, error_CallBack) &#123;
            $http.put(url, data).then(function successCallback(response) &#123;
                success_CallBack(response.data);
            &#125;, function errorCallback(response) &#123;
                // 请求失败执行代码
                error_CallBack(response);
            &#125;);

        &#125;,
        DownloadFile: function (url, data) &#123;
            //增加loading
            abp.ui.setBusy($(&quot;#mianBody&quot;));
            $http(&#123;
                url: url,
                method: &quot;GET&quot;,
                params: data,
                responseType: &quot;blob&quot;

            &#125;).then(function (response, status, header, config, statusText) &#123;
                var fileName = response.headers(&quot;Content-Disposition&quot;).split(&quot;;&quot;)[1].split(&quot;filename=&quot;)[1];
                var fileNameUnicode = response.headers(&quot;Content-Disposition&quot;).split(&quot;filename*=&quot;)[1];
                if (fileNameUnicode) &#123;//当存在 filename* 时，取filename* 并进行解码（为了解决中文乱码问题）
                    fileName = decodeURIComponent(fileNameUnicode.split(&quot;&#39;&#39;&quot;)[1]);
                &#125;

                var blob = response.data;
                if (&#39;msSaveOrOpenBlob&#39; in navigator) &#123;//IE导出
                    window.navigator.msSaveOrOpenBlob(blob, fileName);
                &#125;
                else &#123;
                    //var reader = new FileReader();
                    //reader.readAsDataURL(blob);    // 转换为base64，可以直接放入a表情href
                    //reader.onload = function (e) &#123;
                    //    // 转换完成，创建一个a标签用于下载
                    //    var a = document.createElement(&#39;a&#39;);
                    //    a.download = fileName;
                    //    a.href = e.target.result;
                    //    $(&quot;body&quot;).append(a);
                    //    a.click();
                    //    $(a).remove();
                    //&#125;
                    var a = document.createElement(&#39;a&#39;);
                    a.download = fileName;
                    a.href = URL.createObjectURL(blob);
                    $(&quot;body&quot;).append(a);
                    a.click();
                    $(a).remove();
                &#125;
                //清除loading
                abp.ui.clearBusy(&quot;#mianBody&quot;);

            &#125;);
        &#125;
    &#125;
    return factory;
&#125;);
</code></pre>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>bootatrap分页控件bootstrap-paginator.js简单使用</title>
    <url>/2019/07/14/bootatrap%E5%88%86%E9%A1%B5%E6%8E%A7%E4%BB%B6bootstrap-paginator-js%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>封装js</p>
</blockquote>
<pre><code>//分页控件
var paginator = &#123;
    // 参数依次是:元素id,当前页,总条数,一页显示多少条,回调
    init: function (elementId, pageIndex, totalCount, pageSize, pageChangeCbk) &#123;
        if (totalCount &lt;= 0) &#123;
            $(&quot;#&quot; + elementId + &quot;&quot;).html(&quot;&quot;);
            $(&quot;.totalCountOfPaginator&quot;).remove();
            return;
        &#125;;
        var options = &#123;
            currentPage: pageIndex + 1, 设置当前页.
            totalPages: (totalCount % pageSize) == 0 ? (totalCount / pageSize) : (totalCount / pageSize) + 1,  // 设置总页数
            numberOfPages: 10, //在页面上显示的页码数最多显示十页
            bootstrapMajorVersion: 3,// 设置版本号
            useBootstrapTooltip: true,//设置是否使用Bootstrap内置的tooltip(鼠标放上,提示文字), true是使用，false是不使用,默认是不使用。注意：如果使用，则需要引入bootstrap-tooltip.js插件。
            itemTexts: function (type, page, current) &#123; //通过这个参数我们就可以将操作按钮上的英文改为中文。如first--&gt;首页，last--&gt;尾页。
                switch (type) &#123;
                    case &quot;first&quot;:
                        return &quot;首页&quot;;
                    case &quot;prev&quot;:
                        return &quot;上一页&quot;;
                    case &quot;next&quot;:
                        return &quot;下一页&quot;;
                    case &quot;last&quot;:
                        return &quot;末页&quot;;
                    case &quot;page&quot;:
                        return page;
                &#125;
            &#125;, onPageClicked: function (event, originalEvent, type, page) &#123; //为操作按钮绑定click事件。
                pageChangeCbk(page);
            &#125;
        &#125;
        $(&quot;#&quot; + elementId + &quot;&quot;).bootstrapPaginator(options);
        $(&quot;.totalCountOfPaginator&quot;).remove();
        var totalCountEle = $(&quot;&lt;span class=&#39;totalCountOfPaginator&#39;&gt;总共 &quot; + totalCount + &quot; 条&lt;/span&gt;&quot;);
        var p = $(&quot;#&quot; + elementId + &quot;&quot;);
        totalCountEle.insertBefore(p);
    &#125;
&#125;;
</code></pre>
<blockquote>
<p>请求完数据之后的使用</p>
</blockquote>
<pre><code>// 获取列表数据
$scope.getTransSupportList = function () &#123;
    abp.ui.setBusy(&quot;#mianBody&quot;);
    var url = serverDomain + &#39;api/services/app/PlanWorkOrderService/GetCrossBranchApprovalOrCheckList&#39;;
    var param = angular.copy($scope.paramData);
    httpService.Get(url, param, function (res) &#123;
       abp.ui.clearBusy(&quot;#mianBody&quot;);
           if (res.success) &#123;
                $scope.transSupportList = res.result.items;
                   // 总条数
                   var totalCount = res.result.totalCount;
                   //第一次加载时候初始化分页控件(如果当前页是0的时候,初始化)
                   if ($scope.paramData.PageIndex === 0) &#123;
                          //下面是封装的分页方法
                          //参数一: 分页的id属性
                          //参数二: 当前页 0 
                          //参数三: 接口返回的总条数
                          //参数四: 一页显示多少条
                          //参数五: 回调,点击每一页的click事件
                       paginator.init(&quot;myPage&quot;, $scope.paramData.PageIndex, totalCount, $scope.paramData.PageSize, function (pageIndex) &#123;
                          $scope.paramData.PageIndex = pageIndex - 1;
                          $scope.getTransSupportList();
                       &#125;)
                   &#125;
           &#125;
    &#125;, function (err) &#123; &#125;);
&#125;
</code></pre>
<blockquote>
<p>html页面调用</p>
</blockquote>
<pre><code>&lt;nav aria-label=&quot;Page navigation&quot; class=&quot;page&quot;&gt;
    &lt;ul class=&quot;pagination&quot; id=&quot;myPage&quot;&gt;&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>
]]></content>
      <categories>
        <category>bootatrap</category>
      </categories>
      <tags>
        <tag>bootstrap-paginator</tag>
      </tags>
  </entry>
  <entry>
    <title>express初始化简单配置</title>
    <url>/2019/11/21/express%E5%88%9D%E5%A7%8B%E5%8C%96%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="图书管理系统（实现增删改查，路由，模板等功能）"><a href="#图书管理系统（实现增删改查，路由，模板等功能）" class="headerlink" title="图书管理系统（实现增删改查，路由，模板等功能）"></a>图书管理系统（实现增删改查，路由，模板等功能）</h3><ol>
<li>初始化</li>
</ol>
<p>– <code>npm express body-parser art-template express-art-template</code>下载依赖</p>
<pre><code>    /**
     * 图书管理系统（小demo）----入口文件
     */
    const express = require(&#39;express&#39;);
    const template = require(&#39;art-template&#39;);
    const bodyParser = require(&#39;body-parser&#39;);
    const router = require(&#39;./router&#39;);
    const path = require(&#39;path&#39;);
    const app = express();
    
    // 设置模板路径
    app.set(&#39;views&#39;,path.join(__dirname,&#39;views&#39;));
    // 设置模板引擎
    app.set(&#39;view engine&#39;,&#39;art&#39;);
    // express兼容art-template模板
    app.engine(&#39;art&#39;,require(&#39;express-art-template&#39;));
    // 挂载参数处理中间件(post)
    // parse application/x-www-form-urlencoded（解析应用程序/ x-www-form-urlencoded）
    // 作用是解析application/x-www-form-urlencoded格式的数据(默认post表单提交的数据)
    app.use(bodyParser.urlencoded(&#123; extended: false &#125;));
    // 解析 application/json 类型的数据（处理json格式的参数）
    app.use(bodyParser.json());
    
    // 启动服务器功能
    // 配置路由
    app.use(router);
    // 监听端口
    app.listen(3000,()=&gt;&#123;
        console.log(&#39;running....&#39;);
    &#125;)
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191119111620743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="具体的路由处理，链接模板等方法在github上"><a href="#具体的路由处理，链接模板等方法在github上" class="headerlink" title="具体的路由处理，链接模板等方法在github上"></a>具体的路由处理，链接模板等方法在github上</h5>]]></content>
      <categories>
        <category>express</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-table-fixed-columns表格控件使用方法（操作复杂表头并且固定表头和固定列）</title>
    <url>/2019/11/01/bootstrap-table-fixed-columns%E8%A1%A8%E6%A0%BC%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%88%E6%93%8D%E4%BD%9C%E5%A4%8D%E6%9D%82%E8%A1%A8%E5%A4%B4%E5%B9%B6%E4%B8%94%E5%9B%BA%E5%AE%9A%E8%A1%A8%E5%A4%B4%E5%92%8C%E5%9B%BA%E5%AE%9A%E5%88%97%EF%BC%89/</url>
    <content><![CDATA[<h2 id="需要引入的东西"><a href="#需要引入的东西" class="headerlink" title="需要引入的东西"></a>需要引入的东西</h2><ol>
<li>bootstrap.min.css</li>
<li>bootstrap-table.css</li>
<li>bootstrap-table-fixed-columns.css</li>
<li>jquery.min.js</li>
<li>bootstrap.min.js</li>
<li>bootstrap-table.js</li>
<li>bootstrap-table-fixed-columns.js</li>
</ol>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol>
<li>一个方法；<pre><code>     $el.bootstrapTable(&#39;destroy&#39;).bootstrapTable(&#123;
         columns: columns,  // 渲染表头，columns是我们拿到数据后，表头数据的数组
         data: data,   // 表格主题内容  data是我们拿到数据后，表格主体的数据
         fixedColumns: true,  // 是否固定表头
         fixedNumber: 1   // 固定几列
     &#125;);
</code></pre>
</li>
<li>表格的主体内容渲染的时候是根据最后一行表头的field来对应的。会在下面的例子中体现</li>
<li>这里有一个bug，解决列对不齐问题；<br>修改bootstrap-table-fixed-coluumns.js源码：133行：-2改为-1；154行：-1删掉<br><img src="https://img-blog.csdnimg.cn/20191106134300516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap.min.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap-table.css&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap-table-fixed-columns.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;button class=&quot;btn btn-primary&quot; id=&quot;btn1&quot;&gt;点我是公司/服务资质&lt;/button&gt;
    &lt;button class=&quot;btn btn-primary&quot; id=&quot;btn2&quot;&gt;点我是产品资质&lt;/button&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;table id=&quot;table&quot; data-height=&quot;500&quot;&gt;&lt;/table&gt;
    &lt;/div&gt;
    &lt;script src=&quot;./js/jquery.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./js/bootstrap-table.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;./js/bootstrap-table-fixed-columns.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        $(function()&#123;
            var $table=$(&#39;#table&#39;);
            // 点击公司/服务资质
            $(&#39;#btn1&#39;).on(&#39;click&#39;,function(e)&#123;
                $.ajax(&#123;
                    url:&#39;./公司服务资质.json&#39;,
                    type:&#39;get&#39;,
                    async:false,
                    dataType:&#39;json&#39;,
                    success:function(data)&#123;
                        console.log(data);
                        ajaxQualification($table,data.ReturnObject.title,data.ReturnObject.body,data.ReturnObject.dataType);
                    &#125;,
                    error:function(data)&#123;
                        console.log(&#39;失败了！！！&#39;);
                    &#125;
                &#125;)
            &#125;)
            // 点击产品资质
            $(&#39;#btn2&#39;).on(&#39;click&#39;,function(e)&#123;
                $.ajax(&#123;
                    url:&#39;./产品资质.json&#39;,
                    type:&#39;get&#39;,
                    async:false,
                    dataType:&#39;json&#39;,
                    success:function(data)&#123;
                        console.log(data);
                        ajaxQualification($table,data.ReturnObject.title,data.ReturnObject.body,data.ReturnObject.dataType);
                    &#125;,
                    error:function(data)&#123;
                        console.log(&#39;失败了！！！&#39;);
                    &#125;
                &#125;)
                
            &#125;)
        &#125;)
        function ajaxQualification($el,dataTitl,dataBody,dataType)&#123;
            // console.log(&#39;data--------------------&#39;,data);
            var columns=[],th1=[],th2=[],th3=[],data=[],row=&#123;&#125;;
            if(dataType==&#39;公司/服务资质&#39;)&#123;
                th1=[&#123;
                    field:&#39;type&#39;,
                    title:&#39;&lt;span style=&quot;color:green&quot;&gt;资质分类&lt;/span&gt;&#39;,
                    align:&#39;center&#39;,
                    valign:&#39;middle&#39;
                &#125;];
                th2=[&#123;
                    field:&#39;name&#39;,
                    title:&#39;&lt;span style=&quot;color:green&quot;&gt;资质名称&lt;/span&gt;&#39;,
                    align:&#39;center&#39;,
                    valign:&#39;middle&#39;
                &#125;];
                th3=[&#123;
                    field:&#39;explain&#39;,
                    title:&#39;&lt;span style=&quot;color:green&quot;&gt;级别说明&lt;/span&gt;&#39;,
                    align:&#39;center&#39;,
                    valign:&#39;middle&#39;
                &#125;]
                // 渲染头部
                dataTitl.forEach(function(item)&#123;
                    th1.push(&#123;
                        field:item.competitorsQualificationType,
                        title:item.competitorsQualificationType,
                        colspan:item.competitorsQualificationMsg.length,
                        align:&#39;center&#39;,
                        valign:&#39;middle&#39;
                    &#125;)
                    item.competitorsQualificationMsg.forEach(function(items)&#123;
                        th2.push(&#123;
                            field:items.competitorsQualificationName,
                            title:&quot;&lt;a href=&#39;&quot;+items.qualificationQueryUrl+&quot;&#39; target=&#39;_blank&#39;&gt;&quot;+items.competitorsQualificationName+&quot;&lt;/a&gt;&quot;,
                            align:&#39;center&#39;,
                            valign:&#39;middle&#39;
                        &#125;)
                        th3.push(&#123;
                            field:items.dataKeyName,
                            title:items.levelInstruction,
                            align:&#39;center&#39;,
                            valign:&#39;middle&#39;
                        &#125;)
                    &#125;)
                &#125;);
                // 渲染主体
                dataBody.forEach(function(item)&#123;
                    row[&#39;explain&#39;]=item.competitorsCompanyName;
                    item.competitorsCompanyAptitude.forEach(function(items)&#123;
                        if(items.level==&#39;√&#39;)&#123;
                            items.level=&#39;&lt;i class=&quot;layui-icon&quot; style=&quot;color: green;font-size: 14px;font-weight: 700;&quot;&gt;&amp;#10003;&lt;/i&gt;&#39;;
                        &#125;else if(items.level==&#39;×&#39;)&#123;
                            items.level=&#39;&lt;i class=&quot;layui-icon&quot; style=&quot;color: red;font-size: 14px;font-weight: 700;&quot;&gt;&amp;#10005;&lt;/i&gt;&lt;/a&gt;&#39;;
                        &#125;
                        row[items.dataKey]=items.level;
                    &#125;)
                    data.push(row);
                &#125;)
            &#125;else if(dataType==&#39;产品资质&#39;)&#123;
                th1=[&#123;
                    field:&#39;aptitudeName&#39;,
                    title:&#39;&lt;span style=&quot;color:green&quot;&gt;资质名称&lt;/span&gt;&#39;,
                    align:&#39;center&#39;,
                    valign:&#39;middle&#39;
                &#125;];
                th2=[&#123;
                    field:&#39;issueUnit&#39;,
                    title:&#39;&lt;span style=&quot;color:green&quot;&gt;发证单位&lt;/span&gt;&#39;,
                    align:&#39;center&#39;,
                    valign:&#39;middle&#39;
                &#125;];
                th3=[&#123;
                    field:&#39;companyName&#39;,
                    title:&#39;&lt;span style=&quot;color:green&quot;&gt;公司名称&lt;/span&gt;&#39;,
                    align:&#39;center&#39;,
                    valign:&#39;middle&#39;
                &#125;]
                // 渲染头部
                dataTitl.forEach(function(item)&#123;
                    th1.push(&#123;
                        field:item.certificateName,
                        title:item.certificateName,
                        colspan:3,
                        align:&#39;center&#39;,
                        valign:&#39;middle&#39;
                    &#125;)
                    th2.push(&#123;
                        field:item.dataKeyName,
                        title:item.issuedUnit,
                        colspan:3,
                        align:&#39;center&#39;,
                        valign:&#39;middle&#39;
                    &#125;)
                    th3.push(&#123;
                        field:item.competitorsProductMsg.dataKey+&#39;name&#39;,
                        title:item.competitorsProductMsg.competitorsProductName,  // 产品名称
                        align:&#39;center&#39;,
                        valign:&#39;middle&#39;
                    &#125;,&#123;
                        field:item.competitorsProductMsg.dataKey+&#39;level&#39;,
                        title:item.competitorsProductMsg.level,   // 级别
                        align:&#39;center&#39;,
                        valign:&#39;middle&#39;
                    &#125;,&#123;
                        field:item.competitorsProductMsg.dataKey+&#39;day&#39;,
                        title:item.competitorsProductMsg.competitorsProductValidityPeriod,   // 有效期
                        align:&#39;center&#39;,
                        valign:&#39;middle&#39;
                    &#125;)

                &#125;);
                // 渲染主体
                dataBody.forEach(function(item)&#123;
                    row[&#39;companyName&#39;]=item.competitorsCompanyName;
                    item.competitorsProductAptitude.forEach(function(items)&#123;
                        row[items.dateKey+&#39;name&#39;]=items.competitorsProductName;  // 产品名称
                        row[items.dateKey+&#39;level&#39;]=items.competitorsProductLevel;  // 等级
                        row[items.dateKey+&#39;day&#39;]=items.competitorsProductValidityPeriod;  // 有效期
                    &#125;)
                    data.push(row);
                &#125;)
            &#125;
            columns.push(th1);
            columns.push(th2);
            columns.push(th3);
            $el.bootstrapTable(&#39;destroy&#39;).bootstrapTable(&#123;
                columns: columns,
                data: data,
                search: true,
                toolbar: &#39;.toolbar&#39;,
                fixedColumns: true,
                fixedNumber: 1
            &#125;);
        &#125;
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>bootstrap-table-fixed-columns</tag>
      </tags>
  </entry>
  <entry>
    <title>express的布局，express-ejs-layouts使用</title>
    <url>/2021/03/29/express%E7%9A%84%E5%B8%83%E5%B1%80%EF%BC%8Cexpress-ejs-layouts%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>node+express的项目中，碰到了这个布局<br> <code>&lt;%- defineContent(&#39;header&#39;) %&gt;、&lt;%- contentFor(&#39;header&#39;) %&gt;</code><br> 这两个语法一开始不太懂，后来慢慢的就理解了，记录一下！==下面也会放项目截图用作理解==</p>
</blockquote>
<blockquote>
<p>解释：<br><code>&lt;%- defineContent(&#39;header&#39;) %&gt;</code> 理解： 一般都是写在入口<code>layout.ejs</code>文件的，目的是为了渲染自定义视图，相当于是一个占位符，类似与vue中的 <code>&lt;router-view&gt;&lt;/router-view&gt;</code>组件；<br><code>&lt;%- contentFor(&#39;header&#39;) %&gt;</code> 理解：这个就是一个自定义内容的语法，在这个语法的下面可以写自己的代码！这个是和<code>&lt;%- defineContent(&#39;header&#39;) %&gt;</code>呼应的，定义的名字要相同</p>
</blockquote>
<h6 id="首先想要使用这个布局，需要安装express-ejs-layouts依赖"><a href="#首先想要使用这个布局，需要安装express-ejs-layouts依赖" class="headerlink" title="首先想要使用这个布局，需要安装express-ejs-layouts依赖"></a>首先想要使用这个布局，需要安装express-ejs-layouts依赖</h6><ol>
<li><code>npm i express-ejs-layouts</code>  =&gt; 下载包</li>
<li>在 <code>app.js</code> 中引入<br><img src="https://img-blog.csdnimg.cn/20210329145837123.png" alt="在这里插入图片描述"><h6 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h6><blockquote>
<p>layout.ejs  ———– 这个是公共页面，包含头部和左侧菜单<br><code>&lt;%- defineContent(&#39;rightContent&#39;) %&gt;</code>原本就是项目中用来渲染视图的，为了方便学习测试，简单改了一下</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;</span><br><span class="line">    &lt;% include ../common/header.ejs %&gt;</span><br><span class="line">    &lt;%- defineContent(&#x27;header&#x27;) %&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body data-page=&quot;&lt;%= page %&gt;&quot; data-pageClass=&quot;&lt;%= pageClass %&gt;&quot;&gt;</span><br><span class="line">&lt;div class=&quot;app-layout app-layout-home&quot;&gt;</span><br><span class="line">    &lt;% include ../common/home-head.ejs %&gt;</span><br><span class="line">    &lt;div class=&quot;app-side app-side-white&quot;&gt;</span><br><span class="line">        &lt;% include ../common/home-left.ejs %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;app-body&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;app-right&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;register-nav&quot; style=&quot;height: 300px;background: red&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;layui-tab&quot; lay-filter=&quot;navTab&quot;&gt;</span><br><span class="line">                    &lt;h1&gt;这里是test&lt;/h1&gt;</span><br><span class="line">                    &lt;%- defineContent(&#x27;test&#x27;) %&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;layui-content&quot; style=&quot;height: 300px;background: green&quot;&gt;</span><br><span class="line">                &lt;h1&gt;这里是rightcontent&lt;/h1&gt;</span><br><span class="line">                &lt;%- defineContent(&#x27;rightContent&#x27;) %&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;app-footer&quot;&gt;</span><br><span class="line">        &lt;% include ../common/footer.ejs %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;%- defineContent(&#x27;footerContent&#x27;) %&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=basehost%&gt;javascripts/common/content-&lt;%= pageClass %&gt;.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>home.ejs ———– 调用页面，使用 <code>contentFor</code> 调用对应的<br><code>&lt;%- defineContent(&#39;rightContent&#39;) %&gt;&lt;%- defineContent(&#39;test&#39;) %&gt;</code></p>
</blockquote>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- contentFor(&#x27;header&#x27;) %&gt;</span><br><span class="line">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;&lt;%= basehost %&gt;stylesheets/aptRegSea.css&quot;/&gt;</span><br><span class="line">&lt;!-- 主要看下面四行调用代码 --&gt;</span><br><span class="line">&lt;%- contentFor(&#x27;rightContent&#x27;) %&gt;</span><br><span class="line">&lt;h2&gt;rightContentrightContentrightContentrightContentrightContentrightContentrightContent&lt;/h2&gt;</span><br><span class="line">&lt;%- contentFor(&#x27;test&#x27;) %&gt;</span><br><span class="line">&lt;h2&gt;testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- contentFor(&#x27;footerContent&#x27;) %&gt;</span><br></pre></td></tr></table></figure>
<h6 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h6><p><img src="https://img-blog.csdnimg.cn/2021032915341495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>到这里就结束了，写这个就是为了搞明白 <code>express-ejs-layouts</code>布局的<br><code>&lt;%- defineContent(&#39;rightContent&#39;) %&gt;&lt;%- defineContent(&#39;test&#39;) %&gt;</code> 这两个是什么关系！</p>
</blockquote>
]]></content>
      <categories>
        <category>express</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>express-ejs-layouts</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery 各版本之间的兼容性问题解决</title>
    <url>/2020/07/01/jquery-%E5%90%84%E7%89%88%E6%9C%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<blockquote>
<p>记录一下高版本jquery兼容性的解决方法</p>
</blockquote>
<p>在使用xheditor富文本控件时，由于项目中用到的是3.3.1版本的jquery，所以报了兼容性错误<br>xheditor版本较低，用到的语法是1.x的jquery<br>解决方法就是找到兼容低版本并且还可以保留高版本jquery功能的文件<br><code>http://jquery.com/download/</code> 到这个地址去找到兼容文件，打开复制到本地项目(由于不能直接下载)<br><img src="https://img-blog.csdnimg.cn/20200701202704333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>jquery</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>js封装获取本周、本季度、本月、上月的开始日期、结束日期、每周的日期数组</title>
    <url>/2019/07/24/js%E5%B0%81%E8%A3%85%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%91%A8%E3%80%81%E6%9C%AC%E5%AD%A3%E5%BA%A6%E3%80%81%E6%9C%AC%E6%9C%88%E3%80%81%E4%B8%8A%E6%9C%88%E7%9A%84%E5%BC%80%E5%A7%8B%E6%97%A5%E6%9C%9F%E3%80%81%E7%BB%93%E6%9D%9F%E6%97%A5%E6%9C%9F%E3%80%81%E6%AF%8F%E5%91%A8%E7%9A%84%E6%97%A5%E6%9C%9F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p><strong>个人总结</strong>    </p>
<pre><code>/**
* 获取本周、本季度、本月、上月的开始日期、结束日期
*/
var now = new Date(); //当前日期 
var nowDayOfWeek = now.getDay(); //今天本周的第几天 
var nowDay = now.getDate(); //当前日 
var nowMonth = now.getMonth(); //当前月 
var nowYear = now.getYear(); //当前年 
nowYear += (nowYear &lt; 2000) ? 1900 : 0; //

var lastMonthDate = new Date(); //上月日期
lastMonthDate.setDate(1);
lastMonthDate.setMonth(lastMonthDate.getMonth()-1);
var lastYear = lastMonthDate.getYear();
var lastMonth = lastMonthDate.getMonth();

//格式化日期：yyyy-MM-dd 
function formatDate(date) &#123; 
var myyear = date.getFullYear(); 
var mymonth = date.getMonth()+1; 
var myweekday = date.getDate(); 

if(mymonth &lt; 10)&#123; 
mymonth = &quot;0&quot; + mymonth; 
&#125; 
if(myweekday &lt; 10)&#123; 
myweekday = &quot;0&quot; + myweekday; 
&#125; 
return (myyear+&quot;-&quot;+mymonth + &quot;-&quot; + myweekday); 
&#125; 

//获得某月的天数 
function getMonthDays(myMonth)&#123; 
var monthStartDate = new Date(nowYear, myMonth, 1); 
var monthEndDate = new Date(nowYear, myMonth + 1, 1); 
var days = (monthEndDate - monthStartDate)/(1000 * 60 * 60 * 24); 
return days; 
&#125; 

//获得本季度的开始月份 
function getQuarterStartMonth()&#123; 
var quarterStartMonth = 0; 
if(nowMonth&lt;3)&#123; 
quarterStartMonth = 0; 
&#125; 
if(2&lt;nowMonth &amp;&amp; nowMonth&lt;6)&#123; 
quarterStartMonth = 3; 
&#125; 
if(5&lt;nowMonth &amp;&amp; nowMonth&lt;9)&#123; 
quarterStartMonth = 6; 
&#125; 
if(nowMonth&gt;8)&#123; 
quarterStartMonth = 9; 
&#125; 
return quarterStartMonth; 
&#125; 

//获得本周的开始日期 
function getWeekStartDate() &#123; 
var weekStartDate = new Date(nowYear, nowMonth, nowDay - nowDayOfWeek); 
return formatDate(weekStartDate); 
&#125; 

//获得本周的结束日期 
function getWeekEndDate() &#123; 
var weekEndDate = new Date(nowYear, nowMonth, nowDay + (6 - nowDayOfWeek)); 
return formatDate(weekEndDate); 
&#125; 

//获得本月的开始日期 
function getMonthStartDate()&#123; 
var monthStartDate = new Date(nowYear, nowMonth, 1); 
return formatDate(monthStartDate); 
&#125; 

//获得本月的结束日期 
function getMonthEndDate()&#123; 
var monthEndDate = new Date(nowYear, nowMonth, getMonthDays(nowMonth)); 
return formatDate(monthEndDate); 
&#125;

//获得上月开始时间
function getLastMonthStartDate()&#123;
var lastMonthStartDate = new Date(nowYear, lastMonth, 1);
return formatDate(lastMonthStartDate); 
&#125;

//获得上月结束时间
function getLastMonthEndDate()&#123;
var lastMonthEndDate = new Date(nowYear, lastMonth, getMonthDays(lastMonth));
return formatDate(lastMonthEndDate); 
&#125;

//获得本季度的开始日期 
function getQuarterStartDate()&#123; 

var quarterStartDate = new Date(nowYear, getQuarterStartMonth(), 1); 
return formatDate(quarterStartDate); 
&#125; 

//或的本季度的结束日期 
function getQuarterEndDate()&#123; 
var quarterEndMonth = getQuarterStartMonth() + 2; 
var quarterStartDate = new Date(nowYear, quarterEndMonth, getMonthDays(quarterEndMonth)); 
return formatDate(quarterStartDate); 
&#125;
</code></pre>
<blockquote>
<p>项目中引用案例图片；</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190724201536738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190724201552160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="或取每周的日期数组"><a href="#或取每周的日期数组" class="headerlink" title="或取每周的日期数组"></a>或取每周的日期数组</h5><pre><code>/**
 * 获取每周的日期和星期的数组
 * @param &#123;date&#125; 传一个日期 yyyy-mm-dd 格式 将会返回日期的后七天的数组
 */
getWeekDateArr: function (date) &#123;
    /* 得到当前日期的时间戳 */
    // const timestamp = Date.now();
    var stringTime = date;
    var timestamp = Date.parse(new Date(stringTime));
    // const timestamp = new Date(2019, 7, 30, 0, 0, 0, 0).getTime()
    const dateWeek = Array.from(new Array(7)).map((_, i) =&gt; &#123;
        /* 得到当前周每一天的时间戳 */
        const weekTimestamp = new Date(timestamp + i * 24 * 60 * 60 * 1000)
        const date = String(weekTimestamp.getFullYear()) + &#39;-&#39; + String(weekTimestamp.getMonth() + 1).padStart(2, &#39;0&#39;) + &#39;-&#39; + String(new Date(weekTimestamp).getDate()).padStart(2, &#39;0&#39;);
        /* 得到周几后转换 */
        let week = weekTimestamp.getDay()
        switch (week) &#123;
            case 0:
                week = &#39;周日&#39;
                break
            case 1:
                week = &#39;周一&#39;
                break
            case 2:
                week = &#39;周二&#39;
                break
            case 3:
                week = &#39;周三&#39;
                break
            case 4:
                week = &#39;周四&#39;
                break
            case 5:
                week = &#39;周五&#39;
                break
            case 6:
                week = &#39;周六&#39;
                break
        &#125;
        return &#123;
            date,
            week
        &#125;
    &#125;)
    return dateWeek;
    //console.log(dateWeek);
&#125;
        
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191213100356740.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>后期会把项目中的API封装拷贝下来</p>
</blockquote>
<blockquote>
<p>参考自：<a href="https://www.cnblogs.com/liyixiang/p/6038122.html">https://www.cnblogs.com/liyixiang/p/6038122.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js断点续传，结合php后端</title>
    <url>/2020/08/27/js%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%EF%BC%8C%E7%BB%93%E5%90%88php%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<blockquote>
<p>网上寻觅到的一个案例，目的是为了解决目前在项目中碰到的上传文件过大失败的问题。可以用断点续传来解决。记录一下，省得以后找不到了；</p>
</blockquote>
<blockquote>
<p>源码地址：<code>https://download.csdn.net/download/weixin_43996999/12760387</code></p>
</blockquote>
<blockquote>
<p>下载下来的文件需要配合php环境运行，因为后端的处理方法是php写的，这里推荐使用wampserver,详细使用请看另一篇：<br><code>https://blog.csdn.net/weixin_43996999/article/details/108201663</code></p>
</blockquote>
<h2 id="使用JS实现可断点续传的文件上传方案"><a href="#使用JS实现可断点续传的文件上传方案" class="headerlink" title="使用JS实现可断点续传的文件上传方案"></a>使用JS实现可断点续传的文件上传方案</h2><p>刚开始学习前端开发就碰到文件上传问题，还要求可断点续传。查了很多资料，发现H5的file API刚好可以满足我们的需求，也遇到了一些问题，于是记录下来为有同样需求的朋友提供一些帮助。</p>
<p>一、首先，为了引入文件对象，需要在H5页面上放置一个file类型的输入标签。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;fileInfo()&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>当选择文件之后显示文件相关信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fileInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fileObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fileObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们获取到的对象本身是一个数组，这里只选择了一个文件，需要选择多个文件可在input标签添加multiple属性。现在我们打开浏览器控制台可以看到输出了文件的最后修改时间、文件大小和文件名等信息：</p>
<p>二、好了，当我们获取到选择的文件对象之后，现在需要把文件上传到服务器，可以模拟表单事件进行上传，需要引入FormData对象，其次，由于HTTP对文件上传大小的限制，所以要对文件切块上传，在服务器收到文件块之后拼接成一个整体，最后还需要一个进度条去显示上传进度。在理清了思路以后这就动手实现：</p>
<p>先在H5页面放置一个进度条，同时将选择文件改变的事件更换为上传文件块的函数upload(开始上传字节处)，这里我们从第0个字节开始上传，也就是从头开始传：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;upload(0)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>然后来实现文件块的上传函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">// 文件切块大小为1MB</span></span><br><span class="line"> <span class="number">2</span> <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> <span class="comment">// 从start字节处开始上传</span></span><br><span class="line"> <span class="number">5</span> <span class="keyword">function</span> <span class="title function_">upload</span>(<span class="params">start</span>) &#123;</span><br><span class="line"> <span class="number">6</span>     <span class="keyword">let</span> fileObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"> <span class="number">7</span>     <span class="comment">// 上传完成</span></span><br><span class="line"> <span class="number">8</span>     <span class="keyword">if</span> (start &gt;= fileObj.<span class="property">size</span>) &#123;</span><br><span class="line"> <span class="number">9</span>         <span class="keyword">return</span>;</span><br><span class="line"><span class="number">10</span>     &#125;</span><br><span class="line"><span class="number">11</span>     <span class="comment">// 获取文件块的终止字节</span></span><br><span class="line"><span class="number">12</span>     <span class="keyword">let</span> end = (start + chunkSize &gt; fileObj.<span class="property">size</span>) ? fileObj.<span class="property">size</span> : (start + chunkSize);</span><br><span class="line"><span class="number">13</span>     <span class="comment">// 将文件切块上传</span></span><br><span class="line"><span class="number">14</span>     <span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line"><span class="number">15</span>     fd.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, fileObj.<span class="title function_">slice</span>(start, end));</span><br><span class="line"><span class="number">16</span>     <span class="comment">// POST表单数据</span></span><br><span class="line"><span class="number">17</span>     <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="number">18</span>     xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;upload.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="number">19</span>     xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="number">20</span>         <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="number">21</span>             <span class="comment">// 上传一块完成后修改进度条信息，然后上传下一块</span></span><br><span class="line"><span class="number">22</span>             <span class="keyword">let</span> progress = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progress&#x27;</span>);</span><br><span class="line"><span class="number">23</span>             progress.<span class="property">max</span> = fileObj.<span class="property">size</span>;</span><br><span class="line"><span class="number">24</span>             progress.<span class="property">value</span> = end;</span><br><span class="line"><span class="number">25</span>             <span class="title function_">upload</span>(end);</span><br><span class="line"><span class="number">26</span>         &#125;</span><br><span class="line"><span class="number">27</span>     &#125;</span><br><span class="line"><span class="number">28</span>     xhr.<span class="title function_">send</span>(fd);</span><br><span class="line"><span class="number">29</span> &#125;</span><br></pre></td></tr></table></figure>

<p>这里使用原生的JS向服务器发送请求，将文件切块使用函数slice(开始位置，结束位置)，然后将文件块封装到FormData对象实现模拟表单的文件上传。后台我使用PHP接收数据，也可以使用其他后端语言：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &lt;?php</span><br><span class="line"><span class="number">2</span>     <span class="comment">// 追加文件块</span></span><br><span class="line"><span class="number">3</span>     $fileName = $_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="number">4</span>     <span class="title function_">file_put_contents</span>(<span class="string">&#x27;files/&#x27;</span> . $fileName, <span class="title function_">file_get_contents</span>($_FILES[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]), <span class="variable constant_">FILE_APPEND</span>);</span><br><span class="line"><span class="number">5</span> ?&gt;</span><br></pre></td></tr></table></figure>

<p>在这里我新建了一个文件夹files，将上传的文件存放到这里。获取的文件块内容采用追加的形式FILE_APPEND。于是我们打开浏览器上传文件：</p>
<p>然后查看一下files文件夹下面是否接收到vscode.exe文件：</p>
<p>三、有了文件上传功能，接下来我们要实现断点续传功能。在上一步文件切块的基础上，断点续传变得非常简单，如果突然断网或者浏览器意外关闭，那么上传的是不完整的文件，我们只需要在选择了文件以后向服务器查询一下服务器上相同文件名的大小，然后将开始上传位置(字节)设置到这个大小即可：</p>
<p>先定义一个初始化函数当选择文件后向服务器查询已上传文件大小：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">// 初始化上传大小</span></span><br><span class="line"> <span class="number">2</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="number">3</span>     <span class="keyword">let</span> fileObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>).<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line"> <span class="number">4</span>     <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"> <span class="number">5</span>     xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="number">6</span>         <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line"> <span class="number">7</span>             <span class="comment">// 将字符串转化为整数</span></span><br><span class="line"> <span class="number">8</span>             <span class="keyword">let</span> start = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>);</span><br><span class="line"> <span class="number">9</span>             <span class="comment">// 设置进度条</span></span><br><span class="line"><span class="number">10</span>             <span class="keyword">let</span> progress = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progress&#x27;</span>);</span><br><span class="line"><span class="number">11</span>             progress.<span class="property">max</span> = fileObj.<span class="property">size</span>;</span><br><span class="line"><span class="number">12</span>             progress.<span class="property">value</span> = start;</span><br><span class="line"><span class="number">13</span>             <span class="comment">// 开始上传</span></span><br><span class="line"><span class="number">14</span>             <span class="title function_">upload</span>(start);</span><br><span class="line"><span class="number">15</span>         &#125;</span><br><span class="line"><span class="number">16</span>     &#125;</span><br><span class="line"><span class="number">17</span>     xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;fileSize.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="number">18</span>     <span class="comment">// 向服务器发送文件名查询大小</span></span><br><span class="line"><span class="number">19</span>     xhr.<span class="title function_">send</span>(fileObj.<span class="property">name</span>);</span><br><span class="line"><span class="number">20</span> &#125;</span><br></pre></td></tr></table></figure>

<p>在服务器端使用fileSize.php查询已上传文件大小：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> &lt;?php</span><br><span class="line"> <span class="number">2</span>     <span class="comment">// 接收文件名</span></span><br><span class="line"> <span class="number">3</span>     $fileName = $_GET[<span class="string">&#x27;fileName&#x27;</span>] ? $_GET[<span class="string">&#x27;fileName&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"> <span class="number">4</span>     $fileSize = <span class="number">0</span>;</span><br><span class="line"> <span class="number">5</span>     $path = <span class="string">&#x27;files/&#x27;</span> . $fileName;</span><br><span class="line"> <span class="number">6</span>     <span class="comment">//查询已上传文件大小</span></span><br><span class="line"> <span class="number">7</span>     <span class="keyword">if</span> (<span class="title function_">file_exists</span>($path)) &#123;</span><br><span class="line"> <span class="number">8</span>         $fileSize = <span class="title function_">filesize</span>($path);</span><br><span class="line"> <span class="number">9</span>     &#125;</span><br><span class="line"><span class="number">10</span>     echo $fileSize;</span><br><span class="line"><span class="number">11</span> ?&gt;</span><br></pre></td></tr></table></figure>

<p>最后将H5页面上input标签的onchange事件改为init()：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;init()&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>同时upload函数也不需要重复设置进度条的最大值，修改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">// 上传一块完成后修改进度条信息，然后上传下一块</span></span><br><span class="line"><span class="number">2</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progress&#x27;</span>).<span class="property">value</span> = end;</span><br><span class="line"><span class="number">3</span> <span class="title function_">upload</span>(end);</span><br></pre></td></tr></table></figure>

<p>然后打开浏览器，在上传过程中故意关闭浏览器下次再选择同一文件时即可从断点位置开始续传。</p>
<p>四、虽然已经实现了可断点续传的文件上传功能，但是界面还需要美化一下，这里引用bootstrap框架，需要jquery，顺便用jquery的ajax代替原生JS的ajax，需要注意的是$.ajax的processData和contentType属性都要设置成false：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">// POST表单数据</span></span><br><span class="line"> <span class="number">2</span> $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"> <span class="number">3</span>     <span class="attr">url</span>: <span class="string">&#x27;upload.php&#x27;</span>,</span><br><span class="line"> <span class="number">4</span>     <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line"> <span class="number">5</span>     <span class="attr">data</span>: fd,</span><br><span class="line"> <span class="number">6</span>     <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line"> <span class="number">7</span>     <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line"> <span class="number">8</span>     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="number">9</span>         <span class="title function_">upload</span>(end);</span><br><span class="line"><span class="number">10</span>     &#125;</span><br><span class="line"><span class="number">11</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>最后美化完成的效果图如下：<br><img src="https://img-blog.csdnimg.cn/20200827142521887.gif#pic_center" alt="在这里插入图片描述"><br>转自：<a href="https://www.cnblogs.com/viewts/p/10820785.html">https://www.cnblogs.com/viewts/p/10820785.html</a></p>
]]></content>
      <categories>
        <category>断点续传</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js安装及环境配置</title>
    <url>/2019/07/18/node-js%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>本文章参考自：<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">https://www.cnblogs.com/liuqiyun/p/8133904.html</a></strong></p>
<blockquote>
<p>第一步： 看看自己的电脑是基于多少位的操作系统（本机是64位）;对应的下载64位版本的node.js<br>第二步： 下载node网址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>第三步： 打开网站之后的操作；下方贴图</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190718213604971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第四步： 下载下来之后进行安装，双击安装包，之后操作，下方贴图</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190718213800352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190718213823757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190718213837580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190718213852336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190718213910829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190718213927303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第五步： 上方安装完成之后可以测试一下是否安装成功； 打开cmd输入node -v测试node是否安装成功；输入npm -v测试npm是否可以使用；下方贴图</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190718214257787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第六步： 安装完后的目录如下图所示：下方贴图<br>此处说明下：新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190718214345775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第七步： 说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。<br>例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2019071821453412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第八步： 路径转移——-创建完两个空文件夹之后，打开cmd命令窗口，输入<br>npm config set prefix “D:\Develop\nodejs\node_global”<br>npm config set cache “D:\Develop\nodejs\node_cache”</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190718214906952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第九步： 接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190718214939904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第十步： 进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】，将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/201907182150183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190718215035365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190718215053131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019071821510467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>第十一步： 测试<br>配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，<br>输入如下命令进行模块的全局安装：npm install express -g     # -g是全局安装的意思</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20190718215204938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>Nodejs安装</tag>
      </tags>
  </entry>
  <entry>
    <title>wampserver安装及使用，集成php环境</title>
    <url>/2020/08/24/wampserver%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%EF%BC%8C%E9%9B%86%E6%88%90php%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>用到这个工具的原因是，有一个小案例，需要php环境。我是前端开发，不咋会弄php环境，vscode需要指向一个php.exe文件来编译执行php文件，但是我弄了半天也没弄好，所以就用这个了！！！</p>
</blockquote>
<blockquote>
<p>Wamp就是Windos Apache Mysql PHP集成安装环境，即在window下的apache、php和mysql的服务器软件。PHP扩展、Apache模块，开启/关闭鼠标点点就搞定，再 也不用亲自去修改配置文件了，WAMP它会去做。再也不用到处询问php的安装问题了，WAMP一切都搞定了</p>
</blockquote>
<blockquote>
<p>安装包链接：<code>https://download.csdn.net/download/weixin_43996999/12760465</code></p>
</blockquote>
<p>直接一步一步安装，小编是直接安装在D盘根目录的<br><img src="https://img-blog.csdnimg.cn/2020082416304810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h5 id="注意：安装路径不允许有中文，否则就算安装成功，服务也启动不起来"><a href="#注意：安装路径不允许有中文，否则就算安装成功，服务也启动不起来" class="headerlink" title="注意：安装路径不允许有中文，否则就算安装成功，服务也启动不起来"></a>注意：安装路径不允许有中文，否则就算安装成功，服务也启动不起来</h5><blockquote>
<p>安装成功后，双击启动，或安装成功会自启动；— 由红变橙再变绿就表示启动成功了。<br><img src="https://img-blog.csdnimg.cn/20200824162135520.png#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>启动成功后，打开浏览器在地址栏属于127.0.0.1看一下是否能打开wamp界面，如下图：<br><img src="https://img-blog.csdnimg.cn/20200824162912713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>到这里，就表示我们已经安装成功并启动了，那么下面就是将我们的案例代码或者是项目代码，放进安装目录的www文件里面，在浏览器的目录里会出现你导入到www文件的代码，直接点开启动就可以了，如下图：<br><img src="https://img-blog.csdnimg.cn/20200824163505865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>点击项目就直接启动了，不需要从本地localhost启动<br><img src="https://img-blog.csdnimg.cn/20200824163637925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</blockquote>
<h3 id="简单的使用，其他的功能可能做后端的更清楚，我只是让大家如果以后碰到了这种问题之后，知道怎么去弄个环境来运行后端的代码。完结"><a href="#简单的使用，其他的功能可能做后端的更清楚，我只是让大家如果以后碰到了这种问题之后，知道怎么去弄个环境来运行后端的代码。完结" class="headerlink" title="简单的使用，其他的功能可能做后端的更清楚，我只是让大家如果以后碰到了这种问题之后，知道怎么去弄个环境来运行后端的代码。完结"></a>简单的使用，其他的功能可能做后端的更清楚，我只是让大家如果以后碰到了这种问题之后，知道怎么去弄个环境来运行后端的代码。完结</h3>]]></content>
      <categories>
        <category>wampserver</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>window系统配置nvm管理工具</title>
    <url>/2020/02/14/window%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEnvm%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>参考：<a href="https://www.cnblogs.com/jing-tian/p/11225123.html">https://www.cnblogs.com/jing-tian/p/11225123.html</a></p>
</blockquote>
<h4 id="建议为了方便以后开发过程中，兼容新旧项目的node版本，直接装上nvm环境再装node，如果电脑中本来就装了node环境也不要紧。不会冲突"><a href="#建议为了方便以后开发过程中，兼容新旧项目的node版本，直接装上nvm环境再装node，如果电脑中本来就装了node环境也不要紧。不会冲突" class="headerlink" title="建议为了方便以后开发过程中，兼容新旧项目的node版本，直接装上nvm环境再装node，如果电脑中本来就装了node环境也不要紧。不会冲突"></a>建议为了方便以后开发过程中，兼容新旧项目的node版本，直接装上nvm环境再装node，如果电脑中本来就装了node环境也不要紧。不会冲突</h4><ol>
<li>nvm-windows 最新下载地址：<code>https://github.com/coreybutler/nvm-windows/releases</code><br>可以看到这里又有四个可下载的文件。<br>nvm-noinstall.zip： 这个是绿色免安装版本，但是使用之前需要配置<br>nvm-setup.zip：这是一个安装包，下载之后点击安装，无需配置就可以使用，方便。<br>Source code(zip)：zip压缩的源码<br>Sourc code(tar.gz)：tar.gz的源码，一般用于*nix系统<br>我对这个目前只是简单使用，为了方便，所以下载了nvm-set.zip文件。<br><img src="https://img-blog.csdnimg.cn/20200214011343676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>下载好解压缩包点击进行安装<br>第一个安装目录：这里没有使用默认的安装目录，修改安装目录为 D:\system\nvm；读者可自行决定安装目录<br><img src="https://img-blog.csdnimg.cn/2020021401154595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第二个安装目录：添加 node.js 的安装目录<br>==注意：<br>这里用 “添加 node.js 的安装目录” 的说法其实不太准确，准确的说法应该是配置 node.js 的安装目录<br>默认会使用 C:\Program Files\nodejs 目录，C:\Program Files\nodejs 目录也是 node.js 默认的安装目录<br>如果读者在安装 nvm 前就已经安装了 node.js，且修改了 node.js 的安装目录，那么此处的目录要修改为 node.js 的安装目录<br>如果读者在安装 nvm 前没有安装 node.js，那么此处的目录可自行定义==<br><img src="https://img-blog.csdnimg.cn/20200214011721421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p>– 笔者这里由于已经安装了node，且安装路径为D:\system\nodejs，所以需要在此处修改<br>笔者的 node 的安装目录是 D:\system\nodejs<br>– 点击安装，在安装过程中会弹出：由于已经安装了 node，所以此时提示“你希望nvm管理已经安装的 node 版本吗”，点击 是，待安装完成后测试是否安装成功；命令：<code>nvm -v</code><br>– 如果出现nvm版本号和一系列帮助指令，则说明nvm安装成功。<br>否则，可能会提示nvm: command not found<br>3. 命令使用<br>nvm for windows是一个命令行工具，在控制台输入nvm,就可以看到它的命令用法。基本命令有：<br><code>nvm arch [32|64] ： </code>显示node是运行在32位还是64位模式。指定32或64来覆盖默认体系结构。<br><code>nvm install &lt;version&gt; [arch]：</code> 该可以是node.js版本或最新稳定版本latest。（可选[arch]）指定安装32位或64位版本（默认为系统arch）。设置[arch]为all以安装32和64位版本。在命令后面添加–insecure ，可以绕过远端下载服务器的SSL验证。<br><code>nvm list [available]： </code>列出已经安装的node.js版本。可选的available，显示可下载版本的部分列表。这个命令可以简写为nvm ls [available]。<br><code>nvm on： </code>启用node.js版本管理。<br><code>nvm off： </code>禁用node.js版本管理(不卸载任何东西)<br><code>nvm proxy [url]： </code>设置用于下载的代理。留[url]空白，以查看当前的代理。设置[url]为none删除代理。<br><code>nvm node_mirror [url]：</code>设置node镜像，默认为<a href="https://nodejs.org/dist/.%E3%80%82%E6%88%91%E5%BB%BA%E8%AE%AE%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%B7%98%E5%AE%9D%E7%9A%84%E9%95%9C%E5%83%8Fhttps://npm.taobao.org/mirrors/node/">https://nodejs.org/dist/.。我建议设置为淘宝的镜像https://npm.taobao.org/mirrors/node/</a><br><code>nvm npm_mirror [url]：</code>设置npm镜像，默认为<a href="https://github.com/npm/npm/archive/%E3%80%82%E6%88%91%E5%BB%BA%E8%AE%AE%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%B7%98%E5%AE%9D%E7%9A%84%E9%95%9C%E5%83%8Fhttps://npm.taobao.org/mirrors/npm/">https://github.com/npm/npm/archive/。我建议设置为淘宝的镜像https://npm.taobao.org/mirrors/npm/</a><br><code>nvm uninstall &lt;version&gt;： </code>卸载指定版本的nodejs。<br><code>nvm use [version] [arch]： </code>切换到使用指定的nodejs版本。可以指定32/64位[arch]。nvm use <arch>将继续使用所选版本，但根据提供的值切换到32/64位模式的<arch><br><code>nvm root [path]： </code>设置 nvm 存储node.js不同版本的目录 ,如果未设置，将使用当前目录。<br><code>nvm version： </code>显示当前运行的nvm版本，可以简写为nvm v<br>4. 常用实例<br><code>nvm list</code>　　//查看目前已经安装的版本<br><code>nvm list available</code> //显示可下载版本的部分列表<br><code>nvm install 10.15.0</code> //安装指定的版本的nodejs<br><code>nvm use 10.15.0</code> //使用指定版本的nodejs<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>  //使用淘宝镜像</p>
<h5 id="注：将npm镜像改为淘宝的镜像，可以提高下载速度。"><a href="#注：将npm镜像改为淘宝的镜像，可以提高下载速度。" class="headerlink" title="注：将npm镜像改为淘宝的镜像，可以提高下载速度。"></a>注：将npm镜像改为淘宝的镜像，可以提高下载速度。</h5><h5 id="注：nvm和nodejs安装路径不可以有中文或空格，否则切换版本会报错、乱码"><a href="#注：nvm和nodejs安装路径不可以有中文或空格，否则切换版本会报错、乱码" class="headerlink" title="注：nvm和nodejs安装路径不可以有中文或空格，否则切换版本会报错、乱码"></a>注：nvm和nodejs安装路径不可以有中文或空格，否则切换版本会报错、乱码</h5>]]></content>
      <categories>
        <category>nvm</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>nvm安装</tag>
      </tags>
  </entry>
  <entry>
    <title>‘yo‘ 不是内部或外部命令，也不是可运行的程序或批处理文件</title>
    <url>/2021/08/25/%E2%80%98yo%E2%80%98-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E6%88%96%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>碰到的问题：全局安装yeoman，使用yo命令试，报出错误，下面贴图<br><img src="https://img-blog.csdnimg.cn/356ae4d2f1054883b27d2dfac9579670.png" alt="在这里插入图片描述"><br>原因：环境变量中没有配置yarn的全局路径<br>解决：<br>    1.    检查当前yarn 的录  — <code>yarn global bin</code><br>    2.    检查当前 yarn 的全局安装位置 — <code>yarn global dir</code><br>    3.    将yarn的全局安装路径配置到环境变量当中<br>    &nbsp;<br>    以我的为例：我自定义了全局的安装路径和缓存路径，后面的路径自己定义<br>        1. 修改全局路径 — <code>yarn config set global-folder D:\system\nodejs\node_modules\yarn\global&quot;</code><br>        2. 修改缓存路径 — <code>yarn config set cache-folder &quot;D:\system\nodejs\node_modules\yarn\cache&quot;</code><br>        3. 设置好之后用yarn全局安装了yeoman(也就是yo),去自己的全局路径看到已经安装好了,在global\node_modules.bin中<br>        <img src="https://img-blog.csdnimg.cn/44cac0bf556a4ea9a3b9e4989be6a3db.png" alt="在这里插入图片描述"><br>        4. 这时候我试了一下 <code>yo -v</code>，还是不行，这个问题就是环境配置的问题了，我们自定义了路径，需要将自定义的全局路径配置到环境变量中！<br>        <img src="https://img-blog.csdnimg.cn/e675882a42244a2983092de86c97b421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5aSn546L5Zyo6Lev5LiK,size_59,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>        5. 添加好之后，关掉cmd，重新打开再使用<code>yo -v</code>，这个时候就可以使用了<br>        <img src="https://img-blog.csdnimg.cn/e6ae84039eea44f7af55ec4ab48cf630.png" alt="在这里插入图片描述"></p>
</blockquote>
]]></content>
      <categories>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>yeoman</tag>
      </tags>
  </entry>
  <entry>
    <title>前端下载文件的方法</title>
    <url>/2021/04/01/%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h6 id="一：后端给url，如果使用a链接打开这个url是预览时"><a href="#一：后端给url，如果使用a链接打开这个url是预览时" class="headerlink" title="一：后端给url，如果使用a链接打开这个url是预览时"></a>一：后端给url，如果使用a链接打开这个url是预览时</h6><pre><code>&lt;span onclick=&quot;getFileAndDownload(&#39;图片名称&#39;,&#39;图片路径&#39;)&quot;&gt;下载png测试&lt;/span&gt;
&lt;br /&gt;
&lt;span onclick=&quot;getFileAndDownload(&#39;pdf名称&#39;,&#39;pdf路径&#39;)&quot;&gt;下载pdf测试&lt;/span&gt;
&lt;br /&gt;
&lt;script src=&quot;./js/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;
function getFileAndDownload(fileName, url) &#123;
    var x = new XMLHttpRequest();
    x.open(&quot;GET&quot;, url, true);
    x.responseType = &#39;blob&#39;;
    x.onload = function (e) &#123;
        var blob = x.response;
        if (&#39;msSaveOrOpenBlob&#39; in navigator) &#123;//IE导出
            window.navigator.msSaveOrOpenBlob(blob, fileName);
        &#125;
        else &#123;
            var a = document.createElement(&#39;a&#39;);
            a.download = fileName;
            a.href = URL.createObjectURL(blob);
            $(&quot;body&quot;).append(a);
            a.click();
            $(a).remove();
        &#125;
    &#125;;
    x.send();
&#125;
</code></pre>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>后端返回url实现预览和下载文件（目前只支持图片和pdf文档）</title>
    <url>/2020/02/27/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9Eurl%E5%AE%9E%E7%8E%B0%E9%A2%84%E8%A7%88%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%88%E7%9B%AE%E5%89%8D%E5%8F%AA%E6%94%AF%E6%8C%81%E5%9B%BE%E7%89%87%E5%92%8Cpdf%E6%96%87%E6%A1%A3%EF%BC%89/</url>
    <content><![CDATA[<h5 id="最近新接触的一个node-express的项目，要做一个在线预览和下载的功能。费了好大的劲，总算是写的差不多了，下面总结一下："><a href="#最近新接触的一个node-express的项目，要做一个在线预览和下载的功能。费了好大的劲，总算是写的差不多了，下面总结一下：" class="headerlink" title="最近新接触的一个node+express的项目，要做一个在线预览和下载的功能。费了好大的劲，总算是写的差不多了，下面总结一下："></a>最近新接触的一个node+express的项目，要做一个在线预览和下载的功能。费了好大的劲，总算是写的差不多了，下面总结一下：</h5><h6 id="一：首先是通过url预览-以后可能还会让预览word、xlsx文件，这种方法就不能用了，还得另寻他法"><a href="#一：首先是通过url预览-以后可能还会让预览word、xlsx文件，这种方法就不能用了，还得另寻他法" class="headerlink" title="一：首先是通过url预览(以后可能还会让预览word、xlsx文件，这种方法就不能用了，还得另寻他法)"></a>一：首先是通过url预览(以后可能还会让预览word、xlsx文件，这种方法就不能用了，还得另寻他法)</h6><ol>
<li><p>这次并没有调取接口，是在列表的操作列有一个预览按钮。然后后端将文件的url、type、id都在列表的每条数据里返给了我们</p>
</li>
<li><p>点击预览的时候需要弹框展示，这里用到的是layui的模态框</p>
</li>
<li><p>我们拿到文件url，在弹框完成时，将url赋值给弹框里的元素。(我们项目中是要预览N个文件的，所以弹框里用的轮播组件)</p>
</li>
<li><p>赋值时判断文件类型，如果是图片：赋值给img的src；如果是pdf：赋值给object的data</p>
</li>
<li><p>只要把url赋上值，只要url能用，不出意外就可以预览了(涉及到样式什么的可以自己调试)</p>
<h6 id="二：其次是使用预览的url实现下载功能。-亲测图片和pdf可行"><a href="#二：其次是使用预览的url实现下载功能。-亲测图片和pdf可行" class="headerlink" title="二：其次是使用预览的url实现下载功能。(亲测图片和pdf可行)"></a>二：其次是使用预览的url实现下载功能。(亲测图片和pdf可行)</h6></li>
<li><p>因为这个url是预览用的，所以使用普通的a链接、iframe等都不行。</p>
</li>
<li><p>拿到路径后可以先在前端转一下，转成文件流，然后再使用a链接下载</p>
<h6 id="三：贴图"><a href="#三：贴图" class="headerlink" title="三：贴图"></a>三：贴图</h6><p><img src="https://img-blog.csdnimg.cn/20200227105718446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h6 id="四：贴代码（这是我自己项目里的代码，大家看上面的思路就可）"><a href="#四：贴代码（这是我自己项目里的代码，大家看上面的思路就可）" class="headerlink" title="四：贴代码（这是我自己项目里的代码，大家看上面的思路就可）"></a>四：贴代码（这是我自己项目里的代码，大家看上面的思路就可）</h6> <!-- 预览弹框 -->
 <div id="previewBox" style="display: none;">
     <div class="layui-carousel" id="test1">
         <div class="previewCarousel" carousel-item style="overflow: scroll;">
             <!-- 预览的内容 -->
         </div>
     </div>
 </div>

<p> // 文件预览</p>
<pre><code> function filePreview(data) &#123;  // data是列表数据
     // 点击预览按钮
     $(&#39;.previewApt&#39;).on(&#39;click&#39;,function()&#123;
         var qInfoIDFlag = $(this).data(&#39;flie&#39;);
         var attachmentArr = [];
         data.forEach(function(item)&#123;
             if(item.QInfoID == qInfoIDFlag)&#123;
                 attachmentArr = item.Attachment;
                 return;
             &#125;
         &#125;)
         $(&#39;#test1 .previewCarousel&#39;).empty(); // 销毁预览容器里的所有元素
         var addOpenedit = layer.open(&#123;
             type: 1,
             title: &quot;预览&quot;,
             closeBtn: 1,
             skin: &quot;pop-set&quot;,
             area: [&quot;1000px&quot;,&quot;700px&quot;],
             maxHeight:&quot;800px&quot;,
             moveType: 1,
             resize: false,
             isOutAnim: true,
             scrollbar: true,
             anim: 1,
             content: $(&#39;#previewBox&#39;).html(),
             success: function (layero, index) &#123;
                 var children = &#39;&#39;,content = &#39;&#39;;
                 attachmentArr.forEach(function(item)&#123;
                     if(item.FileSuffix == &#39;pdf&#39;)&#123;
                         content = &#39;&lt;div&gt;&lt;div style=&quot;width: 100%;height: 30px;line-height: 30px;text-align: center;font-size: 18px;font-weight: 700;&quot;&gt;&#39;+item.FileName+&#39;.&#39;+item.FileSuffix+&#39;&lt;a data-flieurl=&quot;&#39;+item.WaterUrl+&#39;&quot; data-fliename=&quot;&#39;+item.FileName+&#39;.&#39;+item.FileSuffix+&#39;&quot; class=&quot;downloadFlie&quot; style=&quot;color: blue;font-size: 12px;font-weight: 500;margin-left: 50px;cursor: pointer;&quot;&gt;点击下载...&lt;/a&gt;&lt;/div&gt;&lt;object type=&quot;text/x-scriptlet&quot; data=&quot;&#39;+item.WaterUrl+&#39;&quot; width=100% height=570 id=&quot;content_info&quot;&gt;&lt;/object&gt;&lt;/div&gt;&#39;
                     &#125;else&#123;
                         content = &#39;&lt;div&gt;&lt;div style=&quot;width: 100%;height: 30px;line-height: 30px;text-align: center;font-size: 18px;font-weight: 700;&quot;&gt;&#39;+item.FileName+&#39;.&#39;+item.FileSuffix+&#39;&lt;a data-flieurl=&quot;&#39;+item.WaterUrl+&#39;&quot; data-fliename=&quot;&#39;+item.FileName+&#39;.&#39;+item.FileSuffix+&#39;&quot; class=&quot;downloadFlie&quot; style=&quot;color: blue;font-size: 12px;font-weight: 500;margin-left: 50px;cursor: pointer;&quot;&gt;点击下载...&lt;/a&gt;&lt;/div&gt;&lt;img style=&quot;width: 100%;&quot; src=&quot;&#39;+item.WaterUrl+&#39;&quot;  alt=&quot;附件预览&quot; /&gt;&lt;/div&gt;&#39;
                     &#125;
                     children += &#39;&lt;div&gt;&#39;+content+&#39;&lt;/div&gt;&#39;;
                 &#125;)
                 $(&#39;#test1 .previewCarousel&#39;).append(children);
                 //建造实例
                 carousel.render(&#123;
                     elem: $(layero).find(&#39;#test1&#39;)
                     ,width: &#39;100%&#39; //设置容器宽度
                     ,arrow: &#39;always&#39; //始终显示箭头
                     ,height:&#39;620px&#39;
                     ,autoplay:false
                     ,anim: &#39;fade&#39; //切换动画方式
                 &#125;);
                 $(layero).find(&#39;.downloadFlie&#39;).on(&#39;click&#39;,function()&#123;
                     var flieurl = $(this).data(&#39;flieurl&#39;);
                     var fliename = $(this).data(&#39;fliename&#39;);
                     getFileAndDownload(fliename,flieurl);
                 &#125;)
                 // console.log(layero, index);
                 $(layero).find(&#39;.returnBtn&#39;).on(&#39;click&#39;, function () &#123;
                     layer.close(index);
                 &#125;)
                  $(layero).find(&#39;.register-sub a&#39;).attr(&#39;href&#39;,&#39;javascript:void(0)&#39;).on(&#39;click&#39;, function () &#123;
                     layer.close(index);
                 &#125;)

                 // 下载方法
                 function getFileAndDownload(fileName, url) &#123;
                     var x = new XMLHttpRequest();
                     x.open(&quot;GET&quot;, url, true);
                     x.responseType = &#39;blob&#39;;
                     x.onload = function (e) &#123;
                         var blob = x.response;
                         if (&#39;msSaveOrOpenBlob&#39; in navigator) &#123;//IE导出
                             window.navigator.msSaveOrOpenBlob(blob, fileName);
                         &#125;
                         else &#123;
                             var a = document.createElement(&#39;a&#39;);
                             a.download = fileName;
                             a.href = URL.createObjectURL(blob);
                             $(&quot;body&quot;).append(a);
                             a.click();
                             $(a).remove();
                         &#125;
                     &#125;;
                     x.send();
                 &#125;
             &#125;
         &#125;);

     &#125;)
 &#125;
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>前端预览下载</tag>
      </tags>
  </entry>
  <entry>
    <title>实现pdf、jpg、png等预览</title>
    <url>/2019/07/21/%E5%AE%9E%E7%8E%B0pdf%E3%80%81jpg%E3%80%81png%E7%AD%89%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<p><strong>个人总结</strong></p>
<blockquote>
<p>这里使用object元素来实现pdf、图片等预览显示效果。</p>
</blockquote>
<blockquote>
<p>预览弹框html页</p>
</blockquote>
<pre><code>&lt;div style=&quot;min-height:300px;&quot;&gt;
    &lt;div class=&quot;text-left&quot; ng-hide=&quot;isHideToolBar&quot; style=&quot;width:5%;float:left;&quot;&gt;&lt;span ng-click=&quot;overturnModal()&quot; class=&quot;glyphicon glyphicon-repeat&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;div class=&quot;text-left&quot; ng-hide=&quot;isHideToolBar&quot; style=&quot;width:5%;float:left;&quot;&gt;&lt;span ng-click=&quot;magnifyModal()&quot; class=&quot;glyphicon glyphicon-zoom-in&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;div class=&quot;text-left&quot; ng-hide=&quot;isHideToolBar&quot; style=&quot;width:5%;float:left;&quot;&gt;&lt;span ng-click=&quot;shrinkModal()&quot; class=&quot;glyphicon glyphicon-zoom-out&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;div class=&quot;text-right&quot; style=&quot;width:25%;float:right;&quot;&gt;&lt;span ng-click=&quot;closePdfModal()&quot; class=&quot;glyphicon glyphicon-remove-circle&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;div id=&quot;previewModal&quot; style=&quot;max-height:600px;width:100%;&quot;&gt;&lt;div ng-hide=&quot;content&quot; style=&quot;text-align:center;font-size:25px;&quot;&gt;正在努力请求文档内容，请稍后...&lt;/div&gt;
    &lt;div ng-show=&quot;content&amp;&amp;isHideToolBar&quot; style=&quot;height: 47px;background-color: #525659; position: fixed;width: 110px; margin-left: 764px;top:51px;z-index:1&quot;&gt;&lt;/div&gt;
    &lt;object id=&quot;overturn&quot; standby=&quot;正在努力加载文档内容，请稍后...&quot; ng-show=&quot;content&quot; data=&quot;&#123;&#123;content&#125;&#125;&quot; type=&quot;&#39; + mediaTypes + &#39;&quot; style=&quot;width: 100%;&#39; + heightStyle + &#39;&quot;&gt;&lt;/object&gt;&lt;/div&gt;
&lt;/div&gt;

补充：当前object元素的属性解释
     standby：请求还在加载的时候显示的文字（text）
     ng-show：这里不做讲解
     data：定义引用对象数据的 URL。如果有需要对象处理的数据文件,要用 data 属性来指定这些数据文件。（url）
     type：定义被规定在 data 属性中指定的文件中出现的数据的 MIME 类型。（MIME_type）当前元素的类型是&quot;application/pdf&quot;
</code></pre>
<blockquote>
<p>封装的服务</p>
</blockquote>
<pre><code>(function () &#123;
    var app = angular.module(&quot;app&quot;);
    app.factory(&quot;commonService&quot;, [&#39;$http&#39;, &#39;$sce&#39;, &#39;serverDomain&#39;, &#39;httpService&#39;, &quot;$uibModal&quot;, function ($http, $sce, serverDomain, httpService, $uibModal) &#123;
        var service = &#123;&#125;;

        //预览打印pdf--模态框形式
        //url :生成文件流的接口
        //paramData：接口需要的参数
        //isHideToolBar：是否隐藏工具栏（禁用下载，打印等功能）
        //type:文件后缀名，可以带点，也可以不带点
        service.printPdfOnModal = function (url, paramData, isHideToolBar, type) &#123;
            if (!url) &#123;
                return;
            &#125;
            if (!paramData) &#123; paramData = &#123;&#125;; &#125;

            var mediaTypes = &quot;application/pdf&quot;;
            var heightStyle = &quot;height:1000px;&quot;;

            var extensions = [&quot;png&quot;, &quot;.png&quot;, &quot;jpg&quot;, &quot;.jpg&quot;, &quot;jpeg&quot;, &quot;.jpeg&quot;];
            if (extensions.indexOf(type) !== -1) &#123;
                mediaTypes = &quot;image/png&quot;;
                heightStyle = &quot;&quot;;
                isHideToolBar = false;   // 如果是图片，那么导航条不需要显示
            &#125;


            var uibModalOption = &#123;
                template: &#39;&lt;div style=&quot;min-height:300px;&quot;&gt;&lt;div class=&quot;text-left&quot; ng-hide=&quot;isHideToolBar&quot; style=&quot;width:5%;float:left;&quot;&gt;&lt;span ng-click=&quot;overturnModal()&quot; class=&quot;glyphicon glyphicon-repeat&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;text-left&quot; ng-hide=&quot;isHideToolBar&quot; style=&quot;width:5%;float:left;&quot;&gt;&lt;span ng-click=&quot;magnifyModal()&quot; class=&quot;glyphicon glyphicon-zoom-in&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;text-left&quot; ng-hide=&quot;isHideToolBar&quot; style=&quot;width:5%;float:left;&quot;&gt;&lt;span ng-click=&quot;shrinkModal()&quot; class=&quot;glyphicon glyphicon-zoom-out&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;text-right&quot; style=&quot;width:25%;float:right;&quot;&gt;&lt;span ng-click=&quot;closePdfModal()&quot; class=&quot;glyphicon glyphicon-remove-circle&quot; style=&quot;font-size: 30px;margin: 10px;&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div id=&quot;previewModal&quot; style=&quot;max-height:600px;width:100%;&quot;&gt;&lt;div ng-hide=&quot;content&quot; style=&quot;text-align:center;font-size:25px;&quot;&gt;正在努力请求文档内容，请稍后...&lt;/div&gt;&lt;div ng-show=&quot;content&amp;&amp;isHideToolBar&quot; style=&quot;height: 47px;background-color: #525659; position: fixed;width: 110px; margin-left: 764px;top:51px;z-index:1&quot;&gt;&lt;/div&gt;&lt;object id=&quot;overturn&quot; standby=&quot;正在努力加载文档内容，请稍后...&quot; ng-show=&quot;content&quot; data=&quot;&#123;&#123;content&#125;&#125;&quot; type=&quot;&#39; + mediaTypes + &#39;&quot; style=&quot;width: 100%;&#39; + heightStyle + &#39;&quot;&gt;&lt;/object&gt;&lt;/div&gt;&lt;/div&gt;&#39;,
                size: &quot;lg&quot;,
                backdrop: &quot;static&quot;,
                controller: &quot;app.common.openPdfInBrowser&quot;,
                resolve: &#123;
                    url: function () &#123; return url &#125;,
                    paramData: function () &#123; return paramData &#125;,
                    isHideToolBar: function () &#123; return isHideToolBar &#125;,
                    type: function () &#123; return mediaTypes &#125;
                &#125;
            &#125;
            var uibModalInstance = $uibModal.open(uibModalOption);
        &#125;

        //预览打印pdf--在新的网页
        service.printPdfOnBlank = function (url, paramData) &#123;
            if (!url) &#123;
                return;
            &#125;
            if (!paramData) &#123; paramData = &#123;&#125;; &#125;

            abp.ui.setBusy(&quot;#mianBody&quot;);

            $http.get(url,
                &#123;
                    responseType: &#39;arraybuffer&#39;,
                    params: paramData,
                &#125;)
                .then(function (msg) &#123;
                    abp.ui.clearBusy(&quot;#mianBody&quot;);
                    var file = new Blob([msg.data], &#123; type: &#39;application/pdf&#39; &#125;);
                    var fileURL = URL.createObjectURL(file);
                    var data = &#39;&lt;div&gt;&lt;object data=&quot;&#39; + fileURL + &#39;&quot; standby=&quot;正在努力加载内容，请稍后...&quot; type=&quot;application/pdf&quot; style=&quot;width: 100%; height: 1000px;&quot;&gt;&lt;/object&gt;&lt;/div&gt;&#39;;
                    var myWin = window.open(&quot;&quot;, &quot;订单详情打印&quot;);
                    myWin.document.write(data);
                    myWin.focus();
                &#125;);
        &#125;

        // 公共封装，pdf，jpg，png预览，其他文件下载
        // 参数file是传入的单个文件
        service.previewAndDownload = function (file) &#123;
            if (file.type == &quot;.pdf&quot; || file.type == &quot;.jpg&quot; || file.type == &quot;.png&quot;) &#123;
                var url = serverDomain + &quot;api/services/app/UploadFile/GetFileToStream&quot;;  // 预览
                var data = &#123;
                    FileType: file.type,
                    AttacthmentStr: file.fileId
                &#125;;
                service.printPdfOnModal(url, data, true, file.type);
            &#125; else &#123;
                var url = serverDomain + &quot;api/services/app/UploadFile/GetDownFile&quot;;   // 下载
                var param = &#123; fileId: file.fileId &#125;;
                httpService.DownloadFile(url, param);
            &#125;
        &#125;

        return service;

    &#125;]);
&#125;)();
</code></pre>
<blockquote>
<p>对应的controller</p>
</blockquote>
<pre><code>(function () &#123;
    var ctrlId = &quot;app.common.openPdfInBrowser&quot;
    app.controller(ctrlId, [
        &#39;$scope&#39;, &#39;$uibModalInstance&#39;, &#39;$http&#39;, &#39;$sce&#39;, &#39;serverDomain&#39;, &#39;httpService&#39;,
        function ($scope, $uibModalInstance, $http, $sce, serverDomain, httpService) &#123;
            var url = $scope.$resolve.url;
            var data = $scope.$resolve.paramData;
            var type = $scope.$resolve.type;
            $scope.isHideToolBar = $scope.$resolve.isHideToolBar;//是否隐藏工具栏，true为隐藏，默认false，显示工具栏

            $http.get(url,
                &#123;
                    responseType: &#39;arraybuffer&#39;,
                    params: data,
                &#125;)
                .then(function (msg) &#123;
                    var file = new Blob([msg.data], &#123; type: type &#125;);
                    var fileURL = URL.createObjectURL(file);
                    $scope.content = $sce.trustAsResourceUrl(fileURL);
                &#125;);

            var cont = 0;

            var size = 100;

            // 翻转
            $scope.overturnModal = function () &#123;   // 翻转功能
                cont += 90;
                $(&quot;#overturn&quot;).css(&quot;transform&quot;, &quot;rotate(&quot; + cont + &quot;deg)&quot;);
            &#125;
            // 放大
            $scope.magnifyModal = function () &#123;
                var overturnHeight = $(&quot;#overturn&quot;).height();  // 获取需要放大的容器高度
                size += 10;
                overturnHeight += 50;
                $(&quot;#previewModal&quot;).css(&quot;overflow&quot;, &quot;auto&quot;);   // 点击放大的时候说明是图片，给图片容器的父元素加上滚动条样式
                $(&#39;#overturn&#39;).css(&quot;width&quot;, &quot; &quot; + size + &quot;%&quot;);
                $(&#39;#overturn&#39;).css(&quot;height&quot;, &quot; &quot; + overturnHeight + &quot;px&quot;);
            &#125;
            // 放小
            $scope.shrinkModal = function () &#123;
                var overturnHeight = $(&quot;#overturn&quot;).height();  // 获取需要放大的容器高度
                size -= 10;
                overturnHeight -= 50;
                $(&quot;#previewModal&quot;).css(&quot;overflow&quot;, &quot;auto&quot;);
                $(&#39;#overturn&#39;).css(&quot;width&quot;, &quot; &quot; + size + &quot;%&quot;);
                $(&#39;#overturn&#39;).css(&quot;height&quot;, &quot; &quot; + overturnHeight + &quot;px&quot;);
            &#125;

            //关闭pdf预览
            $scope.closePdfModal = function () &#123;
                $uibModalInstance.dismiss(&quot;cancel&quot;);
            &#125;
        &#125;
    ]);

&#125;)();
</code></pre>
<blockquote>
<p>调用方式</p>
</blockquote>
<pre><code>//打印-模态框形式
        $scope.previewClick = function (item, idx) &#123;
            //console.log(&#39;eeeeeeeeeeeeeeeee-----&#39;, item);
            if (item.type == &quot;.pdf&quot; || item.type == &quot;.jpg&quot; || item.type == &quot;.png&quot;) &#123;
                var url = serverDomain + &quot;api/services/app/UploadFile/GetFileToStream&quot;;  // 预览
                var data = &#123;
                    FileType: item.type,
                    AttacthmentStr: item.fileId
                &#125;;
                commonService.printPdfOnModal(url, data, true, item.type);
            &#125; else &#123;
                var url = serverDomain + &quot;api/services/app/UploadFile/GetDownFile&quot;;   // 下载
                var data = &#123; fileId: item.fileId &#125;;
                httpService.DownloadFile(url, data);
            &#125;
        &#125;
</code></pre>
<blockquote>
<p>object属性的详细讲解相关网址：<a href="https://blog.csdn.net/tanguang_honesty/article/details/8530731">https://blog.csdn.net/tanguang_honesty/article/details/8530731</a><br><a href="https://segmentfault.com/q/1010000016964789/">https://segmentfault.com/q/1010000016964789/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>文件预览</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的正则表达式</title>
    <url>/2019/11/01/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ol>
<li>移动手机号①：<code>/^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/</code>匹配比较全的号码段(目前没出什么问题)；</li>
<li>移动手机号②：<code>/^1[3456789]\d&#123;9&#125;$/</code>;可能号码段不是很全:<code>!(/^1[3456789]\d&#123;9&#125;$/.test(phone))</code></li>
<li>邮箱①：<code>/^[a-zA-Z0-9]+([._\\-]*[a-zA-Z0-9])*@([a-zA-Z0-9]+[-a-zA-Z0-9]*[a-zA-Z0-9]+.)&#123;1,63&#125;[a-zA-Z0-9]+$/</code></li>
<li>邮箱②：<code>/^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]&#123;2,3&#125;$/</code></li>
<li>座机(区号-分机号)：<code>/0\d&#123;2,3&#125;-\d&#123;7,8&#125;$/</code>：<br>var data = obj.dicItemText + “-“ + obj.dicItemValue;<pre><code>                 if (!isMob.test(data)) &#123;
                     abp.message.error(&quot;固定电话格式错误&quot;);
                 &#125;
</code></pre>
</li>
<li>QQ号：<code>/^[1-9]\d&#123;4,10&#125;$/</code>———–<code>!isQQ.test(item)</code></li>
<li>不能输入空格：<code>onkeyup=&quot;javascript: this.value = this.value.replace(/^ +| +$/g, &#39;&#39;)&quot;</code>;</li>
<li>不能输入回车：<code>onkeyup=&quot;javascript: this.value = this.value.replace(/[\r\n]/g,&#39;&#39;)&quot;</code>;</li>
<li>回车、换行都不能输入：<code> onkeyup=&quot;javascript: this.value = (this.value = this.value.replace(/^ +| +$/g, &#39;&#39;).replace(/[\r\n]/g,&#39;&#39;))&quot;</code></li>
<li>只能输入整数或小数(不兼容火狐，火狐浏览器不能输入小数点)：<br><code>oninput=&quot;javascript:this.value=this.value.replace(/[^\.\d]/g,&#39;&#39;)&quot;</code></li>
<li>只能输入整数或小数(兼容火狐，解决了兼容问题)：<br><code>onkeypress=&quot;return (/[\d.]/.test(String.fromCharCode(event.which||event.KeyCode)))&quot;</code></li>
<li>只能输入数字：<code>onkeyup=&quot;value=value.replace(/[^\d.]/g,&#39;&#39;)&quot;</code></li>
<li>只能输入整数和两位小数的正则：<code>/^\d+(\.\d&#123;0,2&#125;)?$/</code></li>
<li>保留四位小数：<code>/^\d&#123;1,4&#125;(\.\d&#123;1,4&#125;)?$/</code></li>
</ol>
<p><code>https://www.jb51.net/article/147033.htm</code>  比较有用的一个正则文章</p>
<h2 id="没有实验过的正则，网上搜集的各种"><a href="#没有实验过的正则，网上搜集的各种" class="headerlink" title="没有实验过的正则，网上搜集的各种"></a>没有实验过的正则，网上搜集的各种</h2><pre><code>固定电话+手机号码正则表达式
区号+座机号码+分机号码：regexp=&quot;^(0[0-9]&#123;2,3&#125;/-)?([2-9][0-9]&#123;6,7&#125;)+(/-[0-9]&#123;1,4&#125;)?$&quot;

手机(中国移动手机号码)：regexp=&quot;^((/(/d&#123;3&#125;/))|(/d&#123;3&#125;/-))?13[456789]/d&#123;8&#125;|15[89]/d&#123;8&#125;&quot;

所有手机号码：regexp=&quot;^((/(/d&#123;3&#125;/))|(/d&#123;3&#125;/-))?13[0-9]/d&#123;8&#125;|15[89]/d&#123;8&#125;&quot;(新添加了158,159两个号段)

((/d&#123;11&#125;)|^((/d&#123;7,8&#125;)|(/d&#123;4&#125;|/d&#123;3&#125;)-(/d&#123;7,8&#125;)|(/d&#123;4&#125;|/d&#123;3&#125;)-(/d&#123;7,8&#125;)-(/d&#123;4&#125;|/d&#123;3&#125;|/d&#123;2&#125;|/d&#123;1&#125;)|(/d&#123;7,8&#125;)-(/d&#123;4&#125;|/d&#123;3&#125;|/d&#123;2&#125;|/d&#123;1&#125;))$)

匹配格式：
11位手机号码
3-4位区号，7-8位直播号码，1－4位分机号
如：12345678901、1234-12345678-1234
 
1.用正则表达式限制只能输入全角字符： onkeyup=&quot;value=value.replace(/[^/uFF00-/uFFFF]/g,&#39;&#39;)&quot; onbeforepaste=&quot;clipboardData.setData(&#39;text&#39;,clipboardData.getData(&#39;text&#39;).replace(/[^/uFF00-/uFFFF]/g,&#39;&#39;))&quot; 

2.用正则表达式限制只能输入数字：onkeyup=&quot;value=value.replace(/[^/d]/g,&#39;&#39;) &quot;onbeforepaste=&quot;clipboardData.setData(&#39;text&#39;,clipboardData.getData(&#39;text&#39;).replace(/[^/d]/g,&#39;&#39;))&quot; 

3.用正则表达式限制只能输入数字和英文：onkeyup=&quot;value=value.replace(/[/W]/g,&#39;&#39;) &quot;onbeforepaste=&quot;clipboardData.setData(&#39;text&#39;,clipboardData.getData(&#39;text&#39;).replace(/[^/d]/g,&#39;&#39;))&quot; 

4.计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 

String.prototype.len=function()&#123;return this.replace([^/x00-/xff]/g,&quot;aa&quot;).length;&#125; 

5.javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下： 

String.prototype.trim = function() 
&#123; 
return this.replace(/(^/s*)|(/s*$)/g, &quot;&quot;); 
&#125; 

利用正则表达式分解和转换IP地址： 

6.下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序： 

function IP2V(ip) 
&#123; 
re=/(/d+)/.(/d+)/.(/d+)/.(/d+)/g //匹配IP地址的正则表达式 
if(re.test(ip)) 
&#123; 
return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1 
&#125; 
else 
&#123; 
throw new Error(&quot;不是一个正确的IP地址!&quot;) 
&#125; 
&#125; 

不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下： 

var ip=&quot;10.100.20.168&quot; 
ip=ip.split(&quot;.&quot;) 
alert(&quot;IP值是：&quot;+(ip[0]*255*255*255+ip[1]*255*255+ip[2]*255+ip[3]*1)) 
正则表达式用于字符串处理、表单验证等场合，实用高效。现将一些常用的表达式收集于此，以备不时之需。 


匹配中文字符的正则表达式： [/u4e00-/u9fa5] 
评注：匹配中文还真是个头疼的事，有了这个表达式就好办了 

匹配双字节字符(包括汉字在内)：[^/x00-/xff] 
评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1） 

匹配空白行的正则表达式：/n/s*/r 
评注：可以用来删除空白行 

匹配HTML标记的正则表达式：&lt;(/S*?)[^&gt;]*&gt;.*?&lt;//1&gt;|&lt;.*? /&gt; 
评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力 

匹配首尾空白字符的正则表达式：^/s*|/s*$ 
评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式 

匹配Email地址的正则表达式：/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)* 
评注：表单验证时很实用 

匹配网址URL的正则表达式：[a-zA-z]+://[^/s]* 
评注：网上流传的版本功能很有限，上面这个基本可以满足需求 

匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ 
评注：表单验证时很实用 

匹配国内电话号码：/d&#123;3&#125;-/d&#123;8&#125;|/d&#123;4&#125;-/d&#123;7&#125; 
评注：匹配形式如 0511-4405222 或 021-87888822 

匹配腾讯QQ号：[1-9][0-9]&#123;4,&#125; 
评注：腾讯QQ号从10000开始 

匹配中国邮政编码：[1-9]/d&#123;5&#125;(?!/d) 
评注：中国邮政编码为6位数字 

匹配身份证：/d&#123;15&#125;|/d&#123;18&#125; 
评注：中国的身份证为15位或18位 

匹配ip地址：/d+/./d+/./d+/./d+ 
评注：提取ip地址时有用 

匹配特定数字： 
^[1-9]/d*$ //匹配正整数 
^-[1-9]/d*$ //匹配负整数 
^-?[1-9]/d*$ //匹配整数 
^[1-9]/d*|0$ //匹配非负整数（正整数 + 0） 
^-[1-9]/d*|0$ //匹配非正整数（负整数 + 0） 
^[1-9]/d*/./d*|0/./d*[1-9]/d*$ //匹配正浮点数 
^-([1-9]/d*/./d*|0/./d*[1-9]/d*)$ //匹配负浮点数 
^-?([1-9]/d*/./d*|0/./d*[1-9]/d*|0?/.0+|0)$ //匹配浮点数 
^[1-9]/d*/./d*|0/./d*[1-9]/d*|0?/.0+|0$ //匹配非负浮点数（正浮点数 + 0） 
^(-([1-9]/d*/./d*|0/./d*[1-9]/d*))|0?/.0+|0$ //匹配非正浮点数（负浮点数 + 0） 
评注：处理大量数据时有用，具体应用时注意修正 

匹配特定字符串： 
^[A-Za-z]+$ //匹配由26个英文字母组成的字符串 
^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串 
^[a-z]+$ //匹配由26个英文字母的小写组成的字符串 
^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串 
^/w+$ //匹配由数字、26个英文字母或者下划线组成的字符串 
评注：最基本也是最常用的一些表达式 

匹配中文字符的正则表达式： [/u4e00-/u9fa5] 

匹配双字节字符(包括汉字在内)：[^/x00-/xff] 

匹配空行的正则表达式：/n[/s| ]*/r 

匹配HTML标记的正则表达式：/&lt;(.*)&gt;.*&lt;///1&gt;|&lt;(.*) //&gt;/ 

匹配首尾空格的正则表达式：(^/s*)|(/s*$) 

匹配Email地址的正则表达式：/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)* 

匹配网址URL的正则表达式：http://([/w-]+/.)+[/w-]+(/[/w- ./?%&amp;=]*)? 


^/d+$ //匹配非负整数（正整数 + 0） 
^[0-9]*[1-9][0-9]*$ //匹配正整数 
^((-/d+)|(0+))$ //匹配非正整数（负整数 + 0） 
^-[0-9]*[1-9][0-9]*$ //匹配负整数 
^-?/d+$ //匹配整数 
^/d+(/./d+)?$ //匹配非负浮点数（正浮点数 + 0） 
^(([0-9]+/.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*/.[0-9]+)|([0-9]*[1-9][0-9]*))$ //匹配正浮点数 
^((-/d+(/./d+)?)|(0+(/.0+)?))$ //匹配非正浮点数（负浮点数 + 0） 
^(-(([0-9]+/.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*/.[0-9]+)|([0-9]*[1-9][0-9]*)))$ //匹配负浮点数 
^(-?/d+)(/./d+)?$ //匹配浮点数 
^[A-Za-z]+$ //匹配由26个英文字母组成的字符串 
^[A-Z]+$ //匹配由26个英文字母的大写组成的字符串 
^[a-z]+$ //匹配由26个英文字母的小写组成的字符串 
^[A-Za-z0-9]+$ //匹配由数字和26个英文字母组成的字符串 
^/w+$ //匹配由数字、26个英文字母或者下划线组成的字符串 
^[/w-]+(/.[/w-]+)*@[/w-]+(/.[/w-]+)+$ 



&quot;^/d+$&quot;　　//非负整数（正整数 + 0） 
&quot;^[0-9]*[1-9][0-9]*$&quot;　　//正整数 
&quot;^((-/d+)|(0+))$&quot;　　//非正整数（负整数 + 0） 
&quot;^-[0-9]*[1-9][0-9]*$&quot;　　//负整数 
&quot;^-?/d+$&quot;　　　　//整数 
&quot;^/d+(/./d+)?$&quot;　　//非负浮点数（正浮点数 + 0） 
&quot;^(([0-9]+/.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*/.[0-9]+)|([0-9]*[1-9][0-9]*))$&quot;　　//正浮点数 
&quot;^((-/d+(/./d+)?)|(0+(/.0+)?))$&quot;　　//非正浮点数（负浮点数 + 0） 
&quot;^(-(([0-9]+/.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*/.[0-9]+)|([0-9]*[1-9][0-9]*)))$&quot;　　//负浮点
数 
&quot;^(-?/d+)(/./d+)?$&quot;　　//浮点数 
&quot;^[A-Za-z]+$&quot;　　//由26个英文字母组成的字符串 
&quot;^[A-Z]+$&quot;　　//由26个英文字母的大写组成的字符串 
&quot;^[a-z]+$&quot;　　//由26个英文字母的小写组成的字符串 
&quot;^[A-Za-z0-9]+$&quot;　　//由数字和26个英文字母组成的字符串 
&quot;^/w+$&quot;　　//由数字、26个英文字母或者下划线组成的字符串 
&quot;^[/w-]+(/.[/w-]+)*@[/w-]+(/.[/w-]+)+$&quot;　　　　//email地址 
&quot;^[a-zA-z]+://(/w+(-/w+)*)(/.(/w+(-/w+)*))*(/?/S*)?$&quot;　　//url 
/^13/d&#123;9&#125;$/gi手机号正则表达式
public static bool IsValidMobileNo(string MobileNo)
&#123;
   const string regPattern = @&quot;^(130|131|132|133|134|135|136|137|138|139)/d&#123;8&#125;$&quot;;
   return Regex.IsMatch(MobileNo, regPattern);
&#125;
正则表达式--验证手机号码:13[0-9]&#123;9&#125;
实现手机号前带86或是+86的情况:^((/+86)|(86))?(13)/d&#123;9&#125;$
电话号码与手机号码同时验证:(^(/d&#123;3,4&#125;-)?/d&#123;7,8&#125;)$|(13[0-9]&#123;9&#125;) 
提取信息中的网络链接:(h|H)(r|R)(e|E)(f|F) *= *(&#39;|&quot;)?(/w|//|//|/.)+(&#39;|&quot;| *|&gt;)?  
提取信息中的邮件地址:/w+([-+.]/w+)*@/w+([-.]/w+)*/./w+([-.]/w+)*  
提取信息中的图片链接:(s|S)(r|R)(c|C) *= *(&#39;|&quot;)?(/w|//|//|/.)+(&#39;|&quot;| *|&gt;)?
提取信息中的IP地址:(/d+)/.(/d+)/.(/d+)/.(/d+)    
提取信息中的中国手机号码:(86)*0*13/d&#123;9&#125;    
提取信息中的中国固定电话号码:(/(/d&#123;3,4&#125;/)|/d&#123;3,4&#125;-|/s)?/d&#123;8&#125;    
提取信息中的中国电话号码（包括移动和固定电话）:(/(/d&#123;3,4&#125;/)|/d&#123;3,4&#125;-|/s)?/d&#123;7,14&#125;    
提取信息中的中国邮政编码:[1-9]&#123;1&#125;(/d+)&#123;5&#125;    
提取信息中的中国身份证号码:/d&#123;18&#125;|/d&#123;15&#125;    
提取信息中的整数：/d+    
提取信息中的浮点数（即小数）：(-?/d*)/.?/d+    
提取信息中的任何数字 ：(-?/d*)(/./d+)?  
提取信息中的中文字符串：[/u4e00-/u9fa5]*    
提取信息中的双字节字符串 (汉字)：[^/x00-/xff]* 
</code></pre>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云ECS安装部署nginx</title>
    <url>/2022/02/04/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2nginx/</url>
    <content><![CDATA[<h1 id="记录一下阿里云ECS部署nginx，以及一些小小的坑。对于本篇文章大家有不理解的可以留言或私信，大家一起探讨共同进步！"><a href="#记录一下阿里云ECS部署nginx，以及一些小小的坑。对于本篇文章大家有不理解的可以留言或私信，大家一起探讨共同进步！" class="headerlink" title="记录一下阿里云ECS部署nginx，以及一些小小的坑。对于本篇文章大家有不理解的可以留言或私信，大家一起探讨共同进步！"></a>记录一下阿里云ECS部署nginx，以及一些小小的坑。对于本篇文章大家有不理解的可以留言或私信，大家一起探讨共同进步！</h1><ol>
<li><p>肯定是要先买个服务器了，我只是想玩玩，就买最便宜的就好了，够用。<br>注意：买完需要重置一下密码，连接服务器需要输入密码；<br><img src="https://img-blog.csdnimg.cn/75aa9dfe4bbb49c29ef1e86821d696fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn546L5Zyo6Lev5LiK,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
<li><p>使用<strong>Xshell</strong>和<strong>Xftp</strong>或者<strong>MobaXterm</strong>连接服务器。服务器的系统我选择的是centOS，这里我是用的是<code>MobaXterm</code>，注意ip地址一定是公网ip，端口一般情况下服务器都会默认配22端口，如果连不上，那么需要给服务器的安全组配置22端口规则；<br><img src="https://img-blog.csdnimg.cn/bef2778dd2234e87a578d05f77e16684.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn546L5Zyo6Lev5LiK,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d7d2b0dcb9b14defbcec8a2ecfa3c5a7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn546L5Zyo6Lev5LiK,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
</li>
</ol>
<ol start="3">
<li>连接服务器成功之后，下面就是安装nginx了。</li>
</ol>
<p><strong>3.1</strong> 需要先安装几个nginx需要用到的依赖吧算是<br><code>3.1.1 先安装gcc-c++编译器  OpenSSL------</code> ==yum install gcc-c++== <code>--------</code> ==yum install -y openssl openssl-devel==<br><code>3.1.2 再安装pcre包 ---------</code> ==yum install -y pcre pcre-devel==<br><code>3.1.3 再安装zlib包 ----------</code>  ==yum install -y zlib zlib-devel==<br><strong>3.2</strong> 下载和使用nginx，我是在官网直接下载最新的稳定版本，在服务器解压使用，下载nginx的网站 <a href="http://nginx.org/en/download.html">Nginx下载</a>，也可以直接命令下载 ==wget <a href="https://nginx.org/download/nginx-1.20.0.tar.gz==">https://nginx.org/download/nginx-1.20.0.tar.gz==</a><br> <code>3.2.1 上传至 /usr/local/ 文件夹下解压 ---------- 解压命令 </code> ==tar -zxvf nginx-1.20.0.tar.gz==<br> <code>3.2.1 进入安装目录 cd /usr/local/nginx-1.20.0 使用默认的配置 ./configure</code><br> <code>3.2.3 编译安装 ------  </code> ==make install==<br> <code>3.2.4 找到sbin目录，启动nginx，这里可以使用 </code> ==whereis nginx== <code>命令查找nginx路径，找到路径下的sbin会有一个可执行文件，执行了它就可以了，启动nginx</code> ==./nginx==<br> <img src="https://img-blog.csdnimg.cn/ab4741d33672447eb9c3d3079293d7cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn546L5Zyo6Lev5LiK,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> 4. 弄好之后，就可以访问我们的公网ip，就直接访问到nginx的成功页面了；然后就可以部署前端项目，结合nginx的配置玩一玩；<code>对了，这里有一个坑，就是nginx默认的是80端口，如果我们的服务器安全组不配置80端口，是访问不了的，需要设置一下；</code><br> <img src="https://img-blog.csdnimg.cn/f2079b7779374498bd37622c9ea09f9b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/73ee797d5d95436091c9f9dd30bb63ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSn546L5Zyo6Lev5LiK,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>阿里云ECS</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Angularjs Form表单验证机制</title>
    <url>/2019/07/07/Angularjs-Form%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p><strong>个人总结</strong></p>
<pre><code>one: 一般来讲表单可能遇到的问题
        1.如何数据绑定
        2.验证表单
        3.显示出错信息
        4.整个form的验证
        5.避免提交没有验证通过的表单
        6.防止多次提交

two: input表单验证需要的属性
        * name   名字(这里需要注意:不光是input元素需要,最外层的form标签也需要一个name属性)
        * ng-model  绑定的数据
        * ng-required   是否必填 (true/false)
        * ng-minlength  最小长度
        * ng-maxlength  最大长度
        * ng-pattrn   匹配模式（正则匹配）
        * ng-change  值变化时的回调
        
three: 表单验证css样式
        * ng-valid   当表单验证通过时的设置
        * ng-invalid  当表单验证失败时的设置
        * ng-pristine  表单的未被动之前拥有
        * ng-dirty  表单被动过之后拥有
four: formName控制变量(返回的错误信息true/false);
        * formName.inputName.$pristine   字段是否未更改
        * formName.inputName.$dirty     字段是否更改
        * formName.inputName.$valid    字段有效
        * formName.inputName.$invalid   字段无效
        * formName.inputName.$error    字段错误信息(是一个对象,里面是每一个判断属性的bol值)
        这里的formName就是form标签上的name属性,inputName就是input标签上name属性,最后的$xxx则是angularjs内置的变量
        
five: Form的方法;
        * $setPristine 重置表单时可以用 将表单复位原始状态,包括class,$dirty,$pristine这三个方法
          $scope.myForm.$setPristine(); $scope.myForm就是表单form标签的name,$setPristine()是它下面的一个重置方法
</code></pre>
<p><strong>补充</strong></p>
<pre><code>1. 省市三级联动select标签,可以写成
   &lt;select class=&quot;form-control&quot; ng-change=&quot;data.area = false&quot; ng-model=&quot;data.province&quot; ng-options=&quot;x.id as x.name for x in citys | cityFilter:0&quot;&gt;&lt;/select&gt;
   ng-options就是代替了&lt;option value=&#39;x.id&#39;&gt;&lt;/option&gt;标签
   ng-options里的x.id as x.name for x in citys就是循环的city城市数组,x.id就是option的vaue值,x.name就是option显示的值
   
2. 自定义过滤器的一种用法(只是在本篇文章中的案例中涉及到了,在此粗略的总结一下,后面写到过滤器总结的时候会详细总结)
   var app=angular.module(&#39;app&#39;,[]);
   app.fliter(&#39;cityFilter&#39;,function()&#123;
      //参数一,在循环后用的话就是默认当条数据,参数二,就是用过滤器时冒号后跟的参数
      // 例: ng-options=&quot;x.id as x.name for x in citys | cityFilter:0&quot;;  0就是第二个参数,第一个参数默认就是循环的当前数据
      return function(data,id)&#123;  
      var formData=[];
         // 在这里假设我们要过留下数据的id为0的;
         angular.forEach(data,function(v)&#123;
            if(v.id===id)&#123;
               formData.push(v);
            &#125;
         &#125;)
      &#125;
      return formData;
   &#125;)
   
3. 如果工作中用到的是这样的表单验证,submit提交时,可以用来控制提交按钮是否禁止
      例: &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot; ng-disabled=&quot;myForm.$invalid || data.hobbies === undefined || data.hobbies.length === 0&quot;&gt;注册&lt;/button&gt;
          前提是表单元素必须要加上ng-required=&#39;tru/e&#39;,checkbox除外,checkbox可以用逻辑来控制

4. ng-model;    //后面详细总结指令各个属性时在做详细总结，在此涉及一些
   * ng-model是angular原生的directive
   * 可以通过require ngModel可以更深的去处理数据的双向绑定
   * 使用方法：在directive指令中的require定义require:&#39;ngModel&#39;
     例：app.directive(&quot;directive&quot;, [ &quot;$rootScope&quot;, function ($rootScope) &#123;
            return &#123;
                restrict: &quot;E&quot;,
                scope: &#123;
                    changeCbk: &quot;&amp;&quot;,
                &#125;,
                require: &quot;ngModel&quot;,  // 这个就是外面的ng-model绑定的数据
                link: function (scope, element, attr, ngModelCtrl)&#123;
                     ngModelCtrl就是ngModel
                &#125;
            &#125;
         ]&#125;);
    * ngModel里的属性
      &amp; $parsers属性，保存了从viewValue向modelValue绑定过程中的处理函数，他们将来会依次执行
      &amp; $formatters，他保存的是从modelValue向viewValue绑定过程中的处理函数
      &amp; $setViewValue,当view发生了某件事情时，从view向model绑定调用
        $setViewValue把viewValue保存下来
      &amp; $render 当模型发生变化时，应该怎么去更新视图，从model向view绑定
         调用ctrl.$render方法，将viewValue渲染到页面上
      &amp; $setValidity 设置验证结果
      &amp; $viewValue 视图的值
      &amp; $modelValue 模型里的值
</code></pre>
<blockquote>
<p>案例一: 结合bootstrap样式,利用angularjs自带验证功能实现表单验证.</p>
</blockquote>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../vendor/bootstrap3/css/bootstrap.min.css&quot;/&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div ng-app=&quot;myApp&quot; style=&quot;margin-top: 100px;&quot;&gt;
    &lt;form name=&quot;myForm&quot; action=&quot;kittencup.php&quot; ng-controller=&quot;firstController&quot; class=&quot;container form-horizontal&quot;&gt;
        &lt;div class=&quot;form-group&quot; ng-class=&quot;&#123;&#39;has-error&#39;:myForm.username.$dirty &amp;&amp; myForm.username.$invalid&#125;&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;用户名&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;text&quot; autocomplete=&quot;off&quot; name=&quot;username&quot; ng-pattern=&quot;/^[a-zA-Z]&#123;1&#125;/&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;10&quot; ng-model=&quot;data.username&quot; class=&quot;form-control&quot; placeholder=&quot;用户名&quot;&gt;
                &lt;div ng-show=&quot;myForm.username.$dirty &amp;&amp; myForm.username.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    用户名长度不能超过10位
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.username.$dirty &amp;&amp; myForm.username.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    用户名长度不能小于5位
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.username.$dirty &amp;&amp; myForm.username.$error.pattern&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    用户名必须已英文字母开始
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot; ng-class=&quot;&#123;&#39;has-error&#39;:myForm.password.$dirty &amp;&amp; myForm.password.$invalid&#125;&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;密 码&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;password&quot; autocomplete=&quot;off&quot; name=&quot;password&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;10&quot; ng-model=&quot;data.password&quot; class=&quot;form-control&quot; placeholder=&quot;密码&quot;&gt;
                &lt;div ng-show=&quot;myForm.password.$dirty &amp;&amp; myForm.password.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    密码长度不能超过10位
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.password.$dirty &amp;&amp; myForm.password.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    密码长度不能小于5位
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot; ng-class=&quot;&#123;&#39;has-error&#39;:myForm.passwordConfirm.$dirty &amp;&amp; myForm.passwordConfirm.$invalid&#125;&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;确认密码&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;password&quot; autocomplete=&quot;off&quot; name=&quot;passwordConfirm&quot; ng-required=&quot;true&quot; ng-model=&quot;data.passwordConfirm&quot; class=&quot;form-control&quot; placeholder=&quot;确认密码&quot;&gt;
                &lt;div ng-show=&quot;myForm.password.$dirty &amp;&amp; myForm.passwordConfirm.$dirty &amp;&amp; data.password !== data.passwordConfirm&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    密码和确认密码不一致
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot; ng-class=&quot;&#123;&#39;has-error&#39;:myForm.email.$dirty &amp;&amp; myForm.email.$invalid&#125;&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;邮箱&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;email&quot; autocomplete=&quot;off&quot; name=&quot;email&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;30&quot; ng-model=&quot;data.email&quot; class=&quot;form-control&quot; placeholder=&quot;邮箱&quot;&gt;
                &lt;div ng-show=&quot;myForm.email.$dirty &amp;&amp; myForm.email.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    邮箱长度不能超过30位
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.email.$dirty &amp;&amp; myForm.email.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    邮箱长度不能小于5位
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.email.$dirty &amp;&amp; myForm.email.$error.email&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    邮箱格式不正确
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot; ng-class=&quot;&#123;&#39;has-error&#39;:myForm.blog.$dirty &amp;&amp; myForm.blog.$invalid&#125;&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;博客网址&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;url&quot; autocomplete=&quot;off&quot; name=&quot;blog&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;30&quot; ng-model=&quot;data.blog&quot; class=&quot;form-control&quot; placeholder=&quot;博客网址&quot;&gt;
                &lt;div ng-show=&quot;myForm.blog.$dirty &amp;&amp; myForm.blog.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    网址长度不能超过30位
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.blog.$dirty &amp;&amp; myForm.blog.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    网址长度不能小于5位
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.blog.$dirty &amp;&amp; myForm.blog.$error.url&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    网址格式不正确
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot; ng-class=&quot;&#123;&#39;has-error&#39;:myForm.age.$dirty &amp;&amp; myForm.age.$invalid&#125;&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;年龄&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;input type=&quot;number&quot; autocomplete=&quot;off&quot; name=&quot;age&quot; min=&quot;10&quot; max=&quot;99&quot; ng-required=&quot;true&quot; ng-model=&quot;data.age&quot; class=&quot;form-control&quot; placeholder=&quot;年龄&quot;&gt;
                &lt;div ng-show=&quot;myForm.age.$dirty &amp;&amp; myForm.age.$error.max&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    年龄不能超过99岁
                &lt;/div&gt;
                &lt;div ng-show=&quot;myForm.age.$dirty &amp;&amp; myForm.age.$error.min&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    年龄不能小于10岁
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;性别&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;label class=&quot;radio-inline&quot;&gt;
                    &lt;input type=&quot;radio&quot; ng-required=&quot;true&quot; name=&quot;sex&quot; ng-model=&quot;data.sex&quot; value=&quot;1&quot; /&gt; 男
                &lt;/label&gt;
                &lt;label class=&quot;radio-inline&quot;&gt;
                    &lt;input type=&quot;radio&quot; ng-required=&quot;true&quot; name=&quot;sex&quot; ng-model=&quot;data.sex&quot; value=&quot;0&quot; /&gt; 女
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;爱好&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;label class=&quot;checkbox-inline&quot; ng-repeat=&quot;hobby in hobbies&quot;&gt;
                    &lt;input type=&quot;checkbox&quot; ng-model=&quot;hobby.checked&quot; name=&quot;hobby[]&quot; ng-checked=&quot;data.hobbies === undefined ? false : data.hobbies.indexOf(hobby.id) !== -1&quot; ng-click=&quot;toggleHobbySelection(hobby.id)&quot;/&gt; &#123;&#123;hobby.name&#125;&#125;
                &lt;/label&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;出生地&lt;/label&gt;
            &lt;div class=&quot;col-sm-3&quot;&gt;
                &lt;select class=&quot;form-control&quot; ng-change=&quot;data.area = false&quot; ng-model=&quot;data.province&quot; ng-options=&quot;x.id as x.name for x in cities | cityFilter:0&quot;&gt;&lt;/select&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-sm-3&quot;&gt;
                &lt;select class=&quot;form-control&quot; ng-show=&quot;data.province&quot; ng-model=&quot;data.area&quot; ng-options=&quot;x.id as x.name for x in cities | cityFilter:data.province&quot;&gt;&lt;/select&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-sm-3&quot;&gt;
                &lt;select class=&quot;form-control&quot; ng-required=&quot;true&quot; ng-show=&quot;data.province &amp;&amp; data.area&quot; ng-model=&quot;data.city&quot; ng-options=&quot;x.id as x.name for x in cities | cityFilter:data.area&quot;&gt;&lt;/select&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;只能输入偶数&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
               &lt;input type=&quot;text&quot; name=&quot;even&quot; class=&quot;form-group&quot; placeholder=&quot;偶数&quot; ng-model=&quot;data.even&quot; even&gt;
                &lt;div ng-show=&quot;myForm.even.$error.even&quot; class=&quot;alert alert-danger help-block&quot;&gt;
                    数字必须是偶数
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
            &lt;label class=&quot;col-sm-2 control-label&quot;&gt;个人介绍&lt;/label&gt;
            &lt;div class=&quot;col-sm-10&quot;&gt;
                &lt;custom-text-area ng-model=&quot;data.introduct&quot;&gt;aaa&lt;/custom-text-area&gt;
                &lt;custom-text-area ng-model=&quot;data.introduct&quot;&gt;&lt;/custom-text-area&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group&quot;&gt;
           &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;
               &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot; ng-disabled=&quot;myForm.$invalid || data.hobbies === undefined || data.hobbies.length === 0&quot;&gt;注册&lt;/button&gt;
               &lt;button type=&quot;reset&quot; class=&quot;btn btn-default&quot; ng-click=&quot;reset()&quot;&gt;重置&lt;/button&gt;
           &lt;/div&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;../../vendor/angular/angularjs.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;app/index.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<blockquote>
<p>案例一: index.js</p>
</blockquote>
<pre><code>angular.module(&#39;myApp&#39;, [])

.filter(&#39;cityFilter&#39;, function () &#123;
    return function (data, parent) &#123;
        var filterData = [];
        angular.forEach(data, function (obj) &#123;
            if (obj.parent === parent) &#123;
                filterData.push(obj);
            &#125;
        &#125;)
        return filterData;
    &#125;
&#125;)

.directive(&#39;even&#39;,function()&#123;
    return &#123;
        require : &#39;ngModel&#39;,
        link:function(scope,elm,attrs,ngModelController)&#123;
            ngModelController.$parsers.push(function(viewValue)&#123;
                if(viewValue % 2 === 0)&#123;
                    ngModelController.$setValidity(&#39;even&#39;,true);
                &#125;else&#123;
                    ngModelController.$setValidity(&#39;even&#39;,false);
                &#125;
                return viewValue;
            &#125;);
//                ngModelController.$formatters.push(function(modelValue)&#123;
//                    return modelValue + &#39;kittencup&#39;;
//                &#125;)
            &#125;
        &#125;;
    &#125;)

.directive(&#39;customTextArea&#39;,function()&#123;
    return &#123;
        restrict:&#39;E&#39;,
        template:&#39;&lt;div contenteditable=&quot;true&quot;&gt;&lt;/div&gt;&#39;,
        replace:true,
        require : &#39;ngModel&#39;,
        link:function(scope,elm,attrs,ngModelController)&#123;
            // view-&gt;model
            elm.on(&#39;keyup&#39;,function()&#123;
                scope.$apply(function()&#123;
                    ngModelController.$setViewValue(elm.html());
                &#125;);
            &#125;)
            ngModelController.$render = function()&#123;
                elm.html(ngModelController.$viewValue);
            &#125;

        &#125;
    &#125;;
&#125;)


.controller(&#39;firstController&#39;, [&#39;$scope&#39;, function ($scope) &#123;
    var that = this;
    $scope.hobbies = [
        &#123;id: 1,name: &#39;玩游戏&#39;&#125;,
        &#123;id: 2,name: &#39;写代码&#39;&#125;,
        &#123;id: 3,name: &#39;睡觉&#39;&#125;,
    ];
    $scope.cities = [
        &#123;name: &#39;上海&#39;,parent: 0,id: 1&#125;,
        &#123;name: &#39;上海市&#39;,parent: 1,id: 2&#125;,
        &#123;name: &#39;徐汇区&#39;,parent: 2,id: 8&#125;,
        &#123;name: &#39;长宁区&#39;,parent: 2,id: 3&#125;,
        &#123;name: &#39;北京&#39;,parent: 0,id: 4&#125;,
        &#123;name: &#39;北京市&#39;,parent: 4,id: 5&#125;,
        &#123;name: &#39;东城区&#39;,parent: 5,id: 6&#125;,
        &#123;name: &#39;丰台区&#39;,parent: 5,id: 7&#125;,
        &#123;name: &#39;浙江&#39;,parent: 0,id: 9&#125;,
        &#123;name: &#39;杭州&#39;,parent: 9,id: 100&#125;,
        &#123;name: &#39;宁波&#39;,parent: 9,id: 11&#125;,
        &#123;name: &#39;西湖区&#39;,parent: 100,id: 12&#125;,
        &#123;name: &#39;北仑区‎&#39;,parent: 11,id: 13&#125;
    ];
    $scope.data = &#123;
        hobbies: [1, 2],
        city: 3
    &#125;;
    
    // 先保留一份默认值
    $scope.origData = angular.copy($scope.data);
    $scope.reset = function()&#123;
        $scope.data = angular.copy($scope.origData);
        that.initCity();
        console.log(&#39;aaaaaaaaaaaaaa-----&#39;,$scope.myForm);
        $scope.myForm.$setPristine();
    &#125;

    // 让城市关联使用
    this.findCityId = function (parent) &#123;
        var parentId;
        angular.forEach($scope.cities, function (city) &#123;
            if (city.id === parent) &#123;
                parentId = city.parent;
                return;
            &#125;
        &#125;)
        return parentId;
    &#125;

    this.initCity = function()&#123;
        if ($scope.data.city !== undefined) &#123;
            $scope.data.area = this.findCityId($scope.data.city);
            $scope.data.province = this.findCityId($scope.data.area);
        &#125;
    &#125;

    // 第一次打开页面 需要初始化一下
    this.initCity.call(this);

    $scope.toggleHobbySelection = function (id) &#123;

        var index = -1;
        if ($scope.data.hobbies === undefined) &#123;
            $scope.data.hobbies = [];
        &#125; else &#123;
            index = $scope.data.hobbies.indexOf(id);
        &#125;

        if (index === -1) &#123;
            $scope.data.hobbies.push(id);
        &#125; else &#123;
            $scope.data.hobbies.splice(index, 1);
        &#125;

    &#125;
&#125;]);
</code></pre>
<blockquote>
<p>案例二:  与案例一相同,但效果不同</p>
</blockquote>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot; ng-app=&#39;App&#39;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;表单提示&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;../../angularjs/bootstrap-3.3.7-dist/css/bootstrap.min.css&quot;&gt;
    &lt;style&gt;
        body&#123;
            padding-top: 50px;
        &#125;
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div ng-controller=&quot;firstController&quot; class=&quot;container&quot;&gt;
        &lt;div class=&quot;col-md-6&quot;&gt;
            &lt;form role=&quot;form&quot; name=&quot;myForm&quot; ng-submit=&quot;submitForm(myForm.$valid)&quot; class=&quot;form-horizontal&quot; novalidate&gt;
                &lt;div class=&quot;form-group has-feedback&quot;&gt;
                    &lt;div class=&quot;col-md-4&quot;&gt;
                        &lt;label for=&quot;name&quot;&gt;1.必填项&lt;/label&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-md-8&quot;&gt;
                        &lt;input class=&quot;form-control&quot; id=&quot;name&quot; name=&quot;name&quot; type=&quot;text&quot; required ng-model=&#39;user.name&#39; /&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ok form-control-feedback&quot;
                            ng-show=&quot;myForm.name.$dirty &amp;&amp; myForm.name.$valid&quot;&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;form-group has-feedback&quot;&gt;
                    &lt;div class=&quot;col-md-4&quot;&gt;
                        &lt;label for=&quot;minlength&quot;&gt;2.最小长度=5&lt;/label&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-md-8&quot;&gt;
                        &lt;input type=&quot;text&quot; id=&quot;minlength&quot; name=&quot;minlength&quot; ng-minlength=&quot;5&quot; ng-model=&quot;user.minlength&quot;
                            class=&quot;form-control&quot; /&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ok form-control-feedback&quot;
                            ng-show=&quot;myForm.minlength.$dirty &amp;&amp; myForm.minlength.$valid&quot;&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;form-group has-feedback&quot;&gt;
                    &lt;div class=&quot;col-md-4&quot;&gt;
                        &lt;label for=&quot;maxlength&quot;&gt;3.最大长度=20&lt;/label&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-md-8&quot;&gt;
                        &lt;input type=&quot;text&quot; id=&quot;maxlength&quot; name=&quot;maxlength&quot; ng-model=&quot;user.maxlength&quot; ng-maxlength=&quot;20&quot;
                            class=&quot;form-control&quot; /&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ok form-control-feedback&quot;
                            ng-show=&quot;myForm.maxlength.$dirty &amp;&amp; myForm.maxlength.$valid&quot;&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;form-group has-feedback&quot;&gt;
                    &lt;div class=&quot;col-md-4&quot;&gt;
                        &lt;label for=&quot;pattern&quot;&gt;4. 模式匹配&lt;/label&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-md-8&quot;&gt;
                        &lt;input type=&quot;text&quot; id=&quot;pattern&quot; name=&quot;pattern&quot; ng-model=&quot;user.pattern&quot;
                            ng-pattern=&quot;/^[a-zA-Z]*\d$/&quot; class=&quot;form-control&quot; /&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ok form-control-feedback&quot;
                            ng-show=&quot;myForm.pattern.$dirty &amp;&amp; myForm.pattern.$valid&quot;&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;form-group has-feedback&quot;&gt;
                    &lt;div class=&quot;col-md-4&quot;&gt;
                        &lt;label for=&quot;email&quot;&gt;5. 电子邮件&lt;/label&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-md-8&quot;&gt;
                        &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; ng-model=&quot;user.email&quot; class=&quot;form-control&quot; /&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ok form-control-feedback&quot;
                            ng-show=&quot;myForm.email.$dirty &amp;&amp; myForm.email.$valid&quot;&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;form-group has-feedback&quot;&gt;
                    &lt;div class=&quot;col-md-4&quot;&gt;
                        &lt;label for=&quot;age&quot;&gt;6. 数字&lt;/label&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-md-8&quot;&gt;
                        &lt;input type=&quot;number&quot; id=&quot;age&quot; name=&quot;age&quot; ng-model=&quot;user.age&quot; class=&quot;form-control&quot; /&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ok form-control-feedback&quot;
                            ng-show=&quot;myForm.age.$dirty &amp;&amp; myForm.age.$valid&quot;&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;form-group has-feedback&quot;&gt;
                    &lt;div class=&quot;col-md-4&quot;&gt;
                        &lt;label for=&quot;url&quot;&gt; 7. URL&lt;/label&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;col-md-8&quot;&gt;
                        &lt;input type=&quot;url&quot; id=&quot;url&quot; name=&quot;url&quot; ng-model=&quot;user.url&quot; class=&quot;form-control&quot; /&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ok form-control-feedback&quot;
                            ng-show=&quot;myForm.url.$dirty &amp;&amp; myForm.url.$valid&quot;&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&quot;form-group text-center&quot;&gt;
                    &lt;input class=&quot;btn btn-primary btn-lg&quot; ng-disabled=&quot;myForm.$invalid&quot; type=&quot;submit&quot; value=&quot;提交&quot; /&gt;
                &lt;/div&gt;
            &lt;/form&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-md-12&quot;&gt;
            1.必填项:&#123;&#123;user.name&#125;&#125;
            $pristine 【没修改】：&#123;&#123;myForm.name.$pristine &#125;&#125;
            $dirty【修改过】：&#123;&#123;myForm.name.$dirty&#125;&#125;
            $invalid【验证失败】：&#123;&#123;myForm.name.$invalid&#125;&#125;
            $invalid【验证成功】：&#123;&#123;myForm.name.$valid&#125;&#125;
            required：&#123;&#123;myForm.name.$error.required&#125;&#125;
            &lt;br&gt;
            2.最小长度=5:&#123;&#123;user.minlength&#125;&#125;
            $pristine 【没修改】：&#123;&#123;myForm.minlength.$pristine &#125;&#125;
            $dirty【修改过】：&#123;&#123;myForm.minlength.$dirty&#125;&#125;
            $invalid【验证失败】：&#123;&#123;myForm.minlength.$invalid&#125;&#125;
            $invalid【验证成功】：&#123;&#123;myForm.minlength.$valid&#125;&#125;
            $error【错误详情】：&#123;&#123;myForm.minlength.$error&#125;&#125; &lt;br&gt;
            3.最大长度=20:&#123;&#123;user.maxlength&#125;&#125;
            $pristine 【没修改】：&#123;&#123;myForm.maxlength.$pristine &#125;&#125;
            $dirty【修改过】：&#123;&#123;myForm.maxlength.$dirty&#125;&#125;
            $invalid【验证失败】：&#123;&#123;myForm.maxlength.$invalid&#125;&#125;
            $invalid【验证成功】：&#123;&#123;myForm.maxlength.$valid&#125;&#125;
            $error【错误详情】：&#123;&#123;myForm.maxlength.$error&#125;&#125; &lt;br&gt;
            4.模式匹配:&#123;&#123;user.pattern&#125;&#125;
            $pristine 【没修改】：&#123;&#123;myForm.pattern.$pristine &#125;&#125;
            $dirty【修改过】：&#123;&#123;myForm.pattern.$dirty&#125;&#125;
            $invalid【验证失败】：&#123;&#123;myForm.pattern.$invalid&#125;&#125;
            $invalid【验证成功】：&#123;&#123;myForm.pattern.$valid&#125;&#125;
            $error【错误详情】：&#123;&#123;myForm.pattern.$error&#125;&#125; &lt;br&gt;
            5.电子邮件:&#123;&#123;user.email&#125;&#125;
            $pristine 【没修改】：&#123;&#123;myForm.email.$pristine &#125;&#125;
            $dirty【修改过】：&#123;&#123;myForm.email.$dirty&#125;&#125;
            $invalid【验证失败】：&#123;&#123;myForm.email.$invalid&#125;&#125;
            $invalid【验证成功】：&#123;&#123;myForm.email.$valid&#125;&#125;
            $error【错误详情】：&#123;&#123;myForm.email.$error&#125;&#125; &lt;br&gt;
            6.数字:&#123;&#123;user.age&#125;&#125;
            $pristine 【没修改】：&#123;&#123;myForm.age.$pristine &#125;&#125;
            $dirty【修改过】：&#123;&#123;myForm.age.$dirty&#125;&#125;
            $invalid【验证失败】：&#123;&#123;myForm.age.$invalid&#125;&#125;
            $invalid【验证成功】：&#123;&#123;myForm.age.$valid&#125;&#125;
            $error【错误详情】：&#123;&#123;myForm.age.$error&#125;&#125; &lt;br&gt;
            7.URL:&#123;&#123;user.url&#125;&#125;
            $pristine 【没修改】：&#123;&#123;myForm.url.$pristine &#125;&#125;
            $dirty【修改过】：&#123;&#123;myForm.url.$dirty&#125;&#125;
            $invalid【验证失败】：&#123;&#123;myForm.url.$invalid&#125;&#125;
            $invalid【验证成功】：&#123;&#123;myForm.url.$valid&#125;&#125;
            $error【错误详情】：&#123;&#123;myForm.url.$error&#125;&#125; &lt;br&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src=&quot;../../angularjs/jquery-1.12.4.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;../../angularjs/bootstrap-3.3.7-dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;../../angularjs/angular-1.5.8/angular.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        var app=angular.module(&#39;App&#39;,[]);
        app.controller(&#39;firstController&#39;,[&#39;$scope&#39;,function($scope)&#123;
            
        &#125;])

    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angularjs拦截器</title>
    <url>/2019/07/11/Angularjs%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<p><strong>本篇文章参考自：<a href="https://my.oschina.net/ilivebox/blog/290881">https://my.oschina.net/ilivebox/blog/290881</a></strong></p>
<p><strong>前言：</strong></p>
<blockquote>
<p>今天在公司项目中碰到了拦截器这个东西，顾名思义，拦截器就是为了拦截某个东西，项目中的拦截器都是组长封装好的，自己也不懂，所以就问了问度娘，结合网上的讲解，在此总结一下</p>
</blockquote>
<p><strong>什么是拦截器？</strong></p>
<blockquote>
<p>顾名思义，拦截器就是为了拦截某一个东西~~~<br>    $httpAngularJS 的 $http 服务允许我们通过发送 HTTP 请求方式与后台进行通信。在某些情况下，我们希望可以俘获所有的请求，并且在将其发送到服务端之前进行操作。还有一些情况是，我们希望俘获响应，并且在完成完成调用之前处理它。一个很好例子就是处理全局 http 异常(在本公司的项目中也是捕捉响应，处理全局http异常，在后面会张贴代码)。拦截器(Interceptors)应运而生。本文将介绍 AngularJS 的拦截器，并且给几个有用的例子。</p>
</blockquote>
<p><strong>$httpProvider 中有一个 interceptors 数组，而所谓拦截器只是一个简单的注册到了该数组中的常规服务工厂。下面的例子告诉你怎么创建一个拦截器:</strong></p>
<pre><code>module.factory(&#39;myInterceptor&#39;,[&#39;$log&#39;,function($log)&#123;   // 就是一个服务
    $log.debug(&#39;$log在这里向您展示这是一个常规的注入工厂&#39;);
    var myInterceptor=&#123;&#125;;
    ...
    ...
    return myInterceptor;
&#125;])
</code></pre>
<blockquote>
<p>然后通过它的名字添加到 $httpProvider.interceptors 数组;</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
module.config([&#39;$httpProvider&#39;, function($httpProvider) &#123; // config是配置服务的
    $httpProvider.interceptors.push(&#39;myInterceptor&#39;);
&#125;]);
</code></pre>
<p><strong>拦截器允许我们做哪些操作，有什么作用</strong></p>
<blockquote>
<p>通过实现 request 方法拦截请求: 该方法会在 $http 发送请求道后台之前执行，因此你可以修改配置或做其他的操作。该方法接收请求配置对象(request configuration object)作为参数，然后必须返回配置对象或者 promise 。如果返回无效的配置对象或者 promise 则会被拒绝，导致 $http 调用失败。</p>
</blockquote>
<blockquote>
<p>通过实现 response 方法拦截响应: 该方法会在 $http 接收到从后台过来的响应之后执行，因此你可以修改响应或做其他操作。该方法接收响应对象(response object)作为参数，然后必须返回响应对象或者 promise。响应对象包括了请求配置(request configuration)，头(headers)，状态(status)和从后台过来的数据(data)。如果返回无效的响应对象或者 promise 会被拒绝，导致 $http 调用失败。</p>
</blockquote>
<blockquote>
<p>通过实现 requestError 方法拦截请求异常: 有时候一个请求发送失败或者被拦截器拒绝了。请求异常拦截器会俘获那些被上一个请求拦截器中断的请求。它可以用来恢复请求或者有时可以用来撤销请求之前所做的配置，比如说关闭进度条，激活按钮和输入框什么之类的。</p>
</blockquote>
<blockquote>
<p>通过实现 responseError 方法拦截响应异常: 有时候我们后台调用失败了。也有可能它被一个请求拦截器拒绝了，或者被上一个响应拦截器中断了。在这种情况下，响应异常拦截器可以帮助我们恢复后台调用。</p>
</blockquote>
<p><strong>异步操作(并没有理解透)</strong></p>
<blockquote>
<p>有时候需要在拦截器中做一些异步操作。幸运的是， AngularJS 允许我们返回一个 promise 延后处理。它将会在请求拦截器中延迟发送请求或者在响应拦截器中推迟响应。</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
module.factory(&#39;myInterceptor&#39;, [&#39;$q&#39;, &#39;someAsyncService&#39;, function($q, someAsyncService) &#123;
    var requestInterceptor = &#123;
        request: function(config) &#123;
            var deferred = $q.defer();  // 创建一个异步对象;
            someAsyncService.doAsyncOperation().then(function() &#123;
                // Asynchronous operation succeeded, modify config accordingly
                ...
                deferred.resolve(config);
            &#125;, function() &#123;
                // Asynchronous operation failed, modify config accordingly
                ...
                deferred.resolve(config);
            &#125;);
            return deferred.promise;
        &#125;
    &#125;;
    return requestInterceptor;
&#125;]);
</code></pre>
<blockquote>
<p>上面这个例子中，请求拦截器使用了一个异步操作，根据结果来更新配置。然后它用更新后的配置继续执行操作。如果 deferred 被拒绝，http 请求则会失败。<br>响应拦截器的例子和上面的一样.<br>只有当 deferred 被解析，请求才算成功，如果 deferred 被拒绝，请求将会失败。</p>
</blockquote>
<p><strong>例子</strong></p>
<blockquote>
<p>本节中我将提供一些 AngularJS 拦截器的例子，以便让你更好的理解它们是如何使用的，并且可以展示一下它们能怎样帮助你。不过请记住，我这里提供的解决案不一定是最好或者最准确的解决案。</p>
</blockquote>
<p><strong>###Session拦截，请求拦截</strong></p>
<blockquote>
<p>这里有两种方式来实现服务端的认证。第一种是传统的 Cookie-Based 验证。通过服务端的 cookies 来对每个请求的用户进行认证。另一种方式是 Token-Based 验证。当用户登录时，他会从后台拿到一个 sessionToken。sessionToken 在服务端标识了每个用户，并且会包含在发送到服务端的每个请求中。</p>
</blockquote>
<blockquote>
<p>下面的 sessionInjector 为每个被俘获的请求添加了 x-session-token 头 (如果当前用户已登录):</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
module.factory(&#39;sessionInjector&#39;, [&#39;SessionService&#39;, function(SessionService) &#123;
    var sessionInjector = &#123;
        request: function(config) &#123;
            if (!SessionService.isAnonymus) &#123;
                config.headers[&#39;x-session-token&#39;] = SessionService.token;
            &#125;
            return config;
        &#125;
    &#125;;
    return sessionInjector;
&#125;]);
module.config([&#39;$httpProvider&#39;, function($httpProvider) &#123;
    $httpProvider.interceptors.push(&#39;sessionInjector&#39;); //放到拦截器中
&#125;]);
</code></pre>
<blockquote>
<p>然后创建一个请求</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
$http.get(&#39;https://api.github.com/users/naorye/repos&#39;);
</code></pre>
<blockquote>
<p>被 sessionInjector 拦截之前的配置对象是这样的:</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
&#123;
    &quot;transformRequest&quot;: [
        null
    ],
    &quot;transformResponse&quot;: [
        null
    ],
    &quot;method&quot;: &quot;GET&quot;,
    &quot;url&quot;: &quot;https://api.github.com/users/naorye/repos&quot;,
    &quot;headers&quot;: &#123;
        &quot;Accept&quot;: &quot;application/json, text/plain, */*&quot;
    &#125;
&#125;
</code></pre>
<blockquote>
<p>被 sessionInjector 拦截之后的配置对象是这样的: 将token加到了请求头</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
&#123;
    &quot;transformRequest&quot;: [
        null
    ],
    &quot;transformResponse&quot;: [
        null
    ],
    &quot;method&quot;: &quot;GET&quot;,
    &quot;url&quot;: &quot;https://api.github.com/users/naorye/repos&quot;,
    &quot;headers&quot;: &#123;
        &quot;Accept&quot;: &quot;application/json, text/plain, */*&quot;,
        &quot;x-session-token&quot;: 415954427904
    &#125;
&#125;
</code></pre>
<p><strong>##时间戳(请求和响应拦截器)</strong></p>
<blockquote>
<p>让我们用拦截器来测一下从后台返回响应需要多少时间。可以通过给每个请求和响应加上时间戳。</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
module.factory(&#39;timestampMarker&#39;, [function() &#123;
    var timestampMarker = &#123;
        request: function(config) &#123;
            config.requestTimestamp = new Date().getTime();
            return config;
        &#125;,
        response: function(response) &#123;
            response.config.responseTimestamp = new Date().getTime();
            return response;
        &#125;
    &#125;;
    return timestampMarker;
&#125;]);
module.config([&#39;$httpProvider&#39;, function($httpProvider) &#123; // 注册拦截器
    $httpProvider.interceptors.push(&#39;timestampMarker&#39;);
&#125;]);
</code></pre>
<blockquote>
<p>以上，在请求和响应时拦截，在config.requestTimestamp和config.responseTimestamp赋上当前的时间。</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;  调用接口看看从发送请求到响应需要多长时间
$http.get(&#39;https://api.github.com/users/naorye/repos&#39;).then(function(response) &#123;
    var time = response.config.responseTimestamp - response.config.requestTimestamp;
    console.log(&#39;The request took &#39; + (time / 1000) + &#39; seconds.&#39;);
&#125;);
</code></pre>
<blockquote>
<p>下面是时间戳(请求和响应拦截器)的完整代码</p>
</blockquote>
<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt; 
        &lt;title&gt;Timestamp Marker Example&lt;/title&gt;
        &lt;script src=&quot;../../angularjs/angular-1.5.8/angular.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;

    &lt;body ng-app=&quot;timestamp-marker-example&quot;&gt;
        &lt;div ng-controller=&quot;ExampleController&quot;&gt;
            The request took &lt;span ng-bind=&quot;requestTime&quot;&gt;&lt;/span&gt; seconds.
        &lt;/div&gt;

        &lt;script type=&quot;text/javascript&quot;&gt;
        var module = angular.module(&#39;timestamp-marker-example&#39;, []);
        module.factory(&#39;timestampMarker&#39;, [function() &#123;
            var timestampMarker = &#123;
                request: function(config) &#123;
                    config.requestTimestamp = new Date().getTime();
                    return config;
                &#125;,
                response: function(response) &#123;
                    response.config.responseTimestamp = new Date().getTime();
                    return response;
                &#125;
            &#125;;
            return timestampMarker;
        &#125;]);
        module.config([&#39;$httpProvider&#39;, function($httpProvider) &#123;
            $httpProvider.interceptors.push(&#39;timestampMarker&#39;); 
        &#125;]);

        module.controller(&#39;ExampleController&#39;, [&#39;$scope&#39;, &#39;$http&#39;, function($scope, $http) &#123;
            $scope.requestTime = &#39;[waiting]&#39;;
            $http.get(&#39;https://api.github.com/users/naorye/repos&#39;).then(function(response) &#123;
                var time = response.config.responseTimestamp - response.config.requestTimestamp;
                $scope.requestTime = (time / 1000);
            &#125;);
        &#125;]);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>##请求恢复 (请求异常拦截)</strong></p>
<blockquote>
<p>为了演示请求异常拦截，我们需要模拟前一个拦截器拒绝了请求这种情况。我们的请求异常拦截器会拿到被拒绝的原因以及恢复请求。</p>
</blockquote>
<blockquote>
<p>让我们来创建两个拦截器: requestRejector 和 requestRecoverer。</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
module.factory(&#39;requestRejector&#39;, [&#39;$q&#39;, function($q) &#123;
    var requestRejector = &#123;
        request: function(config) &#123;
            return $q.reject(&#39;requestRejector&#39;);
        &#125;
    &#125;;
    return requestRejector;
&#125;]);
module.factory(&#39;requestRecoverer&#39;, [&#39;$q&#39;, function($q) &#123;
    var requestRecoverer = &#123;
        requestError: function(rejectReason) &#123;
            if (rejectReason === &#39;requestRejector&#39;) &#123;
                // Recover the request
                return &#123;
                    transformRequest: [],
                    transformResponse: [],
                    method: &#39;GET&#39;,
                    url: &#39;https://api.github.com/users/naorye/repos&#39;,
                    headers: &#123;
                        Accept: &#39;application/json, text/plain, */*&#39;
                    &#125;
                &#125;;
            &#125; else &#123;
                return $q.reject(rejectReason);
            &#125;
        &#125;
    &#125;;
    return requestRecoverer;
&#125;]);
module.config([&#39;$httpProvider&#39;, function($httpProvider) &#123;
    $httpProvider.interceptors.push(&#39;requestRejector&#39;);
    // Removing &#39;requestRecoverer&#39; will result to failed request
    $httpProvider.interceptors.push(&#39;requestRecoverer&#39;);
&#125;]);
</code></pre>
<blockquote>
<p>然后，如果你像下面这样请求，我们会在 log 中看到 success，虽然 requestRejector 拒绝了请求。</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
$http.get(&#39;https://api.github.com/users/naorye/repos&#39;).then(function() &#123;
    console.log(&#39;success&#39;);
&#125;, function(rejectReason) &#123;
    console.log(&#39;failure&#39;);
&#125;);
</code></pre>
<blockquote>
<p>完整代码: <a href="http://www.webdeveasy.com/code/interceptors-in-angularjs-and-useful-examples/request-recover.html">http://www.webdeveasy.com/code/interceptors-in-angularjs-and-useful-examples/request-recover.html</a></p>
</blockquote>
<p><strong>##Session 恢复 (响应异常拦截器)</strong></p>
<blockquote>
<p>有时候，我们的单页面应用中，会发生丢失 session 情况。这种情况可能由于 session 过期了或者服务器异常。我们来创建一个拦截器，用于恢复 session 然后自动重新发送原始请求(假设 session 过期的情况)。<br>为了演示目的，我们来假设发生了 session 过期返回 http 状态码 419。</p>
</blockquote>
<pre><code>&lt;!-- lang: js --&gt;
module.factory(&#39;sessionRecoverer&#39;, [&#39;$q&#39;, &#39;$injector&#39;, function($q, $injector) &#123;
    var sessionRecoverer = &#123;
        responseError: function(response) &#123;
            // Session has expired
            if (response.status == 419)&#123;
                var SessionService = $injector.get(&#39;SessionService&#39;);
                var $http = $injector.get(&#39;$http&#39;); // 获取注入
                var deferred = $q.defer();

                // Create a new session (recover the session)
                // We use login method that logs the user in using the current credentials and
                // returns a promise
                SessionService.login().then(deferred.resolve, deferred.reject);

                // When the session recovered, make the same backend call again and chain the request
                return deferred.promise.then(function() &#123;
                    return $http(response.config);
                &#125;);
            &#125;
            return $q.reject(response);
        &#125;
    &#125;;
    return sessionRecoverer;
&#125;]);
module.config([&#39;$httpProvider&#39;, function($httpProvider) &#123;
    $httpProvider.interceptors.push(&#39;sessionRecoverer&#39;);
&#125;]);
</code></pre>
<blockquote>
<p>以这种方式，如果后台调用失败引起 session 过期，sessionRecoverer 会创建一个新的 session 然后重新调用后台。</p>
</blockquote>
<p><strong>总结</strong></p>
<blockquote>
<p>在这篇文章里我解释了关于 AngularJS 的拦截器的知识，我介绍了 request, response, requestError 和 responseError拦截器，以及讲解了如何/何时使用它们。我也提供了一些现实的有用的例子，你可以用在你的开发中。</p>
</blockquote>
<p><strong>最后，把在项目中用到的拦截器写在下面</strong></p>
<blockquote>
<p>首先创建一个拦截器（在appService.js中,后面写项目结构的组成的时候会写到）；</p>
</blockquote>
<pre><code>//发送请求统一带上token
app.factory(&#39;authInterceptor&#39;, [&quot;$rootScope&quot;, &quot;$cookies&quot;, &quot;$injector&quot;, &quot;$q&quot;, &quot;$location&quot;, function ($rootScope, $cookies, $injector, $q, $location) &#123;
    return &#123;
        request: function (config) &#123;
            config.headers = config.headers || &#123;&#125;;
            var headerName = &#39;Authorization&#39;;
            var cookieName = &#39;XSRF-TOKEN&#39;;
            //检查cookie是否存在
            if ($cookies.get(cookieName) == undefined || $cookies.get(cookieName) == &#39;&#39;) &#123;
                $location.path(&#39;/Index&#39;);
            &#125;
            else &#123;
                config.headers[headerName] = &#39;Bearer &#39; + $cookies.get(cookieName);
            &#125;

            //设置不缓存
            config.headers[&quot;X-Requested-With&quot;] = &#39;XMLHttpRequest&#39;;
            config.headers[&quot;Cache-Control&quot;] = &quot;no-cache&quot;;
            config.headers[&#39;Pragma&#39;] = &#39;no-cache&#39;;

            return config;
        &#125;,
        responseError: function (response) &#123;
            abp.ui.clearBusy(&quot;#mianBody&quot;);
            abp.ui.clearBusy($(&#39;.modal-content&#39;));//清除Modal遮罩层
            //401服务端返回授权失败
            if (response.status == 401) &#123;
                var msg = &quot;您访问的接口未授权，请联系管理员&quot;;// response.data.error.message || 
                abp.message.warn(msg, &quot;提示&quot;);
            &#125; else if (response.status == 400) &#123;
                abp.message.warn(&quot;您输入的参数不符合规范，请重新核对&quot;, &quot;提示&quot;);
            &#125; else if (response.status == 403) &#123;
                abp.message.warn(&quot;您没有接口访问权限，请联系管理员&quot;, &quot;提示&quot;);
            &#125; else if (response.status == 500 &amp;&amp; response.data.error.code == 200)//code为200需要提示到界面的错误信息
            &#123;
                abp.message.warn(response.data.error.message, &quot;提示&quot;);
            &#125;
            else &#123;
                var errorData = &quot;&lt;div&gt;&lt;p&gt;&quot; + response.status + &quot;:&quot; + response.statusText + &quot;&lt;/p&gt;&quot; +
                    &quot;&lt;p&gt;请求接口为：&quot; + response.config.url + &quot;&lt;/p&gt;&quot;
                    + &quot;&lt;/div&gt;&quot;

                if (response.data.error &amp;&amp; response.data.error.message) &#123;
                    errorData += &quot;&lt;p&gt;&quot; + response.data.error.message + &quot;&lt;p&gt;&quot;;
                &#125;

                var topMenuId = $location.search().topMenuId;
                $location.path(&quot;/error&quot;).search(&#123; topMenuId: topMenuId, errorData: errorData &#125;);
                return $q.reject(response);
            &#125;

            //else
            //    if (response.status === 404) &#123;
            //    $location.path(&#39;/Index&#39;);
            //    return $q.reject(response);
            //&#125;
        &#125;,
        response: function (response) &#123;
            return response;
        &#125;
    &#125;;
&#125;]);
</code></pre>
<blockquote>
<p>运用拦截器<br>写在app.js里(app.js是配置服务的,后面写项目架构组成的时候会写到)；</p>
</blockquote>
<pre><code>app.config([
    &#39;$httpProvider&#39;,function($httpProvider)&#123;
        $httpProvider.interceptors.push(&#39;authInterceptor&#39;);
    &#125;
])
</code></pre>
<blockquote>
<p>这样一来就会把拦截器里的请求前，请求后，以及全局异常处理都会用到接口上。大大提高了效率。</p>
</blockquote>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs+Express+MongoDB实战</title>
    <url>/2020/07/01/Nodejs-Express-MongoDB%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h5 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h5><ol>
<li><p>安装express脚手架：<code>npm install express-generator -g</code></p>
</li>
<li><p>创建项目：<code>express -e project</code> -e代表使用ejs模板，project是项目名称</p>
</li>
<li><p>进入项目：<code>npm install</code>下载依赖包</p>
</li>
<li><p>安装nodemon：<code>npm install nodemon -g</code> 使用nodemon来启动项目，不用node来启动<br><img src="https://img-blog.csdnimg.cn/2020010414254140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>启动项目：<code>npm start</code>,端口号在www启动文件中可以看。</p>
<h5 id="项目连接MongoDB数据库"><a href="#项目连接MongoDB数据库" class="headerlink" title="项目连接MongoDB数据库"></a>项目连接MongoDB数据库</h5></li>
<li><p>安装集成与nodejs的mongodb：<code>npm install mongodb -S</code></p>
</li>
<li><p>在项目中创建model文件，在下面创建index.js,所有和数据库连接的代码都封装在这个文件下</p>
<pre><code> const MongoClient = require(&#39;mongodb&#39;).MongoClient;  // 创建Mongo的客户端对象
 const url = &#39;mongodb://localhost:27017&#39;;  // 连接数据库url
 const dbName = &#39;project&#39;;   // 连接的数据库名字
 // 数据库的连接方法封装
 function connect(callback)&#123;
     // 使用connect方法连接到服务器
     // err:错误对象。client：客户端连接成功的对象
     MongoClient.connect(url, function(err, client) &#123;
         if(err)&#123; // 如果连接错误，打印错误信息
             console.log(&#39;数据库连接错误！&#39;,err);
         &#125;else&#123;  // 否则
             const db = client.db(dbName);  // 数据库连接成功的对象
             callback &amp;&amp; callback(db);  // 利用回调函数处理
             client.close();  // 每次调用成功,还要再关闭数据库
         &#125;
     &#125;);
 &#125;
 
 module.exports = &#123;connect&#125;
</code></pre>
</li>
<li><p>调用：通过路由向数据库写入数据会用到</p>
<pre><code> var express = require(&#39;express&#39;);
 var router = express.Router();
 var model = require(&#39;../model&#39;);  // 引入连接数据库方法
 /* GET users listing. */
 router.get(&#39;/&#39;, function(req, res, next) &#123;
   res.send(&#39;respond with a resource&#39;);
 &#125;);
 
 // 注册接口
 router.post(&#39;/regist&#39;,function(req, res, next)&#123;
   var data = &#123;
     username:req.body.username,
     password:req.body.password,
     password2:req.body.password2
   &#125;
   model.connect(function(db)&#123;
     db.collection(&#39;users&#39;).insert(data,function(err,ret)&#123;
       if(err)&#123;
         console.log(&#39;注册失败!&#39;,err);
         res.redirect(&#39;/regist&#39;);
       &#125;else&#123;
         res.redirect(&#39;/login&#39;);
       &#125;
     &#125;)
   &#125;)
 &#125;)
 
 module.exports = router;
</code></pre>
<h5 id="项目引入MongoDB后的操作数据库语法"><a href="#项目引入MongoDB后的操作数据库语法" class="headerlink" title="项目引入MongoDB后的操作数据库语法"></a>项目引入MongoDB后的操作数据库语法</h5></li>
<li><p>注册时，向数据库中写入用户注册的数据</p>
<pre><code> model.connect(function(db)&#123; // 这里的data是form表单提交过来的数据
     db.collection(&#39;users&#39;).insert(data,function(err,ret)&#123;
       if(err)&#123;
         console.log(&#39;注册失败!&#39;,err);
         res.redirect(&#39;/regist&#39;);
       &#125;else&#123;
         res.redirect(&#39;/login&#39;);
       &#125;
     &#125;)
   &#125;)
</code></pre>
</li>
<li><p>登陆时，在数据库中查找对应的数据，看看是否和数据库中一致</p>
<pre><code> model.connect(function(db)&#123;  // 连接数据库
 // 进入users库,寻找data这个数据.toArray转换成数组
 db.collection(&#39;users&#39;).find(data).toArray(function(err,docs)&#123;
   // 如果报错,重新登陆
   if(err)&#123;
     res.redirect(&#39;/login&#39;);
   &#125;else&#123;  
     // 否则校验数据,如果是空数组,说明没找到这个用户,让他去重新登录.找到的话.登陆成功,进入主页面
     if(docs.length &gt; 0)&#123;
       // 登陆成功,进行session会话存储(将用户的信息进行存储)
       // 这样的话,前端每次去请求的时候,先去session里面找username,如果有值,那么证明他是登陆状态的,那么直接跳转登陆页面就好
       req.session.username = data.username;
       res.redirect(&#39;/&#39;); // 进入主页
     &#125;else&#123;
       res.redirect(&#39;/login&#39;);
     &#125;
   &#125;
 &#125;)
</code></pre>
<p>   })</p>
<h5 id="登录拦截-登陆成功后，会保存下用户的信息，在指定的时间里，用户再登录就不需要输入帐号和密码了"><a href="#登录拦截-登陆成功后，会保存下用户的信息，在指定的时间里，用户再登录就不需要输入帐号和密码了" class="headerlink" title="登录拦截(登陆成功后，会保存下用户的信息，在指定的时间里，用户再登录就不需要输入帐号和密码了)"></a>登录拦截(登陆成功后，会保存下用户的信息，在指定的时间里，用户再登录就不需要输入帐号和密码了)</h5></li>
<li><p>在这里用到了一个工具模块<code>express-session</code>—-服务端就是要通过session来保存</p>
</li>
<li><p>安装：<code>npm install express-session -S</code></p>
</li>
<li><p>配置session第一步：在app.js中引入<code>var session = require(&#39;express-session&#39;);</code></p>
</li>
<li><p>配置session第二步：在app.js中配置session中间件</p>
<pre><code> // session配置
 app.use(session(&#123;
   secret: &#39;wangrenke project&#39;, // 可以随便改的
   resave: false,
   saveUninitialized: true,
   cookie: &#123; maxAge: 1000 * 60 * 5 &#125;  // 在服务端使用session时,会向客户端写入cookie,所以这里要指定一个cookie的有效期(即用户登陆多久是有效的)这里是五分钟
 &#125;))
</code></pre>
</li>
<li><p>使用：在用户登陆成功的时候，要去做一个会话的存储，将用户用存进session中，这样我们前端再请求的时候，先去seesion中取username，如果有值，说明是登陆状态，直接跳过登陆页面，否则，跳转登陆页面重新登陆</p>
<pre><code> model.connect(function(db)&#123;  // 连接数据库
     // 进入users库,寻找data这个数据.toArray转换成数组
     db.collection(&#39;users&#39;).find(data).toArray(function(err,docs)&#123;
       // 如果报错,重新登陆
       if(err)&#123;
         res.redirect(&#39;/login&#39;);
       &#125;else&#123;  
         // 否则校验数据,如果是空数组,说明没找到这个用户,让他去重新注册.找到的话.登陆成功,进入主页面
         if(docs.length &gt; 0)&#123;
           // 登陆成功,进行session会话存储(将用户的信息进行存储)
           // 这样的话,前端每次去请求的时候,先去session里面找username,如果有值,那么证明他是登陆状态的,那么直接跳转登陆页面就好
           req.session.username = data.username;
           res.redirect(&#39;/&#39;); // 进入主页
         &#125;else&#123;
           res.redirect(&#39;/login&#39;);
         &#125;
       &#125;
     &#125;)
   &#125;)
</code></pre>
</li>
<li><p>设置登录拦截</p>
<pre><code> // 登录拦截(当进入系统的时候)
 app.get(&#39;*&#39;,function(req,res,next)&#123;
   var user = req.session.username;
   var path = req.path;
   console.log(&quot;session----user&quot;,user);
   // 如果是进的登录页或注册页,我们不拦截
   if(path != &#39;/login&#39; &amp;&amp; path != &#39;/regist&#39;)&#123;
     if(!user)&#123;
       res.redirect(&#39;/login&#39;);
     &#125;
   &#125;
   next();
 &#125;)
</code></pre>
<h5 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h5></li>
<li><p>清除session中的人员信息</p>
</li>
<li><p>跳转到登陆页面</p>
<pre><code> // 退出登录
 router.get(&#39;/loginout&#39;,function(req,res,next)&#123;
   req.session.username = null;
   res.redirect(&#39;/login&#39;);
 &#125;)
</code></pre>
<h5 id="增删改查（写文章发布功能）—-增"><a href="#增删改查（写文章发布功能）—-增" class="headerlink" title="增删改查（写文章发布功能）—-增"></a>增删改查（写文章发布功能）—-增</h5></li>
<li><p>写文章时需要用到富文本框插件xhEditor：<code>http://xheditor.com/download</code></p>
</li>
<li><p>下载xhEditor后，将xheditor文件夹放在我们项目中，pulice下。<br><img src="https://img-blog.csdnimg.cn/20200105224354753.png" alt="在这里插入图片描述"></p>
</li>
<li><p>使用：在相应html 文件中引入依赖的文件并且初始化xheditor</p>
<pre><code> &lt;script type=&quot;text/javascript&quot; src=&quot;/xheditor/jquery/jquery-1.4.4.min.js&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;/xheditor/xheditor-1.2.2.min.js&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;/xheditor/xheditor_lang/zh-cn.js&quot;&gt;&lt;/script&gt;
 &lt;script&gt;
 // 其实在本项目中基本上用前两个就行了
 $(&#39;#elm1&#39;).xheditor(&#123;
     tools: &#39;full&#39;,
     skin: &#39;default&#39;,
     showBlocktag: true,
     internalScript: false,
     internalStyle: false,
     width: 300,
     height: 200,
     loadCSS: &#39;http://xheditor.com/test.css&#39;,
     fullscreen: true,
     sourceMode: true,
     forcePtag: true,
     upImgUrl: &quot;upload.php&quot;,
     upImgExt: &quot;jpg,jpeg,gif,png&quot;
 &#125;);
</code></pre>
<p> </script></p>
</li>
<li><p>在textarea元素上加一个<code>class=&#39;xheditor&#39;</code>，这样刷新页面就可以看到效果了<br><img src="https://img-blog.csdnimg.cn/20200105225423243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>新建一个专门处理写文章的路由article.js。然后在app.js中配置article：<code>var articleRouter = require(&#39;./routes/article&#39;);app.use(&#39;/article&#39;, articleRouter);</code></p>
</li>
<li><p>写文章提交保存时，我们需要在mongodb数据库中，添加一条保存文章的数据。让我们提交保存时，能够存到数据库中。</p>
<h5 id="文章列表实现"><a href="#文章列表实现" class="headerlink" title="文章列表实现"></a>文章列表实现</h5></li>
<li><p>文章新增—-写文章实现后，保存到了mongodb中的数据库中。保存后肯定要跳转到主页，那么主页一定有一个文章列表。那么我们在渲染主页页面路由的时候。操作mongodb，从对应的列表数据中取出来。展示到页面上</p>
<pre><code> router.get(&#39;/&#39;, function(req, res, next) &#123;
   var username = req.session.username;
   model.connect(function(db)&#123;
     // 从库中，将articles文章张列表的数据。取出来转换成数组
     db.collection(&#39;articles&#39;).find().toArray(function(err,docs)&#123;
       console.log(&#39;文章列表------&#39;,docs);
       var list = docs; // 文章列表，用来传到index.ejs中
       res.render(&#39;index&#39;, &#123; msg: &#39;首页&#39;,username:username,list:list &#125;);
     &#125;);
   &#125;)
 &#125;);
</code></pre>
</li>
<li><p>我们存到库中的时间是毫秒。取出来也是，所以要使用一个插件用来转换时间：<code>npm install moment -S</code></p>
</li>
<li><p>使用<code>moment</code>：在需要用的文件引入<code>var moment = require(&quot;moment&quot;);</code></p>
<pre><code> model.connect(function(db)&#123;
     // 从库中，将articles文章张列表的数据。取出来转换成数组
     db.collection(&#39;articles&#39;).find().toArray(function(err,docs)&#123;
       console.log(&#39;文章列表------&#39;,docs);
       var list = docs; // 文章列表，用来传到index.ejs中
       list.map(function(item)&#123;
         item.time = moment(item.id).format(&quot;YYYY-MM-DD hh:mm:ss&quot;);
         return item;
       &#125;)
       res.render(&#39;index&#39;, &#123; msg: &#39;首页&#39;,username:username,list:list &#125;);
     &#125;);
   &#125;)
</code></pre>
<h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5></li>
<li><p>js部分</p>
<pre><code> router.get(&#39;/&#39;, function(req, res, next) &#123;
   var username = req.session.username || &#39;&#39;;
   // 当前页
   var pageIndex = req.query.pageIndex || 1;
   // 分页
   var data = &#123;
     total: 0,  // 文章总共的页数
     curPage: pageIndex,  // 当前页
     list: [],   // 当前页的文章列表
   &#125;
   var pageSize = 10;  // 每次请求10条数据
   model.connect(function(db)&#123;
     // 第一步：查询所有文章(从库中，将articles文章张列表的数据。取出来转换成数组)
     db.collection(&#39;articles&#39;).find().toArray(function(err,docs)&#123;
       // 文章列表总条数/每页显示的条数，向上取整。得到一共有多少页。
       data.total = Math.ceil(docs.length / pageSize);
       // 第二步：查询当前页的文章列表(分页查询)
       model.connect(function(db)&#123;
         // 重点：sort(&#123;_id:-1&#125;)表示倒序查询；limit(pageSize)表示限制多少条；skip((pageIndex - 1)*pageSize)从多少条开始查
         db.collection(&#39;articles&#39;).find().sort(&#123;_id:-1&#125;).limit(pageSize).skip((pageIndex - 1)*pageSize).toArray(function(err,doc2)&#123;
         // 这里考虑到如果删除的时候，当前页只剩一条数据，那么删完之后，需要把对应的页签也删掉。
           if(doc2.length == 0)&#123;
             res.redirect(&#39;/?pageIndex=&#39;+((pageIndex-1) || 1));
             return;
           &#125;
           doc2.map(function(item)&#123;
             item.time = moment(item.id).format(&quot;YYYY-MM-DD hh:mm:ss&quot;);
             return item;
           &#125;)
           data.list = doc2;
         res.render(&#39;index&#39;, &#123; msg: &#39;首页&#39;,username:username,data:data &#125;);
         &#125;)
       &#125;)
     &#125;);
   &#125;)
 &#125;);
</code></pre>
</li>
<li><p>ejs部分</p>
<pre><code> &lt;!-- 分页 --&gt;
   &lt;div class=&quot;page&quot;&gt;
     &lt;span&gt;共&lt;%= data.list.length %&gt;条&lt;/span&gt;
     &lt;a class=&quot;top&quot;&gt;上一页&lt;/a&gt;
     &lt;% for(var i = 1; i&lt;=data.total; i++)&#123; %&gt;
       &lt;a href=&quot;/?pageIndex=&lt;% i %&gt;&quot; class=&quot;pages&quot;&gt;&lt;%= i %&gt;&lt;/a&gt;
     &lt;% &#125; %&gt;
     &lt;a class=&quot;next&quot;&gt;下一页&lt;/a&gt;
   &lt;/div&gt;
</code></pre>
<h5 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h5><p> // ejs页面<br> <a href="/article/delete?id=<%= item.id %>&pageIndex=<%= data.curPage %>">删除</a><br> // /delete路由代码<br> // 删除<br> router.get(‘/delete’,function(req,res,next){<br>   var id = parseInt(req.query.id); // 页面传过来的需要删除的id<br>   var pageIndex = req.query.pageIndex; // 页面传过来的当前页<br>   model.connect(function(db){</p>
<pre><code>   // 删除对应id的数据deleteOne()
 db.collection(&#39;articles&#39;).deleteOne(&#123;id: id&#125;,function(err,ret)&#123;
   if(err)&#123;
     console.log(&#39;删除失败！！&#39;);
   &#125;else&#123;
     console.log(&#39;删除成功！！&#39;);
   &#125;
   // 删除完成后接着跳转对应的页面路由，这里有一个问题，就是如果删除时只剩一条数据，那么删掉之后需要把那一页的分页也删掉。这个限制在主体路由上。
   res.redirect(&#39;/?pageIndex=&#39;+pageIndex);
 &#125;)
</code></pre>
<p>   })<br> })</p>
<h5 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h5></li>
<li><p>点击编辑时，页面和新增共用一个页面</p>
</li>
<li><p>修改时：和新增共用一个接口，同一个数据路集合</p>
<pre><code> // 渲染写文章页面 || 编辑文章页面
 router.get(&#39;/write&#39;,function(req,res,next)&#123;
   var username = req.session.username;
   var id = parseInt(req.query.id);
   var pageIndex = req.query.pageIndex;
   var item = &#123;
     title:&#39;&#39;,  // 标题
     content:&#39;&#39;  // 内容
   &#125;
   if(id)&#123;  // 如果有id，那么就是编辑
     model.connect(function(db)&#123;
       db.collection(&#39;articles&#39;).findOne(&#123;id:id&#125;,function(err,docs)&#123;
         if(err)&#123;
           console.log(&#39;查询失败！！！！&#39;);
         &#125;else&#123;
           item = docs
           item.pageIndex = pageIndex;
           console.log(&#39;aaaaaaa-------&#39;,item);
           res.render(&#39;write&#39;,&#123;msg:&#39;编辑文章&#39;,username:username,item:item&#125;);
         &#125;
       &#125;)
     &#125;)
   &#125;else&#123;  // 否则就是新增
     res.render(&#39;write&#39;,&#123;msg:&#39;写文章&#39;,username:username,item:item&#125;);
   &#125;
 &#125;)
 /* 新增 || 编辑 */
 router.post(&#39;/add&#39;, function(req, res, next) &#123;
   var id = parseInt(req.body.id);
   if(id)&#123;  // 编辑
     var pageIndex = req.body.pageIndex;
     var title = req.body.title;
     var content = req.body.content;
     model.connect(function(db)&#123;
       db.collection(&#39;articles&#39;).updateOne(&#123;id:id&#125;,&#123;$set:&#123;title:title,content:content&#125;&#125;,function(err,ret)&#123;
           if(err)&#123;
               console.log(&#39;文章修改失败!&#39;,err);
           &#125;else&#123;
             console.log(&#39;文章修改成功!&#39;);
               res.redirect(&#39;/?pageIndex=&#39;+pageIndex);
           &#125;
       &#125;)
     &#125;)
   &#125;else&#123;   // 新增
     var data = &#123;
       title: req.body.title,  // 标题
       content: req.body.content,  // 内容
       id: Date.now(),   // 时间戳(什么时候提交的)
       username: req.session.username  // 提交的用户(是谁写的)
     &#125;
     model.connect(function(db)&#123;
       db.collection(&#39;articles&#39;).insert(data,function(err,ret)&#123;
           if(err)&#123;
               console.log(&#39;文章发布失败!&#39;,err);
               res.redirect(&#39;/write&#39;);
           &#125;else&#123;
               res.redirect(&#39;/&#39;);
           &#125;
       &#125;)
     &#125;)
   &#125;
 &#125;);
</code></pre>
<h5 id="文章详情页-点击标题可以查看详情"><a href="#文章详情页-点击标题可以查看详情" class="headerlink" title="文章详情页(点击标题可以查看详情)"></a>文章详情页(点击标题可以查看详情)</h5></li>
<li><p>基本逻辑同编辑一样</p>
</li>
<li><p>新建一个详情页</p>
<pre><code> &lt;td&gt;&lt;a href=&quot;/detail?id=&lt;%= item.id %&gt;&quot;&gt;&lt;%= item.title %&gt;&lt;/a&gt;&lt;/td&gt;
 ---------------------------------------------------
 // 查看文章详情页面
 router.get(&#39;/detail&#39;,function(req,res,next)&#123;
   var username = req.session.username;
   var id = parseInt(req.query.id);
   var item = &#123;
     title:&#39;&#39;,  // 标题
     username:&#39;&#39;,  // 作者
     id:&#39;&#39;,   // 时间&amp;&amp;id
     content:&#39;&#39;,  // 内容
   &#125;
   model.connect(function(db)&#123;
     db.collection(&#39;articles&#39;).findOne(&#123;id:id&#125;,function(err,docs)&#123;
       if(err)&#123;
         console.log(&#39;查询失败！！！！&#39;);
         res.redirect(&#39;/&#39;);
       &#125;else&#123;
         item = docs;
         item.time = moment(item.id).format(&#39;YYYY-MM-DD hh:mm:ss&#39;);
         res.render(&#39;detail&#39;,&#123;msg:&#39;详情页&#39;,username:username,item:item&#125;);
       &#125;
     &#125;)
   &#125;)
 &#125;)
</code></pre>
<h5 id="文件上传-也是通过富文本插件xheditor"><a href="#文件上传-也是通过富文本插件xheditor" class="headerlink" title="文件上传(也是通过富文本插件xheditor)"></a>文件上传(也是通过富文本插件xheditor)</h5></li>
<li><p>配置参数<br><img src="https://img-blog.csdnimg.cn/20200106172745511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>在服务端定义<code>/upload路由</code></p>
</li>
<li><p>处理文件上传需要用到第三方插件<code>multiparty</code>，上传固定格式必须要是<code>multiparty/form-data</code></p>
</li>
<li><p>下载：<code>npm install multiparty -S</code>,引入：<code>var multiparty = require(&#39;multiparty&#39;);</code>,实例化：<code>var form = new multiparty.Form()</code>实例化后就可以通过form对象，来解析请求体，把请求体中的文件解析处理。得到我们想要的结果；</p>
<pre><code> // 文件上传
 router.post(&#39;/upload&#39;,function(req,res,next)&#123;
   var form = new multiparty.Form();
   form.parse(req,function(err,fields,files)&#123;
     if(err)&#123;
       console.log(&#39;上传失败呗！！！&#39;);
     &#125;else&#123;
       console.log(&#39;文件列表----&#39;,files);
       // 这个就是拿到的上传的文件数据，我们需要使用fs管道流的方式，写入到硬盘
       var file = files.filedata[0];
       var newPath = &#39;/uploads/&#39;+file.originalFilename;  // 写入的路径加文件名字
       var rs = fs.createReadStream(file.path);  // 第一个流(读取的)--读的时候，就读带的路径就行
       var ws = fs.createWriteStream(&quot;./public&quot;+newPath);  // 第二个流(写入的)--写的时候要写在服务端-这里放在pulice下的uploads中
       rs.pipe(ws);
       // 当写入完成的时候，监听一个on(&#39;close&#39;)事件
       ws.on(&#39;close&#39;,function()&#123;
         console.log(&#39;文件上传成功！！！&#39;);
         res.send(&#123;err:&#39;&#39;,msg:newPath&#125;);
       &#125;)
     &#125;
   &#125;)
 &#125;)
</code></pre>
<h5 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h5><p>集合了注册、登录、登录拦截、会话存储、分页、结合mongodb增删改查</p>
</li>
</ol>
]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Nodejs</tag>
        <tag>Express</tag>
      </tags>
  </entry>
  <entry>
    <title>angularjs项目中的app.js的用处</title>
    <url>/2019/07/16/angularjs%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84app-js%E7%9A%84%E7%94%A8%E5%A4%84/</url>
    <content><![CDATA[<blockquote>
<p>1.公司中angular的项目，app.js是一个自加载函数，包含了angular的路由信息和angular程序启动时最先加载的代码(app.run(),当angular的程序启动时，最先执行run方法里的代码)<br>2.就目前来讲，包含了angular的路由信息和angular程序启动时最先加载的代码；下面代码体现</p>
</blockquote>
<pre><code>(function () &#123;
    &#39;use strict&#39;;   // 严格模式

    //Configuration for Angular UI routing.
    app.config([
        &#39;$stateProvider&#39;, // 基于ui-router的服务
        &#39;$urlRouterProvider&#39;,  // 路由操作
        &#39;$locationProvider&#39;, //   路由跳转
        &#39;$qProvider&#39;, 
        &#39;$httpProvider&#39;,   $http配置
        function ($stateProvider, $urlRouterProvider, $locationProvider, $qProvider, $httpProvider) &#123;
            $locationProvider.hashPrefix(&#39;&#39;);
            $urlRouterProvider.otherwise(&#39;/&#39;);//路径没有匹配的路由的时候，跳转到一个默认的路径
            $qProvider.errorOnUnhandledRejections(false);
            //注入拦截器
            $httpProvider.interceptors.push(&#39;authInterceptor&#39;);

            $stateProvider
                .state(&quot;error&quot;, &#123;
                    url: &quot;/error&quot;,
                    templateUrl: &quot;/App/views/error.html&quot;,
                    controller: &quot;errorCtr&quot;
                &#125;)
                .state(&#39;home&#39;, &#123;
                    url: &#39;/&#39;,
                    templateUrl: &#39;/App/views/index.html&#39;,
                    controller: &#39;indexCtr&#39;
                &#125;).state(&quot;index&quot;, &#123;
                    url: &quot;/index&quot;,
                    templateUrl: &#39;/App/views/index.html&#39;,
                    controller: &quot;indexCtr&quot;
                &#125;)
                .state(&#39;userManager&#39;, &#123;
                    url: &#39;/userManager&#39;,
                    templateUrl: &#39;/App/views/system/userManager.html&#39;,
                    controller: &#39;app.views.system.user&#39;
                &#125;)
                .state(&#39;roleManager&#39;, &#123;
                    url: &#39;/roleManager&#39;,
                    templateUrl: &#39;/App/views/system/roleManager.html&#39;,
                    controller: &#39;app.views.system.role&#39;
                &#125;)
                .state(&#39;logManager&#39;, &#123;
                    url: &#39;/logManager&#39;,
                    templateUrl: &#39;/App/views/system/logManager.html&#39;,
                    controller: &#39;app.views.system.log&#39;
                &#125;)
                .state(&#39;dataDic&#39;, &#123;
                    url: &#39;/dataDic&#39;,
                    templateUrl: &#39;/App/views/system/dataDic.html&#39;,
                    controller: &#39;app.views.system.data&#39;
                &#125;).state(&#39;menuManager&#39;, &#123;
                    url: &#39;/menuManager&#39;,
                    templateUrl: &#39;/App/views/system/menuManager.html&#39;,
                    controller: &#39;app.views.system.menu&#39;
                &#125;).state(&#39;deptAreaManager&#39;, &#123;
                    url: &#39;/deptAreaManager&#39;,
                    templateUrl: &#39;/App/views/system/deptAreaManager.html&#39;,
                    controller: &#39;app.views.system.deptArea&#39;
                &#125;).state(&#39;workPlanManager&#39;, &#123;
                    url: &#39;/workPlanManager&#39;,
                    templateUrl: &#39;/App/views/setTemplate/workPlanTemplate.html&#39;,
                    controller: &#39;app.views.setTemplate.workPlan&#39;
                &#125;).state(&#39;serviceProductManage&#39;, &#123;
                    url: &#39;/serviceProductManage&#39;,
                    templateUrl: &#39;/App/views/setServiceManage/serviceProductManage.html&#39;,
                    controller: &#39;app.views.setServiceManage.serviceProductManage&#39;
                &#125;).state(&#39;serviceItemManage&#39;, &#123;
                    url: &#39;/serviceItemManage&#39;,
                    templateUrl: &#39;/App/views/setServiceManage/serviceItemManage.html&#39;,
                    controller: &#39;app.views.setServiceManage.serviceItemManage&#39;
                &#125;).state(&#39;workProjectMnage&#39;, &#123;
                    url: &#39;/workProjectMnage&#39;,
                    templateUrl: &#39;/App/views/setServiceManage/workProjectMnage.html&#39;,
                    controller: &#39;app.views.setServiceManage.workProjectMnage&#39;
                &#125;).state(&#39;servicePackManage&#39;, &#123;
                    url: &#39;/servicePackManage&#39;,
                    templateUrl: &#39;/App/views/setServiceManage/servicePackManage.html&#39;,
                    controller: &#39;app.views.setServiceManage.servicePackManage&#39;
                &#125;).state(&#39;demandTemplate&#39;, &#123;
                    url: &#39;/demandTemplate&#39;,
                    templateUrl: &#39;/App/views/setTemplate/demandTemplate.html&#39;,
                    controller: &#39;app.views.setTemplate.demandTemplate&#39;
                &#125;).state(&#39;createInnerProject&#39;, &#123;
                    url: &#39;/createInnerProject&#39;,
                    templateUrl: &#39;/App/views/platProjectManage/createInnerProject.html&#39;,
                    controller: &#39;app.views.platProjectManage.createInnerProject&#39;
                &#125;).state(&#39;lookRequisitionForm&#39;, &#123;
                    url: &#39;/lookRequisitionForm&#39;,
                    templateUrl: &#39;/App/views/platServiceRequestForm/lookRequisitionForm.html&#39;,
                    controller: &#39;app.views.platServiceRequestForm.lookRequisitionForm&#39;
                &#125;).state(&#39;createRequestForm&#39;, &#123;
                    url: &#39;/createRequestForm/:source&#39;,
                    templateUrl: &#39;/App/views/platServiceRequestForm/createRequestForm.html&#39;,
                    controller: &#39;app.views.platServiceRequestForm.createRequestForm&#39;
                &#125;).state(&#39;icon&#39;, &#123;
                    url: &#39;/icon&#39;,
                    templateUrl: &#39;/App/views/system/icon.html&#39;,
                    controller: &#39;&#39;
                &#125;).state(&#39;projectList&#39;, &#123;
                    url: &#39;/projectList&#39;,
                    templateUrl: &#39;/App/views/platProjectManage/projectList.html&#39;,
                    controller: &#39;app.views.platProjectManage.projectList&#39;
                &#125;).state(&#39;projectDocumentManage&#39;, &#123;
                    url: &#39;/projectDocumentManage&#39;,
                    templateUrl: &#39;/App/views/platProjectManage/projectDocumentManage.html&#39;,
                    controller: &#39;app.views.platProjectManage.projectDocumentManage&#39;
                &#125;).state(&#39;deliverablesAudit&#39;, &#123;
                    url: &#39;/deliverablesAudit&#39;,
                    templateUrl: &#39;/App/views/platProjectManage/deliverablesAudit.html&#39;,
                    controller: &#39;app.views.platProjectManage.deliverablesAudit&#39;
                &#125;)
                .state(&#39;assignRequirement&#39;, &#123;
                    url: &#39;/assignRequirement&#39;,
                    templateUrl: &#39;/App/views/dispatchManagement/assignRequirement.html&#39;,
                    controller: &#39;app.views.dispatchManagement.assignRequirement&#39;
                &#125;)
                .state(&#39;planOrderSearch&#39;, &#123;
                    url: &#39;/planOrderSearch&#39;,
                    templateUrl: &#39;/App/views/dispatchManagement/planOrderSearch.html&#39;,
                    controller: &#39;app.views.dispatchManagement.planOrderSearch&#39;
                &#125;)
                .state(&#39;task&#39;, &#123;
                    url: &#39;/task/:typeid&#39;,
                    templateUrl: &#39;/App/views/platMyProject/taskToDo.html&#39;,
                    controller: &#39;app.views.platMyProject.taskToDo&#39;
                &#125;).state(&#39;transSupport&#39;, &#123;
                    url: &#39;/transSupport&#39;,
                    templateUrl: &#39;/App/views/dispatchManagement/transSupport.html&#39;,
                    controller: &#39;app.views.dispatchManagement.transSupport&#39;
                &#125;).state(&#39;myWorkOrder&#39;, &#123;
                    url: &#39;/myWorkOrder&#39;,
                    templateUrl: &#39;/App/views/platMyWorkOrder/myWorkOrder.html&#39;,
                    controller: &#39;app.views.platMyWorkOrder.myWorkOrder&#39;
                &#125;).state(&#39;workOrderInquire&#39;, &#123;
                    url: &#39;/workOrderInquire&#39;,
                    templateUrl: &#39;/App/views/dispatchManagement/workOrderInquire.html&#39;,
                    controller: &#39;app.views.dispatchManagement.workOrderInquire&#39;
                &#125;).state(&#39;staffSchedule&#39;, &#123;
                    url: &#39;/staffSchedule&#39;,
                    templateUrl: &#39;/App/views/dispatchManagement/staffSchedule.html&#39;,
                    controller: &#39;app.views.dispatchManagement.staffSchedule&#39;
                &#125;).state(&#39;synthesizeInquire&#39;, &#123;
                    url: &#39;/synthesizeInquire&#39;,
                    templateUrl: &#39;/App/views/platComprehensiveInquiry/synthesizeInquire.html&#39;,
                    controller: &#39;app.views.platComprehensiveInquiry.synthesizeInquire&#39;
                &#125;).state(&#39;resourceApplication&#39;, &#123;
                    url: &#39;/resourceApplication&#39;,
                    templateUrl: &#39;/App/views/platMyProject/resourceApplication.html&#39;,
                    controller: &#39;app.views.platMyProject.resourceApplication&#39;
                &#125;).state(&#39;assignWorkOrder&#39;, &#123;
                    url: &#39;/assignWorkOrder&#39;,
                    templateUrl: &#39;/App/views/dispatchManagement/assignWorkOrder.html&#39;,
                    controller: &#39;app.views.dispatchManagement.assignWorkOrder&#39;
                &#125;).state(&#39;specWhAccount&#39;, &#123;
                    url: &#39;/specWhAccount&#39;,
                    templateUrl: &#39;/App/views/setServiceManage/specWorkHoursAccount.html&#39;,
                    controller: &#39;app.views.setServiceManage.specWorkHoursAccount&#39;
                &#125;).state(&#39;importErpData&#39;, &#123;
                    url: &#39;/importErpData&#39;,
                    templateUrl: &#39;/App/views/system/importErpData.html&#39;,
                    controller: &#39;app.views.system.importErpData&#39;
                &#125;).state(&#39;workHourRate&#39;, &#123;
                    url: &#39;/workHourRate&#39;,
                    templateUrl: &#39;/App/views/setServiceManage/workHourRateManage.html&#39;,
                    controller: &#39;app.views.setServiceManage.workHourRate&#39;
                &#125;);
        &#125;
    ]);
    //程序启动时，获取用户信息
    app.run([&quot;$rootScope&quot;, &quot;$cookies&quot;, &quot;serverDomain&quot;, &quot;httpService&quot;, &quot;$location&quot;, function ($rootScope, $cookies, serverDomain, httpService, $location) &#123;
        //首先判断sessionStorage中是否已经有user，有的话则不再请求
        if (sessionStorage.getItem(&quot;user&quot;) &amp;&amp; sessionStorage.getItem(&quot;pId&quot;)) &#123;
            API.log(&quot;已登陆系统&quot;);
            if (!$rootScope.user) &#123;
                API.log(&quot;重新写入rootScope&quot;);
                $rootScope.user = JSON.parse(sessionStorage.getItem(&quot;user&quot;));
            &#125;

            //获取数据字典
            getDicData();

            //获得工程线下所有组织架构
            getOrgTreeProjectLine();
            return;
        &#125;

        var user = &#123;
            employeeNumber: &quot;&quot;,//员工工号
            name: &quot;&quot;,//用户姓名
            passportId: &quot;&quot;,//84380281-EA1D-4774-BA80-472349367725
            passportName: &quot;&quot;,//用户It编码
            organizationId: 0,//所在部门id
            organizationName: &quot;&quot;,//所在部门名称
            organizationIdPath: &quot;&quot;//所在部门，部门ID全路径
        &#125;

        var cookieName = &#39;XSRF-PASSPORTNAME&#39;;
        var passport_Name = &#39;&#39;;
        //检查cookie是否存在
        if ($cookies.get(cookieName) == undefined || $cookies.get(cookieName) == &#39;&#39;) &#123;
            $location.path(&#39;/index&#39;);
        &#125;
        else &#123;
            passport_Name = $cookies.get(cookieName);
        &#125;
        var paramData = &#123; passportName: passport_Name &#125;;
        var url = serverDomain + &quot;api/services/app/SbpUser/GetUserInfoByPassportName&quot;;
        httpService.Get(url, paramData, function (data) &#123;
            if (data.success) &#123;
                user.employeeNumber = data.result.employeeNumber;
                user.name = data.result.name;
                user.passportId = data.result.passportId;
                user.passportName = data.result.passportName;
                user.organizationId = data.result.organizationId;
                user.organizationName = data.result.organizationName;
                user.organizationIdPath = data.result.organizationIdPath;
                user.organizationIdPathArray = data.result.organizationIdPath.split(&quot;/&quot;);
                user.roles = data.result.roles;
                user.position = data.result.position;

                //写sessionStorage
                sessionStorage.setItem(&quot;user&quot;, JSON.stringify(user));
                sessionStorage.setItem(&quot;pId&quot;, user.passportId);

                //写$rootScope
                $rootScope.user = user;

                //获取数据字典
                getDicData();

                //获得工程线下所有组织架构
                getOrgTreeProjectLine();

            &#125;
        &#125;, function (data) &#123;
            console.error(data);
        &#125;);

        //获取数据字典
        function getDicData() &#123;
            var dics = localStorage.getItem(&quot;dictionary&quot;);
            if (dics &amp;&amp; dics !== &quot;undefined&quot;) &#123;
                dics = JSON.parse(dics);
                if (!$rootScope.dictionary) &#123;
                    $rootScope.dictionary = dics;
                &#125;
                return;
            &#125;

            var getDicUrl = serverDomain + &quot;api/services/app/DictionaryType/GetDictionaryTypeList&quot;;
            httpService.Get(getDicUrl, &#123;&#125;, function (rst) &#123;
                if (rst.success) &#123;
                    var dicArr = rst.result || [];
                    var dicJson = &#123;&#125;;
                    dicArr.forEach(function (item, index) &#123;
                        //字典项列表统一按照sort的值升序排序
                        item.dictionaries = item.dictionaries.sort(function (first, two) &#123;
                            if (first.sort &lt; two.sort) &#123;
                                return -1;
                            &#125;
                            if (first.sort &gt; two.sort) &#123;
                                return 1;
                            &#125;
                            return 0;
                        &#125;);
                        dicJson[item.typeCode] = &#123; id: item.id, typeName: item.typeName, remark: item.remark, dictionaries: item.dictionaries &#125;;

                    &#125;);

                    localStorage.setItem(&quot;dictionary&quot;, JSON.stringify(dicJson));
                    $rootScope.dictionary = dicJson;
                &#125;
            &#125;)

        &#125;

        //获得工程线下所有组织架构
        function getOrgTreeProjectLine() &#123;
            var orgs = localStorage.getItem(&quot;organization&quot;);
            if (orgs &amp;&amp; orgs !== &quot;undefined&quot;) &#123;
                orgs = JSON.parse(orgs);
                if (!$rootScope.organization) &#123;
                    $rootScope.organization = orgs;
                &#125;
                return;
            &#125;
            //获取工程线下（oaOrgId为5）组织树的数据
            var url = serverDomain + &quot;api/services/app/SbpOrg/GetOrgTree&quot;;
            var data = &#123; oaOrgId: 5 &#125;;
            httpService.Get(url, data, function (data) &#123;
                if (data.success) &#123;
                    localStorage.setItem(&quot;organization&quot;, JSON.stringify(data.result.children));
                    //不显示root节点
                    $rootScope.organization = data.result.children;
                &#125;
            &#125;, function (err) &#123; &#125;);
        &#125;

        //统一配置math.js
        math.config(&#123;
            number: &#39;BigNumber&#39;,
            // &#39;number&#39; (default), 
            precision: 20
        &#125;);

        //路由监听事件  
        $rootScope.$on(&#39;$stateChangeStart&#39;,
            function (event, toState, toParams, fromState, fromParams) &#123;
                API.log(&quot;Router change&quot;);
                //API.log(&quot;fromParams:&quot;, fromParams);
                //API.log($stateParams.type);
            &#125;)
        //当模板解析完成后触发  
        $rootScope.$on(&#39;$stateChangeSuccess&#39;, function (event, toState, toParams, fromState, fromParams) &#123;
            API.log(&quot;Router changed&quot;);
            window.scrollTo(0,0);
            abp.ui.clearBusy($(&#39;#mianBody&#39;));//清除loading
        &#125;)

        // $stateChangeError  当模板解析过程中发生错误时触发  
        $rootScope.$on(&#39;$stateChangeError&#39;, function (event, toState, toParams, fromState, fromParams, error) &#123;

        &#125;)

    &#125;])
&#125;)();
</code></pre>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap-select.js控件，支持下拉多选搜索，N种样式</title>
    <url>/2019/07/25/bootstrap-select-js%E6%8E%A7%E4%BB%B6%EF%BC%8C%E6%94%AF%E6%8C%81%E4%B8%8B%E6%8B%89%E5%A4%9A%E9%80%89%E6%90%9C%E7%B4%A2%EF%BC%8CN%E7%A7%8D%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>参考网址：<a href="https://www.cnblogs.com/landeanfen/p/7457283.html#_label1">https://www.cnblogs.com/landeanfen/p/7457283.html#_label1</a></p>
</blockquote>
<p><strong>阅读目录</strong></p>
<blockquote>
<p>一、组件开源地址以及API说明<br>二、组件效果示例<br>三、使用示例<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、基础示例<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、其他效果示例<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、组件取值赋值<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4、组件其他用法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5、组件封装<br>四、源码下载<br>五、总结</p>
</blockquote>
<p><strong>正文</strong></p>
<blockquote>
<p>前言：之前分享过两篇bootstrap下拉框的组件：JS组件系列——两种bootstrap multiselect组件大比拼  和 JS组件系列——Bootstrap Select2组件使用小结 ，收到很多园友的关注和提问，最后总结这两篇里面的下拉框组件都存在一些大大小小的问题，比如两种bootstrap mutiselect组件，界面渲染效果略差；再比如select2一些兼容性问题、多选的取值赋值等问题都困扰着博主以及很多园友，项目里面的下拉框很早就替换为今天介绍的这款组件，所以今天介绍给大家，让大家多一个选择也好！感谢大家的持续关注！</p>
</blockquote>
<blockquote>
<p>说点题外话。本来这篇早就准备写了，不料最近项目准备走前端化开发路线，可忙坏博主了，一时间，Node.js、npm、webpack、react、react-router、ant.design等等技术都得学呀，脑子真是个好东西，能够一下子容纳这么多新知识，虽然各种不适应，但时间一长就慢慢习惯了，所幸博主经常关注这方面的技术，所以学起来并没有那么吃力。关于vue和react，很多群友都讨论过它们的优势和劣势，其实博主觉得说不上哪个组件更优，关键得看项目适应哪种生态，我们选用react很大一部分原因就是看中了ant.design的效果和丰富的组件库。好了，再说就跑题了，以后博主分享搭建前端环境的时候再来细说。</p>
</blockquote>
<blockquote>
<p>一、组件开源地址以及API说明<br>bootstrap-select开源地址：<a href="https://github.com/silviomoreto/bootstrap-select">https://github.com/silviomoreto/bootstrap-select</a><br>bootstrap-select使用示例：<a href="http://silviomoreto.github.io/bootstrap-select/examples/">http://silviomoreto.github.io/bootstrap-select/examples/</a><br>bootstrap-select文档说明：<a href="http://silviomoreto.github.io/bootstrap-select/options/">http://silviomoreto.github.io/bootstrap-select/options/</a></p>
</blockquote>
<p>二、组件效果示例<br>一睹初容<br><img src="https://img-blog.csdnimg.cn/20190725105515475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>多选效果<br><img src="https://img-blog.csdnimg.cn/2019072510561640.gif" alt="在这里插入图片描述"></p>
<p>可配置搜索功能<br><img src="https://img-blog.csdnimg.cn/20190725110746131.gif" alt="在这里插入图片描述"></p>
<p>分组选中<br><img src="https://img-blog.csdnimg.cn/20190725110815121.gif" alt="在这里插入图片描述"></p>
<p>设置最多选中项为2个<br><img src="https://img-blog.csdnimg.cn/20190725110944854.gif" alt="在这里插入图片描述"></p>
<p> 自定义说明Title，比如我们定义为“请选择省份”<br><img src="https://img-blog.csdnimg.cn/20190725111004440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 某些情况下如果多选的数量比较多，我们可以显示“缩略模式”。比如当选择了两项以上的时候<br><img src="https://img-blog.csdnimg.cn/20190725111023909.gif" alt="在这里插入图片描述"></p>
<p>自定义样式<br><img src="https://img-blog.csdnimg.cn/20190725111045739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>显示图标加文字<br><img src="https://img-blog.csdnimg.cn/20190725111311863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>显示带颜色的标签<br><img src="https://img-blog.csdnimg.cn/20190725111332499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190725111344927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>展开最多显示可配置的个数，不如最多显示3项<br><img src="https://img-blog.csdnimg.cn/20190725111449211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 全选和反选<br><img src="https://img-blog.csdnimg.cn/20190725111502714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>以上都是些常用功能，更多效果可以查看官方示例！</p>
</blockquote>
<p><strong>三、使用示例</strong></p>
<blockquote>
<p>1、基础示例<br>既然是bootstrap-select，组件肯定是依赖bootstrap的，而bootstrap又是依赖jquery的，所以使用组件必须引用如下文件。</p>
</blockquote>
<pre><code>&lt;link href=&quot;Content/bootstrap/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;link href=&quot;Content/bootstrap-select/css/bootstrap-select.min.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script src=&quot;Content/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;Content/bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;Content/bootstrap-select/js/bootstrap-select.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;Content/bootstrap-select/js/i18n/defaults-zh_CN.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<blockquote>
<p>最后一个文件 defaults-zh_CN.min.js 非必需，是组件中文化的时候才需要引用。<br>使用就更加简单了，不用任何已经js，直接使用class就可以初始化。</p>
</blockquote>
<pre><code>&lt;select class=&quot;selectpicker&quot;&gt;
    &lt;option value=&quot;1&quot;&gt;广东省&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;广西省&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;福建省&lt;/option&gt;
    &lt;option value=&quot;4&quot;&gt;湖南省&lt;/option&gt;
    &lt;option value=&quot;5&quot;&gt;山东省&lt;/option&gt;                            
&lt;/select&gt;
</code></pre>
<p>给一个select标签加上selectpicker样式即可。</p>
<p>多选就不用多说了</p>
<pre><code>&lt;select class=&quot;selectpicker&quot; multiple&gt;
    &lt;option value=&quot;1&quot;&gt;广东省&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;广西省&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;福建省&lt;/option&gt;
    &lt;option value=&quot;4&quot;&gt;湖南省&lt;/option&gt;
    &lt;option value=&quot;5&quot;&gt;山东省&lt;/option&gt;                            
&lt;/select&gt;
</code></pre>
<p><strong>2、其他效果示例</strong></p>
<blockquote>
<p>上面是最简单的使用，下面就将一些常用的效果给出代码示例，高手请直接跳过此段。<br>给组件加搜索功能</p>
</blockquote>
<pre><code>&lt;select class=&quot;selectpicker&quot; multiple data-live-search=&quot;true&quot;&gt;
    &lt;option value=&quot;1&quot;&gt;广东省&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;广西省&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;福建省&lt;/option&gt;
    &lt;option value=&quot;4&quot;&gt;湖南省&lt;/option&gt;
    &lt;option value=&quot;5&quot;&gt;山东省&lt;/option&gt;                            
&lt;/select&gt;
</code></pre>
<p>选项分组</p>
<pre><code>&lt;select class=&quot;form-control selectpicker&quot; data-live-search=&quot;true&quot; multiple&gt;
        &lt;optgroup label=&quot;广东省&quot;&gt;
                &lt;option value=&quot;1&quot;&gt;广州市&lt;/option&gt;
                &lt;option value=&quot;2&quot;&gt;深圳市&lt;/option&gt;
                &lt;option value=&quot;3&quot;&gt;珠海市&lt;/option&gt;
         &lt;/optgroup&gt;   
          &lt;optgroup label=&quot;广西&quot;&gt;
                  &lt;option value=&quot;1&quot;&gt;南宁市&lt;/option&gt;
                  &lt;option value=&quot;2&quot;&gt;柳州&lt;/option&gt;
                  &lt;option value=&quot;3&quot;&gt;桂林市&lt;/option&gt;
           &lt;/optgroup&gt;  
           &lt;optgroup label=&quot;山东&quot;&gt;
                   &lt;option value=&quot;1&quot;&gt;烟台&lt;/option&gt;
                   &lt;option value=&quot;2&quot;&gt;青岛&lt;/option&gt;
                   &lt;option value=&quot;3&quot;&gt;济南&lt;/option&gt;
             &lt;/optgroup&gt;                          
&lt;/select&gt;
</code></pre>
<p>设置最多选中项为2个</p>
<pre><code>&lt;select class=&quot;selectpicker&quot; multiple data-live-search=&quot;true&quot; data-max-options=&quot;2&quot;&gt;
    &lt;option value=&quot;1&quot;&gt;广东省&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;广西省&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;福建省&lt;/option&gt;
    &lt;option value=&quot;4&quot;&gt;湖南省&lt;/option&gt;
    &lt;option value=&quot;5&quot;&gt;山东省&lt;/option&gt;                            
&lt;/select&gt;
</code></pre>
<p><strong>缩略模式，比如当选中值大于3个的时候只显示选中项的个数，注意这个属性只对多选生效</strong></p>
<pre><code>&lt;select class=&quot;selectpicker&quot; multiple data-live-search=&quot;true&quot; data-selected-text-format=&quot;count &gt; 3&quot;&gt;
    &lt;option value=&quot;1&quot;&gt;广东省&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;广西省&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;福建省&lt;/option&gt;
    &lt;option value=&quot;4&quot;&gt;湖南省&lt;/option&gt;
    &lt;option value=&quot;5&quot;&gt;山东省&lt;/option&gt;                            
&lt;/select&gt;
</code></pre>
<p><strong>显示带颜色的标签</strong></p>
<pre><code> &lt;select class=&quot;form-control selectpicker&quot; title=&quot;请选择省份&quot; multiple&gt;
                        &lt;option data-content=&quot;&lt;span class=&#39;label label-success&#39;&gt;广东省&lt;/span&gt;&quot;&gt;广东省&lt;/option&gt;    
                        &lt;option data-content=&quot;&lt;span class=&#39;label label-info&#39;&gt;广西省&lt;/span&gt;&quot;&gt;广西省&lt;/option&gt;  
                        &lt;option data-content=&quot;&lt;span class=&#39;label label-warning&#39;&gt;福建省&lt;/span&gt;&quot;&gt;福建省&lt;/option&gt;  
                        &lt;option data-content=&quot;&lt;span class=&#39;label label-danger&#39;&gt;山东省&lt;/span&gt;&quot;&gt;山东省&lt;/option&gt;                        
&lt;/select&gt;
</code></pre>
<p>默认样式选择</p>
<pre><code>&lt;select class=&quot;selectpicker&quot; data-style=&quot;btn-primary&quot;&gt;
  ...
&lt;/select&gt;

&lt;select class=&quot;selectpicker&quot; data-style=&quot;btn-info&quot;&gt;
  ...
&lt;/select&gt;

&lt;select class=&quot;selectpicker&quot; data-style=&quot;btn-success&quot;&gt;
  ...
&lt;/select&gt;

&lt;select class=&quot;selectpicker&quot; data-style=&quot;btn-warning&quot;&gt;
  ...
&lt;/select&gt;

&lt;select class=&quot;selectpicker&quot; data-style=&quot;btn-danger&quot;&gt;
  ...
&lt;/select&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20190725112647363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3、组件取值赋值</strong></p>
<p>上面都是组件的初始化的一些东西，一般情况下，我们需要对组件进行取值和赋值，我们应该如何操作呢。</p>
<blockquote>
<p>3.1、组件取值</p>
</blockquote>
<p>关于组件取值保持原生的jquery方法，比如 <strong>var value = $(‘#sel’).val();</strong> 这样是不是很简单，需要注意的是，如果是多选，这里得到的value变量是一个数组变量，形如 [‘1’,’2’,’3’]。</p>
<blockquote>
<p>3.2、组件赋值</p>
</blockquote>
<p>组件赋值就需要稍微变换一下了，如果你直接 <strong>$(‘#sel’).val(‘1’);</strong> 这样赋值将会无效，正确的赋值方法为：</p>
<blockquote>
<p>$(‘.selectpicker’).selectpicker(‘val’, ‘1’);</p>
</blockquote>
<p>在一些级联选择的使用场景中，经常需要在赋值的时候顺便触发一下组件的change事件，我们可以这么做。</p>
<blockquote>
<p>$(‘.selectpicker’).selectpicker(‘val’, ‘1’).trigger(“change”);</p>
</blockquote>
<p>如果是多选的赋值，也是一样</p>
<blockquote>
<p>$(‘.selectpicker’).selectpicker(‘val’, [‘1’,’2’,’3’]).trigger(“change”);</p>
</blockquote>
<p><strong>4、组件其他用法</strong></p>
<blockquote>
<p>全选： $(‘.selectpicker’).selectpicker(‘selectAll’);<br>反选： $(‘.selectpicker’).selectpicker(‘deselectAll’);<br>适应手机模式： $(‘.selectpicker’).selectpicker(‘mobile’); </p>
</blockquote>
<p>组件禁用：</p>
<blockquote>
<p>$(‘.disable-example’).prop(‘disabled’, true);<br>$(‘.disable-example’).selectpicker(‘refresh’);</p>
</blockquote>
<p>组件启用：</p>
<blockquote>
<p>$(‘.disable-example’).prop(‘disabled’, false);<br>$(‘.disable-example’).selectpicker(‘refresh’);</p>
</blockquote>
<p>组件销毁：</p>
<blockquote>
<p>$(‘.selectpicker’).selectpicker(‘destroy’);</p>
</blockquote>
<p><strong>5、组件封装</strong></p>
<blockquote>
<p>上面关于组件的初始化介绍了那么多，都是通过class=’selectpicker’去做初始化的，很多情况下，我们的select的option都是动态获取，然后再初始化的，于是乎博主仔细寻找api，看里面是否有远程获取数据，很遗憾，组件没有支持这种远程获取数据的方法。没关系，我们自己封装一个ajax请求，然后动态构造option又有多难呢？这里又得提一下原来那篇封装js组件的文章了，我们按照那篇文章的思路封装一个不就好了。以下给出一个参考。</p>
</blockquote>
<pre><code>(function ($) &#123;
    //1.定义jquery的扩展方法bootstrapSelect
   $.fn.bootstrapSelect = function (options, param) &#123;
       if (typeof options == &#39;string&#39;) &#123;
           return $.fn.bootstrapSelect.methods[options](this, param);
       &#125;
       //2.将调用时候传过来的参数和default参数合并
       options = $.extend(&#123;&#125;, $.fn.bootstrapSelect.defaults, options || &#123;&#125;);
       //3.添加默认值
       var target = $(this);
       if (!target.hasClass(&quot;selectpicker&quot;)) target.addClass(&quot;selectpicker&quot;);
       target.attr(&#39;valuefield&#39;, options.valueField);
       target.attr(&#39;textfield&#39;, options.textField);
       target.empty();
       var option = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);
       option.attr(&#39;value&#39;, &#39;&#39;);
       option.text(options.placeholder);
       target.append(option);
       //4.判断用户传过来的参数列表里面是否包含数据data数据集，如果包含，不用发ajax从后台取，否则否送ajax从后台取数据
       if (options.data) &#123;
           init(target, options.data);
       &#125;
       else &#123;
           //var param = &#123;&#125;;
           options.onBeforeLoad.call(target, options.param);
           if (!options.url) return;
           $.getJSON(options.url, options.param, function (data) &#123;
               init(target, data);
           &#125;);
       &#125;
       function init(target, data) &#123;
           $.each(data, function (i, item) &#123;
               var option = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);
               option.attr(&#39;value&#39;, item[options.valueField]);
               option.text(item[options.textField]);
               target.append(option);
           &#125;);
           options.onLoadSuccess.call(target);
       &#125;
       target.unbind(&quot;change&quot;);
       target.on(&quot;change&quot;, function (e) &#123;
           if (options.onChange)
               return options.onChange(target.val());
       &#125;);
   &#125;

   //5.如果传过来的是字符串，代表调用方法。
   $.fn.bootstrapSelect.methods = &#123;
       getValue: function (jq) &#123;
           return jq.val();
       &#125;,
       setValue: function (jq, param) &#123;
           jq.val(param);
       &#125;,
       load: function (jq, url) &#123;
           $.getJSON(url, function (data) &#123;
               jq.empty();
               var option = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);
               option.attr(&#39;value&#39;, &#39;&#39;);
               option.text(&#39;请选择&#39;);
               jq.append(option);
               $.each(data, function (i, item) &#123;
                   var option = $(&#39;&lt;option&gt;&lt;/option&gt;&#39;);
                   option.attr(&#39;value&#39;, item[jq.attr(&#39;valuefield&#39;)]);
                   option.text(item[jq.attr(&#39;textfield&#39;)]);
                   jq.append(option);
               &#125;);
           &#125;);
       &#125;
   &#125;;

   //6.默认参数列表
   $.fn.bootstrapSelect.defaults = &#123;
       url: null,
       param: null,
       data: null,
       valueField: &#39;value&#39;,
       textField: &#39;text&#39;,
       placeholder: &#39;请选择&#39;,
       
   &#125;;

   //初始化
   $(&quot;.selectpicker&quot;).each(function () &#123;
    var target = $(this);
    target.attr(&quot;title&quot;, $.fn.select.defaults.placeholder);
    target.selectpicker();
&#125;);
&#125;)(jQuery);
</code></pre>
<p> 这样封装之后，我们直接使用如下代码即可初始化组件。</p>
<pre><code>$(&#39;#sel&#39;).bootstrapSelect(&#123;
    url:&#39;/a/b&#39;,
    data: &#123;&#125;,
    valueField: &#39;value&#39;,
    textField: &#39;text&#39;,
&#125;);
</code></pre>
<p><strong>四、总结</strong></p>
<blockquote>
<p>至此，本文结束，多个bootstrap的select组件，纵观所有，还是这个稍微好用一些，不管是兼容性还是实现效果都还不错，有兴趣的可以用起来试试</p>
</blockquote>
<p><strong>六、遇到的问题</strong></p>
<blockquote>
<p><strong>1</strong>.在项目中使用这个控件遇到的问题一：在tab页签里使用，初始化第一个页签有下拉框，其他页签并没有<br>原因：因为元素id只有一个，而每个页签下都有一个下拉框元素，id是唯一的，所以初始化的时候，选不到后面的元素<br>解决方法：给不同的id或给class，初始化： $(‘#selectContacts0’).selectpicker();<br><img src="https://img-blog.csdnimg.cn/20190815105135704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2</strong>.在项目中使用这个空间遇到的问题二：点击每个页签时，总是保留上个页签选中的状态<br>原因：点击每个页签时，需要把当前页签下的多选框清空并初始化<br>解决方法：点击每个页签时，执行：<br>$(“.selectpicker”).selectpicker(‘val’, ‘’);//回到初始状态<br>$(“.selectpicker).selectpicker(‘refresh’);<br><strong>3</strong>.在项目中使用这个空间遇到的问题三：一键全选和一键反选(自带功能显示是英文，可以自己手动换中文);<br>解决方法：在多选框上加data-actions-box=”true”属性，就是反选功能,用jquery选中反选元素手动赋值为中文<br><img src="https://img-blog.csdnimg.cn/20190815105424499.png" alt="在这里插入图片描述"></p>
</blockquote>
]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>bootstrap-select</tag>
      </tags>
  </entry>
  <entry>
    <title>利用基于angularjs的angular-file-upload.min.js控件实现上传文件</title>
    <url>/2019/07/10/%E5%88%A9%E7%94%A8%E5%9F%BA%E4%BA%8Eangularjs%E7%9A%84angular-file-upload-min-js%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>参考博客: <a href="https://blog.csdn.net/zcl_love_wx/article/details/51692819">https://blog.csdn.net/zcl_love_wx/article/details/51692819</a></strong></p>
<blockquote>
<p>相关网址:<br>官网：<a href="http://www.bootcdn.cn/angular-file-upload/readme/">http://www.bootcdn.cn/angular-file-upload/readme/</a><br>API ： <a href="https://github.com/nervgh/angular-file-upload/wiki/Module-API">https://github.com/nervgh/angular-file-upload/wiki/Module-API</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://segmentfault.com/a/1190000016113163?utm_source=tag-newest">https://segmentfault.com/a/1190000016113163?utm_source=tag-newest</a><br>插件：<br>示例：<a href="http://nervgh.github.io/pages/angular-file-upload/examples/simple/">http://nervgh.github.io/pages/angular-file-upload/examples/simple/</a></p>
</blockquote>
<p><strong>个人总结</strong></p>
<blockquote>
<p>今天跟大家分享的是一个依赖于angular的上传控件。angular-file-upload.min.js,结合公司的项目和我这段时间的查看文档案例,在这里总结一下;<br>项目angular项目中用到的上传文件控件，大概需要实现的样式是这样子的，如下：</p>
</blockquote>
<p><strong>配置步骤</strong></p>
<blockquote>
<p>1.首先引入angular.js<br>2.引入angular-file-upload.min.js控件<br>3.声明angular实例时;需要注入angularFileUpload依赖<br>&nbsp;&nbsp;&nbsp;例如: var app=angular.module(‘app’,[‘angularFileUpload’]);<br>4.在用到的controller中注入依赖服务FileUploader;<br>&nbsp;&nbsp;&nbsp;例如:app.controller(‘appController’,[‘$scope,’FileUploader’,function..<br>以上是准备工作,一般项目中都是封装成指令来做,最后会有案例体现.</p>
</blockquote>
<p><strong>指令—-nv-file-drop</strong></p>
<pre><code>&lt;!--简单的使用--&gt;
&lt;element nv-file-drop uploader=&quot;&#123;FileUploader&#125;&quot;&gt;&lt;/element&gt;
&lt;!-- 有更多配置的情形 --&gt;
&lt;element nv-file-drop uploader=&quot;&#123;FileUploader&#125;&quot; options=&quot;&#123;Object&#125;&quot; filters=&quot;&#123;String&#125;&quot;&gt;&lt;/element&gt;
</code></pre>
<blockquote>
<p>uploader 属性必须是FileUploader的实例<br>options 属性可以是FileItem选项，也可以是自定义属性<br>filters 属性可以是用逗号隔开的过滤器名字组成的字符串，如：’filterName1, filterName2’，这些过滤器的名字必须事先定义好：</p>
</blockquote>
<pre><code>uploader.filters.push(&#123;name:&#39;filterName1&#39;, fn:function() &#123;/* your code here */&#125;&#125;);
uploader.filters.push(&#123;name:&#39;filterName2&#39;, fn:function() &#123;/* your code here */&#125;&#125;);
</code></pre>
<p><strong>指令—-nv-file-select</strong></p>
<pre><code>&lt;!-- 简单的使用 --&gt;
&lt;input type=&quot;file&quot; nv-file-select uploader=&quot;&#123;FileUploader&#125;&quot;/&gt;
&lt;!-- 有更多配置的情形 --&gt;
&lt;input type=&quot;file&quot; nv-file-select uploader=&quot;&#123;FileUploader&#125;&quot; options=&quot;&#123;Object&#125;&quot; filters=&quot;&#123;String&#125;&quot;/&gt;
</code></pre>
<p><strong>指令—-nv-file-over</strong></p>
<pre><code>&lt;!-- 简单的使用 --&gt;
&lt;element nv-file-over uploader=&quot;&#123;FileUploader&#125;&quot;&gt;&lt;/element&gt;
&lt;!-- 有更多配置的情形 --&gt;
&lt;element nv-file-over uploader=&quot;&#123;FileUploader&#125;&quot; over-class=&quot;&#123;String&#125;&quot;&gt;&lt;/element&gt;
</code></pre>
<p><strong>服务: 控件服务</strong></p>
<blockquote>
<p>FileUploader</p>
</blockquote>
<p><strong>内容讲解: 涉及到的属性,方法,回调等</strong></p>
<blockquote>
<p><strong>一 :FileUploader</strong></p>
</blockquote>
<p>————————————————<strong>属性如下</strong>——————————————————<br><img src="https://img-blog.csdnimg.cn/20190710194227187.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>——————————————————–<strong>方法</strong>—————————————————-<br><img src="https://img-blog.csdnimg.cn/20190710194730540.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190710194759410.jpg" alt="在这里插入图片描述"><br>————————————————–<strong>回调</strong>———————————————————-</p>
<blockquote>
<p>二: FileItem</p>
</blockquote>
<p>————————————————<strong>属性如下</strong>——————————————————<br><img src="https://img-blog.csdnimg.cn/20190710195057285.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>——————————————————–<strong>方法</strong>—————————————————-<br><img src="https://img-blog.csdnimg.cn/20190710195156905.jpg" alt="在这里插入图片描述"><br>————————————————–<strong>回调</strong>———————————————————-<br><img src="https://img-blog.csdnimg.cn/20190710195250563.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5Njk5OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>三: Filters———注入过滤器的两种方式:</p>
</blockquote>
<pre><code>var uploader = new FileUploader(&#123;
    filters: [&#123;
        name: &#39;yourName1&#39;,
        // 自定义的过滤器
        fn: function(item) &#123;
            return true;
        &#125;
    &#125;]
&#125;);

// 另一种方式加入自定义过滤器
uploader.filters.push(&#123;
    name: &#39;yourName2&#39;,
    fn: function(item) &#123;
        return true;
    &#125;
&#125;);
</code></pre>
<blockquote>
<p>四: 已经定义好的过滤器<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folder<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queueLimit</p>
</blockquote>
<p><strong>实例</strong></p>
<blockquote>
<p>html页面</p>
</blockquote>
<pre><code>&lt;!-- multiple属性支持一次性选择多个文件 --&gt;
&lt;input type=&quot;file&quot; nv-file-select=&quot;&quot; uploader=&quot;uploader&quot; multiple=&quot;&quot;&gt;
</code></pre>
<blockquote>
<p>js代码</p>
</blockquote>
<pre><code>&#39;use strict&#39;;
angular
    .module(&#39;app&#39;, [&#39;angularFileUpload&#39;])
    .controller(&#39;AppController&#39;, [&#39;$scope&#39;, &#39;FileUploader&#39;, function($scope, FileUploader) &#123;
        //选择文件并创建文件对象有
        var uploader = $scope.uploader = new FileUploader(&#123;
            url: &#39;upload.php&#39;
        &#125;);

    // 过滤器
    uploader.filters.push(&#123;
        name: &#39;customFilter&#39;,
        fn: function(item /*&#123;File|FileLikeObject&#125;*/, options) &#123;
            return this.queue.length &lt; 10;
        &#125;
    &#125;);

    // 回调
    uploader.onWhenAddingFileFailed = function(item /*&#123;File|FileLikeObject&#125;*/, filter, options) &#123;
        console.info(&#39;onWhenAddingFileFailed&#39;, item, filter, options);
    &#125;;
    uploader.onAfterAddingFile = function(fileItem) &#123;
        console.info(&#39;onAfterAddingFile&#39;, fileItem);
    &#125;;
    uploader.onAfterAddingAll = function(addedFileItems) &#123;
        console.info(&#39;onAfterAddingAll&#39;, addedFileItems);
    &#125;;
    uploader.onBeforeUploadItem = function(item) &#123;
        console.info(&#39;onBeforeUploadItem&#39;, item);
    &#125;;
    uploader.onProgressItem = function(fileItem, progress) &#123;
        console.info(&#39;onProgressItem&#39;, fileItem, progress);
    &#125;;
    uploader.onProgressAll = function(progress) &#123;
        console.info(&#39;onProgressAll&#39;, progress);
    &#125;;
    uploader.onSuccessItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onSuccessItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onErrorItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onErrorItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onCancelItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onCancelItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onCompleteItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onCompleteItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onCompleteAll = function() &#123;
        console.info(&#39;onCompleteAll&#39;);
    &#125;;

    console.info(&#39;uploader&#39;, uploader);
&#125;]);
</code></pre>
<p><strong>只能上传图片的过滤器</strong></p>
<pre><code>uploader.filters.push(&#123;
     name: &#39;imageFilter&#39;,
      fn: function(item /*&#123;File|FileLikeObject&#125;*/, options) &#123;
          var type = &#39;|&#39; + item.type.slice(item.type.lastIndexOf(&#39;/&#39;) + 1) + &#39;|&#39;;
          return &#39;|jpg|png|jpeg|bmp|gif|&#39;.indexOf(type) !== -1;
      &#125;
  &#125;);
  
</code></pre>
<p><strong>案例一: 非常简单的一个小dome,用到的东西很少</strong></p>
<blockquote>
<p>html代码</p>
</blockquote>
<pre><code>&lt;div ng-controller=&quot;firstController&quot; class=&quot;container&quot;&gt;
    &lt;!-- multiple属性支持一次性选择多个文件 --&gt;
    &lt;input type=&quot;file&quot; nv-file-select=&quot;&quot; uploader=&quot;uploader&quot; multiple=&quot;&quot;&gt;
    &lt;span ng-repeat=&#39;item in uploader.queue&#39;&gt;&#123;&#123;item.file.name&#125;&#125;&lt;/span&gt;
&lt;/div&gt;
</code></pre>
<blockquote>
<p>js代码</p>
</blockquote>
<pre><code>var app=angular.module(&#39;App&#39;,[&#39;angularFileUpload&#39;]);
app.controller(&#39;firstController&#39;,[&#39;$scope&#39;,&#39;FileUploader&#39;,function($scope,FileUploader)&#123;
    //选择文件并创建文件对象有
    var uploader = $scope.uploader = new FileUploader(&#123;
        url: &#39;upload.php&#39;
    &#125;);

    // 过滤器
    uploader.filters.push(&#123;
        name: &#39;customFilter&#39;,
        fn: function(item /*&#123;File|FileLikeObject&#125;*/, options) &#123;
            return this.queue.length &lt; 10;
        &#125;
    &#125;);

    // 回调
    uploader.onWhenAddingFileFailed = function(item /*&#123;File|FileLikeObject&#125;*/, filter, options) &#123;
        console.info(&#39;onWhenAddingFileFailed&#39;, item, filter, options);
    &#125;;
    uploader.onAfterAddingFile = function(fileItem) &#123;
        console.info(&#39;onAfterAddingFile&#39;, fileItem);
    &#125;;
    uploader.onAfterAddingAll = function(addedFileItems) &#123;
        console.info(&#39;onAfterAddingAll&#39;, addedFileItems);
    &#125;;
    uploader.onBeforeUploadItem = function(item) &#123;
        console.info(&#39;onBeforeUploadItem&#39;, item);
    &#125;;
    uploader.onProgressItem = function(fileItem, progress) &#123;
        console.info(&#39;onProgressItem&#39;, fileItem, progress);
    &#125;;
    uploader.onProgressAll = function(progress) &#123;
        console.info(&#39;onProgressAll&#39;, progress);
    &#125;;
    uploader.onSuccessItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onSuccessItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onErrorItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onErrorItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onCancelItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onCancelItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onCompleteItem = function(fileItem, response, status, headers) &#123;
        console.info(&#39;onCompleteItem&#39;, fileItem, response, status, headers);
    &#125;;
    uploader.onCompleteAll = function() &#123;
        console.info(&#39;onCompleteAll&#39;);
    &#125;;

    console.info(&#39;uploader&#39;, uploader);
&#125;]);
</code></pre>
<p><strong>案例二: 项目中用到的单文件多文件上传,并且可以限制格式,封装成了指令,比较复杂</strong></p>
<blockquote>
<p>使用指令的html页面</p>
</blockquote>
<pre><code>&lt;div ng-controller=&quot;firstController&quot; class=&quot;container&quot;&gt;
    &lt;!--封装的指令--&gt;
    &lt;upload-files style=&quot;display:inline-block&quot; special-param=&quot;taskNameObj.taskName&quot; special-flag=&quot;1&quot; file-type-exp=&quot;zip|xlsx|xls&quot; ng-if=&quot;isShowBtnTab(btnTabLinkUrl.uploading)&quot; not-delete-from-service=&quot;true&quot; text=&quot;上传清单和交付物&quot; url=&quot;api/services/app/Project_Deliverable/ImportDeliverablesFromExcel&quot; success-call-back=&quot;getPlanIdAdd&quot;&gt;&lt;/upload-files&gt;
&lt;/div&gt;
</code></pre>
<blockquote>
<p>指令的模板html页面</p>
</blockquote>
<pre><code>&lt;div&gt;
&lt;style&gt;
    .errorMsg &#123;
        text-align: left;
        line-height: 30px;
        border: 1px solid;
        color: #ff0000;
        width: 100%;
        padding-left: 10px;
        margin-top:20px;
    &#125;

    /*.closeDetai &#123;
        font-size: 20px;
        cursor: pointer;
    &#125;*/
&lt;/style&gt;
&lt;span class=&quot;btn btn-default&quot; ng-click=&quot;openUpload()&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/span&gt;

&lt;div class=&quot;modal fade uploadModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;
    &lt;div class=&quot;modal-dialog modal-lg&quot; role=&quot;document&quot;&gt;
        &lt;div class=&quot;modal-content&quot;&gt;
            &lt;div class=&quot;main-tlt&quot;&gt;&lt;div class=&quot;cn&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-record&quot;&gt;&lt;/i&gt;文件上传&lt;/div&gt;&lt;/div&gt;

            &lt;div class=&quot;modal-body&quot;&gt;
                &lt;div style=&quot;color:#98989a;font-size: 10px;margin-top: -20px;margin-bottom: 20px;&quot;&gt;提示：1，文件大小不超过&#123;&#123;fileSize&#125;&#125;M。 2，文件类型支持的后缀名有&#123;&#123;fileType&#125;&#125;。&lt;/div&gt;
                
                &lt;input type=&quot;file&quot; multiple nv-file-select uploader=&quot;uploader&quot; &#123;&#123;uploader.isUploading?disabled:&#125;&#125; /&gt;
                &lt;table class=&quot;table&quot; style=&quot;margin-top:20px&quot;&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th width=&quot;40%&quot;&gt;文件名&lt;/th&gt;
                            &lt;th ng-show=&quot;uploader.isHTML5&quot;&gt;大小&lt;/th&gt;
                            &lt;th width=&quot;20%&quot; ng-show=&quot;uploader.isHTML5&quot;&gt;上传进度&lt;/th&gt;
                            &lt;th&gt;状态&lt;/th&gt;
                            &lt;th&gt;操作&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;/thead&gt;
                    &lt;tbody&gt;
                        &lt;tr ng-repeat=&quot;item in uploader.queue&quot;&gt;
                            &lt;td&gt;&lt;strong&gt;&#123;&#123; item.file.name &#125;&#125;&lt;/strong&gt;&lt;/td&gt;
                            &lt;td ng-show=&quot;uploader.isHTML5&quot; nowrap&gt;&#123;&#123; item.file.size/1024/1024|number:2 &#125;&#125; MB&lt;/td&gt;
                            &lt;td ng-show=&quot;uploader.isHTML5&quot;&gt;
                                &lt;div class=&quot;progress&quot; style=&quot;margin-bottom: 0;&quot;&gt;
                                    &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; ng-style=&quot;&#123; &#39;width&#39;: item.progress + &#39;%&#39; &#125;&quot;&gt;&lt;/div&gt;
                                &lt;/div&gt;
                            &lt;/td&gt;
                            &lt;td class=&quot;text-center&quot;&gt;
                                &lt;span ng-show=&quot;item.isSuccess&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-ok&quot;&gt;&lt;/i&gt;&lt;/span&gt;
                                &lt;span ng-show=&quot;item.isCancel&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/i&gt;&lt;/span&gt;
                                &lt;span ng-show=&quot;item.isError&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-remove&quot;&gt;&lt;/i&gt;&lt;/span&gt;
                            &lt;/td&gt;
                            &lt;td nowrap&gt;
                                &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-xs&quot; ng-click=&quot;item.upload()&quot; ng-disabled=&quot;item.isReady || item.isUploading || item.isSuccess || specialFlag==&#39;1&#39;&quot;&gt;
                                    &lt;span class=&quot;glyphicon glyphicon-upload&quot;&gt;&lt;/span&gt; 上传
                                &lt;/button&gt;

                                &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-xs&quot; ng-click=&quot;item.cancel()&quot; ng-disabled=&quot;!item.isUploading&quot;&gt;
                                    &lt;span class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/span&gt; 取消
                                &lt;/button&gt;
                                &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-xs&quot; ng-click=&quot;removeItem(item)&quot;&gt;
                                    &lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt; 删除
                                &lt;/button&gt;
                            &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr&gt;
                            &lt;td colspan=&quot;5&quot; ng-show=&quot;uploader.queue.length==0&quot;&gt;请选择文件...&lt;/td&gt;
                        &lt;/tr&gt;
                    &lt;/tbody&gt;
                &lt;/table&gt;
                &lt;div&gt;
                    &lt;div&gt;
                        上传进度 :
                        &lt;div class=&quot;progress&quot; style=&quot;&quot;&gt;
                            &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; ng-style=&quot;&#123; &#39;width&#39;: uploader.progress + &#39;%&#39; &#125;&quot;&gt;&lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;!-- uploader.uploadAll() --&gt;
                    &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-s&quot; ng-click=&quot;allTheUpload()&quot; ng-disabled=&quot;!uploader.getNotUploadedItems().length&quot;&gt;
                        &lt;span class=&quot;glyphicon glyphicon-upload&quot;&gt;&lt;/span&gt; 全部上传
                    &lt;/button&gt;
                    &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-s&quot; ng-click=&quot;uploader.cancelAll()&quot; ng-disabled=&quot;!uploader.isUploading&quot;&gt;
                        &lt;span class=&quot;glyphicon glyphicon-ban-circle&quot;&gt;&lt;/span&gt; 全部取消
                    &lt;/button&gt;
                    &lt;button type=&quot;button&quot; class=&quot;btn btn-danger btn-s&quot; ng-click=&quot;removeAll()&quot; ng-disabled=&quot;!uploader.queue.length&quot;&gt;
                        &lt;span class=&quot;glyphicon glyphicon-trash&quot;&gt;&lt;/span&gt; 全部删除
                    &lt;/button&gt;
                &lt;/div&gt;
                &lt;div class=&quot;errorMsg&quot; ng-bind-html=&quot;errMsg&quot; ng-show=&quot;errMsg!==&#39;&#39;&quot;&gt;&lt;/div&gt;
                &lt;div class=&quot;loading-more&quot; ng-show=&quot;uploader.isUploading&quot;&gt;&lt;div class=&quot;cn&quot;&gt;&lt;div class=&quot;tlt&quot;&gt;&lt;i&gt;&lt;/i&gt;正在上传，请稍后...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;modal-footer&quot;&gt;
                &lt;span class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;关闭&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<blockquote>
<p>js代码,directive指令的代码和controller</p>
</blockquote>
<pre><code>(function () &#123;
    var app = angular.module(&quot;app&quot;);
    app.directive(&quot;uploadFiles&quot;, [&#39;serverDomain&#39;, &#39;httpService&#39;, &#39;FileUploader&#39;, &#39;$uibModal&#39;, &#39;$cookies&#39;, function (serverDomain, httpService, FileUploader, $uibModal, $cookies) &#123;
        return &#123;
            restrict: &quot;E&quot;,
            scope: &#123;
                successCallBack: &quot;&amp;&quot;,
                inmodal: &quot;@?&quot;,//在modal中调用的时候设置为true
                notDeleteFromService: &quot;@?&quot;,
                fileTypeExp: &quot;@?&quot;,
                specialFlag: &#39;@?&#39;,    // 特殊情况下的标识符
                specialParam: &#39;=?&#39;    // 特殊情况下的参数
            &#125;,
            //require: &quot;ngModel&quot;,
            controller: function ($scope, $element, $attrs) &#123;

                var uploadUrl = $attrs.url;
                var type = $attrs.type;
                var specialparam = $scope.specialParam;
                if (!uploadUrl || uploadUrl === &quot;&quot;) &#123;
                    console.error(&quot;导入控件需要url属性，目前url缺失或不正确，不能进行导入操作&quot;);
                &#125;

                $scope.openUpload = function () &#123;
                    if ($scope.specialFlag == &#39;1&#39;) &#123;
                        if ($scope.specialParam == &#39;&#39;) &#123;
                            abp.message.error(&#39;请先选择任务名称!&#39;);
                        &#125; else &#123;
                            $element.find(&quot;.uploadModal&quot;).modal(&#123;
                                backdrop: &#39;static&#39;, keyboard: false
                            &#125;);
                        &#125;
                    &#125; else &#123;
                        $element.find(&quot;.uploadModal&quot;).modal(&#123;
                            backdrop: &#39;static&#39;, keyboard: false
                        &#125;);
                    &#125;
                &#125;

                //重新打开模态框，提示信息清空
                $element.find(&quot;.uploadModal&quot;).on(&quot;show.bs.modal&quot;, function () &#123;
                    $scope.errMsg = &quot;&quot;;
                &#125;);

                // 关闭modal框的时候
                $element.find(&quot;.uploadModal&quot;).on(&#39;hidden.bs.modal&#39;, function () &#123;
                    //如果inmodal为true就设置body的样式
                    if ($scope.inmodal) &#123;
                        //当modal套modal的形式弹出的时候，子modal关闭会自动删掉body上的modal-open，导致父modal内容过多的时候不能上下滚动
                        if (!$(&quot;body&quot;).hasClass(&quot;modal-open&quot;)) &#123;
                            $(&quot;body&quot;).addClass(&quot;modal-open&quot;);
                        &#125;
                    &#125;
                &#125;);

                var confirmMsg = $scope.notDeleteFromService === &quot;true&quot; ? &quot;即将从上传队列中删除&quot; : &quot;如文件已上传，则会删除服务器上的源文件&quot;;

                //删除单个文件
                $scope.removeItem = function (item) &#123;
                    abp.message.confirm(confirmMsg, &quot;确定删除吗？&quot;, function (result) &#123;
                        if (result) &#123;
                            var msg = &quot;&quot;;
                            if (!$scope.notDeleteFromService || $scope.notDeleteFromService !== &quot;true&quot;) &#123;
                                if (item.isUploaded) &#123;

                                    var url = serverDomain + &quot;api/services/app/UploadFile/DeleteOneFile?fileId=&quot; + item.fileId;
                                    httpService.Delete(url, function (rst) &#123;
                                        if (!rst.success) &#123;
                                            msg = &quot;文件：&quot; + item.file.name + &quot; 从服务器上删除失败&quot;;
                                        &#125;
                                    &#125;);
                                &#125;

                                var idx = -1;//要删除的索引
                                $scope.responseResult.forEach(function (val, index) &#123;
                                    if (val.id === item.id) &#123;
                                        idx = index;
                                        return;
                                    &#125;
                                &#125;);
                                $scope.responseResult.splice(idx, 1);//回显列表中删除 
                            &#125;

                            item.remove();//上传列表中删除

                            if ($scope.successCallBack()) &#123;
                                $scope.successCallBack()($scope.responseResult);
                            &#125;

                            $scope.errMsg = msg != &quot;&quot; ? msg : &quot;删除成功&quot;;
                            $scope.$apply();
                        &#125;
                    &#125;);
                &#125;;

                $scope.removeAll = function () &#123;
                    abp.message.confirm(confirmMsg, &quot;确定删除吗？&quot;, function (result) &#123;
                        if (result) &#123;
                            var msg = &quot;&quot;;
                            if (!$scope.notDeleteFromService || $scope.notDeleteFromService === &quot;true&quot;) &#123;
                                uploader.queue.forEach(function (item, index) &#123;
                                    if (item.isUploaded &amp;&amp; item.id) &#123;
                                        var url = serverDomain + &quot;api/services/app/UploadFile/DeleteOneFile?fileId=&quot; + item.fileId;
                                        httpService.Delete(url, function (rst) &#123;
                                            if (!rst.success) &#123;
                                                msg += &quot;文件：&quot; + item.file.name + &quot; 从服务器上删除失败&quot;;

                                            &#125;
                                        &#125;);
                                    &#125;
                                &#125;);

                                $scope.responseResult = [];//回显列表中删除 
                            &#125;

                            if ($scope.successCallBack()) &#123;
                                $scope.successCallBack()($scope.responseResult);
                            &#125;

                            $scope.uploader.clearQueue();
                            $scope.errMsg = msg != &quot;&quot; ? msg : &quot;删除成功&quot; + &quot;&lt;br/&gt;&quot;;
                            $scope.$apply();
                        &#125;
                    &#125;);

                &#125;;

                $scope.errMsg = &quot;&quot;;

                $scope.responseResult = [];

                var uploader = $scope.uploader = new FileUploader(&#123;
                    url: serverDomain + uploadUrl,
                    removeAfterUpload: false,
                    alias: &quot;file&quot;,//后台接口文件参数名称
                    formData: [&#123;
                        type: type,
                        pid: sessionStorage.getItem(&quot;pId&quot;),
                        taskName: specialparam
                    &#125;],
                    headers: &#123;
                        &quot;Authorization&quot;: &#39;Bearer &#39; + $cookies.get(&quot;XSRF-TOKEN&quot;)
                    &#125;

                &#125;);

                $scope.fileSize = 20;
                var exp = &quot;jpg|png|gif|bmp|jpeg|tif|pdf|zip|rar|docx|doc|xlsx|xls&quot;;//默认允许的文件格式
                if ($scope.fileTypeExp) &#123;
                    exp = $scope.fileTypeExp;
                &#125;

                $scope.fileType = exp.split(&quot;|&quot;).join(&quot;、&quot;);

                $element.find(&quot;input[type=file]&quot;).change(function (e) &#123;
                    $scope.errMsg = &quot;&quot;;
                &#125;);

                // a sync filter
                uploader.filters.push(&#123;
                    name: &#39;syncfilter&#39;,
                    fn: function (file /*&#123;file|filelikeobject&#125;*/, options) &#123;
                        var size = file.size / 1024 / 1024;
                        var name = file.name;

                        if (size &gt; $scope.fileSize) &#123;
                            $scope.errMsg += name + &quot;文件大小已超过20M ；&lt;br/&gt;&quot;;
                            return false;
                        &#125;

                        var reg = new RegExp(&quot;\.(&quot; + exp + &quot;)$&quot;, &quot;gi&quot;);
                        if (!reg.test(name)) &#123;
                            $scope.errMsg += name + &quot; 文件类型不允许；&lt;br/&gt;&quot;;
                            return false
                        &#125;
                        if ($scope.specialFlag == &#39;1&#39;) &#123;
                            var len = $scope.uploader.queue.length;
                            if (len == 2) &#123;
                                $scope.errMsg = &quot;选择错误，最多选择两个文件！&quot;;
                                return false;
                            &#125; else if (len == 0) &#123;
                                if (file.name.substr(-3, 3) != &#39;zip&#39;) &#123;
                                    $scope.errMsg = &quot;选择错误，第一个文件请选择zip格式！&quot;;
                                    return false;
                                &#125;
                            &#125;
                        &#125;

                        $scope.errMsg = &quot;&quot;;
                        return true;

                    &#125;
                &#125;);

                // 项目文档管理 特殊情况下的校验(全部上传click)
                $scope.allTheUpload = function () &#123;
                    if ($scope.specialFlag == &#39;1&#39;) &#123;
                        var zipFlag = 0;
                        var xlsFlag = 0;
                        if ($scope.uploader.queue.length &lt; 2) &#123;
                            $scope.errMsg = &quot;选择错误，请选择一项zip文件、xlsx或xls文件！&quot;;
                        &#125; else &#123;
                            angular.forEach($scope.uploader.queue, function (v, i) &#123;
                                let str = v.file.name.substr(-3, 3);
                                if (i == 0) &#123;
                                    if (v.file.name.substr(-3, 3) != &#39;zip&#39;) &#123;
                                        $scope.errMsg = &quot;选择错误，第一个文件请选择zip格式！&quot;;
                                        return false;
                                    &#125;
                                &#125;
                                if (str == &#39;zip&#39;) &#123;
                                    zipFlag += 1;
                                &#125; else &#123;
                                    xlsFlag += 1;
                                &#125;
                            &#125;)

                            if (zipFlag == 2) &#123;
                                $scope.errMsg = &quot;选择错误，请选择一项zip文件、xlsx或xls文件！&quot;;
                            &#125; else if (xlsFlag == 2) &#123;
                                $scope.errMsg = &quot;选择错误，请选择一项zip文件、xlsx或xls文件！&quot;;
                            &#125; else &#123;
                                $scope.uploader.uploadAll();
                            &#125;
                        &#125;
                    &#125; else &#123;
                        $scope.uploader.uploadAll();   // 如果不是特殊情况，直接调接口
                    &#125;
                &#125;

                // CALLBACKS

                uploader.onWhenAddingFileFailed = function (item /*&#123;File|FileLikeObject&#125;*/, filter, options) &#123;
                    API.log(&quot;用户选择了一个错误文件：&quot;, item)
                &#125;;
                uploader.onAfterAddingFile = function (fileItem) &#123;
                    console.log(&quot;onAfterAddingFile&quot;, fileItem)
                &#125;;
                uploader.onAfterAddingAll = function (addedFileItems) &#123;
                    console.info(&#39;onAfterAddingAll&#39;, addedFileItems);
                &#125;;
                uploader.onBeforeUploadItem = function (item) &#123;
                    API.log(&#39;onBeforeUploadItem&#39;, item);
                &#125;;
                //uploader.onProgressItem = function (fileItem, progress) &#123;
                //    console.info(&#39;onProgressItem&#39;, fileItem, progress);
                //&#125;;
                //uploader.onProgressAll = function (progress) &#123;
                //    console.info(&#39;onProgressAll&#39;, progress);
                //&#125;;
                uploader.onSuccessItem = function (fileItem, response, status, headers) &#123;
                    if (response.success) &#123;
                        $scope.errMsg += &quot;文件：&quot; + fileItem.file.name + &quot; 上传成功&quot; + &quot;&lt;br/&gt;&quot;;
                        $scope.responseResult.push(response.result);

                        if (response.result) &#123;
                            fileItem.id = response.result.id;//上传成功赋上id，以便删除时候使用
                            fileItem.fileId = response.result.fileId;//上传成功赋上fileId，以便删除时候使用
                        &#125;

                        if ($scope.successCallBack()) &#123;
                            $scope.successCallBack()($scope.responseResult);
                        &#125;
                    &#125;
                    else &#123;
                        $scope.errMsg += &quot;文件：&quot; + fileItem.file.name + &quot;上传出错&quot;
                        if (response &amp;&amp; response.error) &#123;
                            $scope.errMsg += &quot;：&quot; + response.error.message;
                        &#125;
                    &#125;
                    console.info(&#39;onSuccessItem&#39;, fileItem, response, status, headers);
                &#125;;
                uploader.onErrorItem = function (fileItem, response, status, headers) &#123;
                    $scope.errMsg += &quot;文件：&quot; + fileItem.file.name + &quot;上传出错&quot;;
                    if (response &amp;&amp; response.error) &#123;
                        $scope.errMsg += &quot;：&quot; + response.error.message;
                    &#125;

                    console.info(&#39;onErrorItem&#39;, fileItem, response, status, headers);
                &#125;;
                uploader.onCancelItem = function (fileItem, response, status, headers) &#123;
                    $scope.errMsg += &quot;文件：&quot; + fileItem.file.name + &quot;取消上传&quot;;
                    console.info(&#39;onCancelItem&#39;, fileItem, response, status, headers);
                &#125;;
                //uploader.onCompleteItem = function (fileItem, response, status, headers) &#123;
                //    console.info(&#39;onCompleteItem&#39;, fileItem, response,status, headers);

                //&#125;;
                uploader.onCompleteAll = function () &#123;
                    //$scope.errMsg = &quot;上传成功&quot;;
                    console.info(&#39;onCompleteAll&#39;);
                &#125;;

                //console.info(&#39;uploader&#39;, uploader);

            &#125;,
            link: function (scope, element, attr, ngModelCtrl) &#123;
                scope.text = attr.text || &quot;导入&quot;;
            &#125;,
            replace: true,
            templateUrl: &quot;../App/views/template/uploadFiles.html&quot;,

        &#125;;
    &#125;]);
&#125;)()
</code></pre>
<p><strong>插件代码,如果没下载到插件，可复制 里的代码</strong></p>
<pre><code>/*
 angular-file-upload v2.1.3
 https://github.com/nervgh/angular-file-upload
*/

!function(e,t)&#123;&quot;object&quot;==typeof exports&amp;&amp;&quot;object&quot;==typeof module?module.exports=t():&quot;function&quot;==typeof define&amp;&amp;define.amd?define(t):&quot;object&quot;==typeof exports?exports[&quot;angular-file-upload&quot;]=t():e[&quot;angular-file-upload&quot;]=t()&#125;(this,function()&#123;return function(e)&#123;function t(r)&#123;if(n[r])return n[r].exports;var i=n[r]=&#123;exports:&#123;&#125;,id:r,loaded:!1&#125;;return e[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports&#125;var n=&#123;&#125;;return t.m=e,t.c=n,t.p=&quot;&quot;,t(0)&#125;([function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=r(n(2)),o=r(n(3)),s=r(n(4)),a=r(n(5)),u=r(n(6)),l=r(n(7)),c=r(n(1)),f=r(n(8)),p=r(n(9)),d=r(n(10)),v=r(n(11)),h=r(n(12));angular.module(i.name,[]).value(&quot;fileUploaderOptions&quot;,o).factory(&quot;FileUploader&quot;,s).factory(&quot;FileLikeObject&quot;,a).factory(&quot;FileItem&quot;,u).factory(&quot;FileDirective&quot;,l).factory(&quot;FileSelect&quot;,c).factory(&quot;FileDrop&quot;,f).factory(&quot;FileOver&quot;,p).directive(&quot;nvFileSelect&quot;,d).directive(&quot;nvFileDrop&quot;,v).directive(&quot;nvFileOver&quot;,h).run([&quot;FileUploader&quot;,&quot;FileLikeObject&quot;,&quot;FileItem&quot;,&quot;FileDirective&quot;,&quot;FileSelect&quot;,&quot;FileDrop&quot;,&quot;FileOver&quot;,function(e,t,n,r,i,o,s)&#123;e.FileLikeObject=t,e.FileItem=n,e.FileDirective=r,e.FileSelect=i,e.FileDrop=o,e.FileOver=s&#125;])&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=function()&#123;function e(e,t)&#123;for(var n in t)&#123;var r=t[n];r.configurable=!0,r.value&amp;&amp;(r.writable=!0)&#125;Object.defineProperties(e,t)&#125;return function(t,n,r)&#123;return n&amp;&amp;e(t.prototype,n),r&amp;&amp;e(t,r),t&#125;&#125;(),o=function l(e,t,n)&#123;var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r)&#123;var i=Object.getPrototypeOf(e);return null===i?void 0:l(i,t,n)&#125;if(&quot;value&quot;in r&amp;&amp;r.writable)return r.value;var o=r.get;return void 0===o?void 0:o.call(n)&#125;,s=function(e,t)&#123;if(&quot;function&quot;!=typeof t&amp;&amp;null!==t)throw new TypeError(&quot;Super expression must either be null or a function, not &quot;+typeof t);e.prototype=Object.create(t&amp;&amp;t.prototype,&#123;constructor:&#123;value:e,enumerable:!1,writable:!0,configurable:!0&#125;&#125;),t&amp;&amp;(e.__proto__=t)&#125;,a=function(e,t)&#123;if(!(e instanceof t))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;,u=(r(n(2)),angular.extend);e.exports=function(e)&#123;var t=function(e)&#123;function t(e)&#123;a(this,t);var n=u(e,&#123;events:&#123;$destroy:&quot;destroy&quot;,change:&quot;onChange&quot;&#125;,prop:&quot;select&quot;&#125;);o(Object.getPrototypeOf(t.prototype),&quot;constructor&quot;,this).call(this,n),this.uploader.isHTML5||this.element.removeAttr(&quot;multiple&quot;),this.element.prop(&quot;value&quot;,null)&#125;return s(t,e),i(t,&#123;getOptions:&#123;value:function()&#123;&#125;&#125;,getFilters:&#123;value:function()&#123;&#125;&#125;,isEmptyAfterSelection:&#123;value:function()&#123;return!!this.element.attr(&quot;multiple&quot;)&#125;&#125;,onChange:&#123;value:function()&#123;var e=this.uploader.isHTML5?this.element[0].files:this.element[0],t=this.getOptions(),n=this.getFilters();this.uploader.isHTML5||this.destroy(),this.uploader.addToQueue(e,t,n),this.isEmptyAfterSelection()&amp;&amp;this.element.prop(&quot;value&quot;,null)&#125;&#125;&#125;),t&#125;(e);return t&#125;,e.exports.$inject=[&quot;FileDirective&quot;]&#125;,function(e,t)&#123;e.exports=&#123;name:&quot;angularFileUpload&quot;&#125;&#125;,function(e,t)&#123;&quot;use strict&quot;;e.exports=&#123;url:&quot;/&quot;,alias:&quot;file&quot;,headers:&#123;&#125;,queue:[],progress:0,autoUpload:!1,removeAfterUpload:!1,method:&quot;POST&quot;,filters:[],formData:[],queueLimit:Number.MAX_VALUE,withCredentials:!1&#125;&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=function()&#123;function e(e,t)&#123;for(var n in t)&#123;var r=t[n];r.configurable=!0,r.value&amp;&amp;(r.writable=!0)&#125;Object.defineProperties(e,t)&#125;return function(t,n,r)&#123;return n&amp;&amp;e(t.prototype,n),r&amp;&amp;e(t,r),t&#125;&#125;(),o=function(e,t)&#123;if(!(e instanceof t))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;,s=(r(n(2)),angular.copy),a=angular.extend,u=angular.forEach,l=angular.isObject,c=angular.isNumber,f=angular.isDefined,p=angular.isArray,d=angular.element;e.exports=function(e,t,n,r,v,h)&#123;var m=r.File,g=r.FormData,_=function()&#123;function r(t)&#123;o(this,r);var n=s(e);a(this,n,t,&#123;isUploading:!1,_nextIndex:0,_failFilterIndex:-1,_directives:&#123;select:[],drop:[],over:[]&#125;&#125;),this.filters.unshift(&#123;name:&quot;queueLimit&quot;,fn:this._queueLimitFilter&#125;),this.filters.unshift(&#123;name:&quot;folder&quot;,fn:this._folderFilter&#125;)&#125;return i(r,&#123;addToQueue:&#123;value:function(e,t,n)&#123;var r=this,i=this.isArrayLikeObject(e)?e:[e],o=this._getFilters(n),s=this.queue.length,a=[];u(i,function(e)&#123;var n=new v(e);if(r._isValidFile(n,o,t))&#123;var i=new h(r,e,t);a.push(i),r.queue.push(i),r._onAfterAddingFile(i)&#125;else&#123;var s=o[r._failFilterIndex];r._onWhenAddingFileFailed(n,s,t)&#125;&#125;),this.queue.length!==s&amp;&amp;(this._onAfterAddingAll(a),this.progress=this._getTotalProgress()),this._render(),this.autoUpload&amp;&amp;this.uploadAll()&#125;&#125;,removeFromQueue:&#123;value:function(e)&#123;var t=this.getIndexOfItem(e),n=this.queue[t];n.isUploading&amp;&amp;n.cancel(),this.queue.splice(t,1),n._destroy(),this.progress=this._getTotalProgress()&#125;&#125;,clearQueue:&#123;value:function()&#123;for(;this.queue.length;)this.queue[0].remove();this.progress=0&#125;&#125;,uploadItem:&#123;value:function(e)&#123;var t=this.getIndexOfItem(e),n=this.queue[t],r=this.isHTML5?&quot;_xhrTransport&quot;:&quot;_iframeTransport&quot;;n._prepareToUploading(),this.isUploading||(this.isUploading=!0,this[r](n))&#125;&#125;,cancelItem:&#123;value:function(e)&#123;var t=this.getIndexOfItem(e),n=this.queue[t],r=this.isHTML5?&quot;_xhr&quot;:&quot;_form&quot;;n&amp;&amp;n.isUploading&amp;&amp;n[r].abort()&#125;&#125;,uploadAll:&#123;value:function()&#123;var e=this.getNotUploadedItems().filter(function(e)&#123;return!e.isUploading&#125;);e.length&amp;&amp;(u(e,function(e)&#123;return e._prepareToUploading()&#125;),e[0].upload())&#125;&#125;,cancelAll:&#123;value:function()&#123;var e=this.getNotUploadedItems();u(e,function(e)&#123;return e.cancel()&#125;)&#125;&#125;,isFile:&#123;value:function(e)&#123;return this.constructor.isFile(e)&#125;&#125;,isFileLikeObject:&#123;value:function(e)&#123;return this.constructor.isFileLikeObject(e)&#125;&#125;,isArrayLikeObject:&#123;value:function(e)&#123;return this.constructor.isArrayLikeObject(e)&#125;&#125;,getIndexOfItem:&#123;value:function(e)&#123;return c(e)?e:this.queue.indexOf(e)&#125;&#125;,getNotUploadedItems:&#123;value:function()&#123;return this.queue.filter(function(e)&#123;return!e.isUploaded&#125;)&#125;&#125;,getReadyItems:&#123;value:function()&#123;return this.queue.filter(function(e)&#123;return e.isReady&amp;&amp;!e.isUploading&#125;).sort(function(e,t)&#123;return e.index-t.index&#125;)&#125;&#125;,destroy:&#123;value:function()&#123;var e=this;u(this._directives,function(t)&#123;u(e._directives[t],function(e)&#123;e.destroy()&#125;)&#125;)&#125;&#125;,onAfterAddingAll:&#123;value:function(e)&#123;&#125;&#125;,onAfterAddingFile:&#123;value:function(e)&#123;&#125;&#125;,onWhenAddingFileFailed:&#123;value:function(e,t,n)&#123;&#125;&#125;,onBeforeUploadItem:&#123;value:function(e)&#123;&#125;&#125;,onProgressItem:&#123;value:function(e,t)&#123;&#125;&#125;,onProgressAll:&#123;value:function(e)&#123;&#125;&#125;,onSuccessItem:&#123;value:function(e,t,n,r)&#123;&#125;&#125;,onErrorItem:&#123;value:function(e,t,n,r)&#123;&#125;&#125;,onCancelItem:&#123;value:function(e,t,n,r)&#123;&#125;&#125;,onCompleteItem:&#123;value:function(e,t,n,r)&#123;&#125;&#125;,onCompleteAll:&#123;value:function()&#123;&#125;&#125;,_getTotalProgress:&#123;value:function(e)&#123;if(this.removeAfterUpload)return e||0;var t=this.getNotUploadedItems().length,n=t?this.queue.length-t:this.queue.length,r=100/this.queue.length,i=(e||0)*r/100;return Math.round(n*r+i)&#125;&#125;,_getFilters:&#123;value:function(e)&#123;if(!e)return this.filters;if(p(e))return e;var t=e.match(/[^\s,]+/g);return this.filters.filter(function(e)&#123;return-1!==t.indexOf(e.name)&#125;)&#125;&#125;,_render:&#123;value:function()&#123;t.$$phase||t.$apply()&#125;&#125;,_folderFilter:&#123;value:function(e)&#123;return!(!e.size&amp;&amp;!e.type)&#125;&#125;,_queueLimitFilter:&#123;value:function()&#123;return this.queue.length&lt;this.queueLimit&#125;&#125;,_isValidFile:&#123;value:function(e,t,n)&#123;var r=this;return this._failFilterIndex=-1,t.length?t.every(function(t)&#123;return r._failFilterIndex++,t.fn.call(r,e,n)&#125;):!0&#125;&#125;,_isSuccessCode:&#123;value:function(e)&#123;return e&gt;=200&amp;&amp;300&gt;e||304===e&#125;&#125;,_transformResponse:&#123;value:function(e,t)&#123;var r=this._headersGetter(t);return u(n.defaults.transformResponse,function(t)&#123;e=t(e,r)&#125;),e&#125;&#125;,_parseHeaders:&#123;value:function(e)&#123;var t,n,r,i=&#123;&#125;;return e?(u(e.split(&quot;\n&quot;),function(e)&#123;r=e.indexOf(&quot;:&quot;),t=e.slice(0,r).trim().toLowerCase(),n=e.slice(r+1).trim(),t&amp;&amp;(i[t]=i[t]?i[t]+&quot;, &quot;+n:n)&#125;),i):i&#125;&#125;,_headersGetter:&#123;value:function(e)&#123;return function(t)&#123;return t?e[t.toLowerCase()]||null:e&#125;&#125;&#125;,_xhrTransport:&#123;value:function(e)&#123;var t=this,n=e._xhr=new XMLHttpRequest,r=new g;if(this._onBeforeUploadItem(e),u(e.formData,function(e)&#123;u(e,function(e,t)&#123;r.append(t,e)&#125;)&#125;),&quot;number&quot;!=typeof e._file.size)throw new TypeError(&quot;The file specified is no longer valid&quot;);r.append(e.alias,e._file,e.file.name),n.upload.onprogress=function(n)&#123;var r=Math.round(n.lengthComputable?100*n.loaded/n.total:0);t._onProgressItem(e,r)&#125;,n.onload=function()&#123;var r=t._parseHeaders(n.getAllResponseHeaders()),i=t._transformResponse(n.response,r),o=t._isSuccessCode(n.status)?&quot;Success&quot;:&quot;Error&quot;,s=&quot;_on&quot;+o+&quot;Item&quot;;t[s](e,i,n.status,r),t._onCompleteItem(e,i,n.status,r)&#125;,n.onerror=function()&#123;var r=t._parseHeaders(n.getAllResponseHeaders()),i=t._transformResponse(n.response,r);t._onErrorItem(e,i,n.status,r),t._onCompleteItem(e,i,n.status,r)&#125;,n.onabort=function()&#123;var r=t._parseHeaders(n.getAllResponseHeaders()),i=t._transformResponse(n.response,r);t._onCancelItem(e,i,n.status,r),t._onCompleteItem(e,i,n.status,r)&#125;,n.open(e.method,e.url,!0),n.withCredentials=e.withCredentials,u(e.headers,function(e,t)&#123;n.setRequestHeader(t,e)&#125;),n.send(r),this._render()&#125;&#125;,_iframeTransport:&#123;value:function(e)&#123;var t=this,n=d(&#39;&lt;form style=&quot;display: none;&quot; /&gt;&#39;),r=d(&#39;&lt;iframe name=&quot;iframeTransport&#39;+Date.now()+&#39;&quot;&gt;&#39;),i=e._input;e._form&amp;&amp;e._form.replaceWith(i),e._form=n,this._onBeforeUploadItem(e),i.prop(&quot;name&quot;,e.alias),u(e.formData,function(e)&#123;u(e,function(e,t)&#123;var r=d(&#39;&lt;input type=&quot;hidden&quot; name=&quot;&#39;+t+&#39;&quot; /&gt;&#39;);r.val(e),n.append(r)&#125;)&#125;),n.prop(&#123;action:e.url,method:&quot;POST&quot;,target:r.prop(&quot;name&quot;),enctype:&quot;multipart/form-data&quot;,encoding:&quot;multipart/form-data&quot;&#125;),r.bind(&quot;load&quot;,function()&#123;var n=&quot;&quot;,i=200;try&#123;n=r[0].contentDocument.body.innerHTML&#125;catch(o)&#123;i=500&#125;var s=&#123;response:n,status:i,dummy:!0&#125;,a=&#123;&#125;,u=t._transformResponse(s.response,a);t._onSuccessItem(e,u,s.status,a),t._onCompleteItem(e,u,s.status,a)&#125;),n.abort=function()&#123;var o,s=&#123;status:0,dummy:!0&#125;,a=&#123;&#125;;r.unbind(&quot;load&quot;).prop(&quot;src&quot;,&quot;javascript:false;&quot;),n.replaceWith(i),t._onCancelItem(e,o,s.status,a),t._onCompleteItem(e,o,s.status,a)&#125;,i.after(n),n.append(i).append(r),n[0].submit(),this._render()&#125;&#125;,_onWhenAddingFileFailed:&#123;value:function(e,t,n)&#123;this.onWhenAddingFileFailed(e,t,n)&#125;&#125;,_onAfterAddingFile:&#123;value:function(e)&#123;this.onAfterAddingFile(e)&#125;&#125;,_onAfterAddingAll:&#123;value:function(e)&#123;this.onAfterAddingAll(e)&#125;&#125;,_onBeforeUploadItem:&#123;value:function(e)&#123;e._onBeforeUpload(),this.onBeforeUploadItem(e)&#125;&#125;,_onProgressItem:&#123;value:function(e,t)&#123;var n=this._getTotalProgress(t);this.progress=n,e._onProgress(t),this.onProgressItem(e,t),this.onProgressAll(n),this._render()&#125;&#125;,_onSuccessItem:&#123;value:function(e,t,n,r)&#123;e._onSuccess(t,n,r),this.onSuccessItem(e,t,n,r)&#125;&#125;,_onErrorItem:&#123;value:function(e,t,n,r)&#123;e._onError(t,n,r),this.onErrorItem(e,t,n,r)&#125;&#125;,_onCancelItem:&#123;value:function(e,t,n,r)&#123;e._onCancel(t,n,r),this.onCancelItem(e,t,n,r)&#125;&#125;,_onCompleteItem:&#123;value:function(e,t,n,r)&#123;e._onComplete(t,n,r),this.onCompleteItem(e,t,n,r);var i=this.getReadyItems()[0];return this.isUploading=!1,f(i)?void i.upload():(this.onCompleteAll(),this.progress=this._getTotalProgress(),void this._render())&#125;&#125;&#125;,&#123;isFile:&#123;value:function(e)&#123;return m&amp;&amp;e instanceof m&#125;&#125;,isFileLikeObject:&#123;value:function(e)&#123;return e instanceof v&#125;&#125;,isArrayLikeObject:&#123;value:function(e)&#123;return l(e)&amp;&amp;&quot;length&quot;in e&#125;&#125;,inherit:&#123;value:function(e,t)&#123;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.super_=t&#125;&#125;&#125;),r&#125;();return _.prototype.isHTML5=!(!m||!g),_.isHTML5=_.prototype.isHTML5,_&#125;,e.exports.$inject=[&quot;fileUploaderOptions&quot;,&quot;$rootScope&quot;,&quot;$http&quot;,&quot;$window&quot;,&quot;FileLikeObject&quot;,&quot;FileItem&quot;]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=function()&#123;function e(e,t)&#123;for(var n in t)&#123;var r=t[n];r.configurable=!0,r.value&amp;&amp;(r.writable=!0)&#125;Object.defineProperties(e,t)&#125;return function(t,n,r)&#123;return n&amp;&amp;e(t.prototype,n),r&amp;&amp;e(t,r),t&#125;&#125;(),o=function(e,t)&#123;if(!(e instanceof t))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;,s=(r(n(2)),angular.copy),a=angular.isElement,u=angular.isString;e.exports=function()&#123;var e=function()&#123;function e(t)&#123;o(this,e);var n=a(t),r=n?t.value:t,i=u(r)?&quot;FakePath&quot;:&quot;Object&quot;,s=&quot;_createFrom&quot;+i;this[s](r)&#125;return i(e,&#123;_createFromFakePath:&#123;value:function(e)&#123;this.lastModifiedDate=null,this.size=null,this.type=&quot;like/&quot;+e.slice(e.lastIndexOf(&quot;.&quot;)+1).toLowerCase(),this.name=e.slice(e.lastIndexOf(&quot;/&quot;)+e.lastIndexOf(&quot;\\&quot;)+2)&#125;&#125;,_createFromObject:&#123;value:function(e)&#123;this.lastModifiedDate=s(e.lastModifiedDate),this.size=e.size,this.type=e.type,this.name=e.name&#125;&#125;&#125;),e&#125;();return e&#125;,e.exports.$inject=[]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=function()&#123;function e(e,t)&#123;for(var n in t)&#123;var r=t[n];r.configurable=!0,r.value&amp;&amp;(r.writable=!0)&#125;Object.defineProperties(e,t)&#125;return function(t,n,r)&#123;return n&amp;&amp;e(t.prototype,n),r&amp;&amp;e(t,r),t&#125;&#125;(),o=function(e,t)&#123;if(!(e instanceof t))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;,s=(r(n(2)),angular.copy),a=angular.extend,u=angular.element,l=angular.isElement;e.exports=function(e,t)&#123;var n=function()&#123;function n(e,r,i)&#123;o(this,n);var c=l(r),f=c?u(r):null,p=c?null:r;a(this,&#123;url:e.url,alias:e.alias,headers:s(e.headers),formData:s(e.formData),removeAfterUpload:e.removeAfterUpload,withCredentials:e.withCredentials,method:e.method&#125;,i,&#123;uploader:e,file:new t(r),isReady:!1,isUploading:!1,isUploaded:!1,isSuccess:!1,isCancel:!1,isError:!1,progress:0,index:null,_file:p,_input:f&#125;),f&amp;&amp;this._replaceNode(f)&#125;return i(n,&#123;upload:&#123;value:function()&#123;try&#123;this.uploader.uploadItem(this)&#125;catch(e)&#123;this.uploader._onCompleteItem(this,&quot;&quot;,0,[]),this.uploader._onErrorItem(this,&quot;&quot;,0,[])&#125;&#125;&#125;,cancel:&#123;value:function()&#123;this.uploader.cancelItem(this)&#125;&#125;,remove:&#123;value:function()&#123;this.uploader.removeFromQueue(this)&#125;&#125;,onBeforeUpload:&#123;value:function()&#123;&#125;&#125;,onProgress:&#123;value:function(e)&#123;&#125;&#125;,onSuccess:&#123;value:function(e,t,n)&#123;&#125;&#125;,onError:&#123;value:function(e,t,n)&#123;&#125;&#125;,onCancel:&#123;value:function(e,t,n)&#123;&#125;&#125;,onComplete:&#123;value:function(e,t,n)&#123;&#125;&#125;,_onBeforeUpload:&#123;value:function()&#123;this.isReady=!0,this.isUploading=!0,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!1,this.isError=!1,this.progress=0,this.onBeforeUpload()&#125;&#125;,_onProgress:&#123;value:function(e)&#123;this.progress=e,this.onProgress(e)&#125;&#125;,_onSuccess:&#123;value:function(e,t,n)&#123;this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!0,this.isCancel=!1,this.isError=!1,this.progress=100,this.index=null,this.onSuccess(e,t,n)&#125;&#125;,_onError:&#123;value:function(e,t,n)&#123;this.isReady=!1,this.isUploading=!1,this.isUploaded=!0,this.isSuccess=!1,this.isCancel=!1,this.isError=!0,this.progress=0,this.index=null,this.onError(e,t,n)&#125;&#125;,_onCancel:&#123;value:function(e,t,n)&#123;this.isReady=!1,this.isUploading=!1,this.isUploaded=!1,this.isSuccess=!1,this.isCancel=!0,this.isError=!1,this.progress=0,this.index=null,this.onCancel(e,t,n)&#125;&#125;,_onComplete:&#123;value:function(e,t,n)&#123;this.onComplete(e,t,n),this.removeAfterUpload&amp;&amp;this.remove()&#125;&#125;,_destroy:&#123;value:function()&#123;this._input&amp;&amp;this._input.remove(),this._form&amp;&amp;this._form.remove(),delete this._form,delete this._input&#125;&#125;,_prepareToUploading:&#123;value:function()&#123;this.index=this.index||++this.uploader._nextIndex,this.isReady=!0&#125;&#125;,_replaceNode:&#123;value:function(t)&#123;var n=e(t.clone())(t.scope());n.prop(&quot;value&quot;,null),t.css(&quot;display&quot;,&quot;none&quot;),t.after(n)&#125;&#125;&#125;),n&#125;();return n&#125;,e.exports.$inject=[&quot;$compile&quot;,&quot;FileLikeObject&quot;]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=function()&#123;function e(e,t)&#123;for(var n in t)&#123;var r=t[n];r.configurable=!0,r.value&amp;&amp;(r.writable=!0)&#125;Object.defineProperties(e,t)&#125;return function(t,n,r)&#123;return n&amp;&amp;e(t.prototype,n),r&amp;&amp;e(t,r),t&#125;&#125;(),o=function(e,t)&#123;if(!(e instanceof t))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;,s=(r(n(2)),angular.extend);e.exports=function()&#123;var e=function()&#123;function e(t)&#123;o(this,e),s(this,t),this.uploader._directives[this.prop].push(this),this._saveLinks(),this.bind()&#125;return i(e,&#123;bind:&#123;value:function()&#123;for(var e in this.events)&#123;var t=this.events[e];this.element.bind(e,this[t])&#125;&#125;&#125;,unbind:&#123;value:function()&#123;for(var e in this.events)this.element.unbind(e,this.events[e])&#125;&#125;,destroy:&#123;value:function()&#123;var e=this.uploader._directives[this.prop].indexOf(this);this.uploader._directives[this.prop].splice(e,1),this.unbind()&#125;&#125;,_saveLinks:&#123;value:function()&#123;for(var e in this.events)&#123;var t=this.events[e];this[t]=this[t].bind(this)&#125;&#125;&#125;&#125;),e&#125;();return e.prototype.events=&#123;&#125;,e&#125;,e.exports.$inject=[]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=function()&#123;function e(e,t)&#123;for(var n in t)&#123;var r=t[n];r.configurable=!0,r.value&amp;&amp;(r.writable=!0)&#125;Object.defineProperties(e,t)&#125;return function(t,n,r)&#123;return n&amp;&amp;e(t.prototype,n),r&amp;&amp;e(t,r),t&#125;&#125;(),o=function c(e,t,n)&#123;var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r)&#123;var i=Object.getPrototypeOf(e);return null===i?void 0:c(i,t,n)&#125;if(&quot;value&quot;in r&amp;&amp;r.writable)return r.value;var o=r.get;return void 0===o?void 0:o.call(n)&#125;,s=function(e,t)&#123;if(&quot;function&quot;!=typeof t&amp;&amp;null!==t)throw new TypeError(&quot;Super expression must either be null or a function, not &quot;+typeof t);e.prototype=Object.create(t&amp;&amp;t.prototype,&#123;constructor:&#123;value:e,enumerable:!1,writable:!0,configurable:!0&#125;&#125;),t&amp;&amp;(e.__proto__=t)&#125;,a=function(e,t)&#123;if(!(e instanceof t))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;,u=(r(n(2)),angular.extend),l=angular.forEach;e.exports=function(e)&#123;var t=function(e)&#123;function t(e)&#123;a(this,t);var n=u(e,&#123;events:&#123;$destroy:&quot;destroy&quot;,drop:&quot;onDrop&quot;,dragover:&quot;onDragOver&quot;,dragleave:&quot;onDragLeave&quot;&#125;,prop:&quot;drop&quot;&#125;);o(Object.getPrototypeOf(t.prototype),&quot;constructor&quot;,this).call(this,n)&#125;return s(t,e),i(t,&#123;getOptions:&#123;value:function()&#123;&#125;&#125;,getFilters:&#123;value:function()&#123;&#125;&#125;,onDrop:&#123;value:function(e)&#123;var t=this._getTransfer(e);if(t)&#123;var n=this.getOptions(),r=this.getFilters();this._preventAndStop(e),l(this.uploader._directives.over,this._removeOverClass,this),this.uploader.addToQueue(t.files,n,r)&#125;&#125;&#125;,onDragOver:&#123;value:function(e)&#123;var t=this._getTransfer(e);this._haveFiles(t.types)&amp;&amp;(t.dropEffect=&quot;copy&quot;,this._preventAndStop(e),l(this.uploader._directives.over,this._addOverClass,this))&#125;&#125;,onDragLeave:&#123;value:function(e)&#123;e.currentTarget!==this.element[0]&amp;&amp;(this._preventAndStop(e),l(this.uploader._directives.over,this._removeOverClass,this))&#125;&#125;,_getTransfer:&#123;value:function(e)&#123;return e.dataTransfer?e.dataTransfer:e.originalEvent.dataTransfer&#125;&#125;,_preventAndStop:&#123;value:function(e)&#123;e.preventDefault(),e.stopPropagation()&#125;&#125;,_haveFiles:&#123;value:function(e)&#123;return e?e.indexOf?-1!==e.indexOf(&quot;Files&quot;):e.contains?e.contains(&quot;Files&quot;):!1:!1&#125;&#125;,_addOverClass:&#123;value:function(e)&#123;e.addOverClass()&#125;&#125;,_removeOverClass:&#123;value:function(e)&#123;e.removeOverClass()&#125;&#125;&#125;),t&#125;(e);return t&#125;,e.exports.$inject=[&quot;FileDirective&quot;]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;,i=function()&#123;function e(e,t)&#123;for(var n in t)&#123;var r=t[n];r.configurable=!0,r.value&amp;&amp;(r.writable=!0)&#125;Object.defineProperties(e,t)&#125;return function(t,n,r)&#123;return n&amp;&amp;e(t.prototype,n),r&amp;&amp;e(t,r),t&#125;&#125;(),o=function l(e,t,n)&#123;var r=Object.getOwnPropertyDescriptor(e,t);if(void 0===r)&#123;var i=Object.getPrototypeOf(e);return null===i?void 0:l(i,t,n)&#125;if(&quot;value&quot;in r&amp;&amp;r.writable)return r.value;var o=r.get;return void 0===o?void 0:o.call(n)&#125;,s=function(e,t)&#123;if(&quot;function&quot;!=typeof t&amp;&amp;null!==t)throw new TypeError(&quot;Super expression must either be null or a function, not &quot;+typeof t);e.prototype=Object.create(t&amp;&amp;t.prototype,&#123;constructor:&#123;value:e,enumerable:!1,writable:!0,configurable:!0&#125;&#125;),t&amp;&amp;(e.__proto__=t)&#125;,a=function(e,t)&#123;if(!(e instanceof t))throw new TypeError(&quot;Cannot call a class as a function&quot;)&#125;,u=(r(n(2)),angular.extend);e.exports=function(e)&#123;var t=function(e)&#123;function t(e)&#123;a(this,t);var n=u(e,&#123;events:&#123;$destroy:&quot;destroy&quot;&#125;,prop:&quot;over&quot;,overClass:&quot;nv-file-over&quot;&#125;);o(Object.getPrototypeOf(t.prototype),&quot;constructor&quot;,this).call(this,n)&#125;return s(t,e),i(t,&#123;addOverClass:&#123;value:function()&#123;this.element.addClass(this.getOverClass())&#125;&#125;,removeOverClass:&#123;value:function()&#123;this.element.removeClass(this.getOverClass())&#125;&#125;,getOverClass:&#123;value:function()&#123;return this.overClass&#125;&#125;&#125;),t&#125;(e);return t&#125;,e.exports.$inject=[&quot;FileDirective&quot;]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;;r(n(2));e.exports=function(e,t,n)&#123;return&#123;link:function(r,i,o)&#123;var s=r.$eval(o.uploader);if(!(s instanceof t))throw new TypeError(&#39;&quot;Uploader&quot; must be an instance of FileUploader&#39;);var a=new n(&#123;uploader:s,element:i&#125;);a.getOptions=e(o.options).bind(a,r),a.getFilters=function()&#123;return o.filters&#125;&#125;&#125;&#125;,e.exports.$inject=[&quot;$parse&quot;,&quot;FileUploader&quot;,&quot;FileSelect&quot;]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;;r(n(2));e.exports=function(e,t,n)&#123;return&#123;link:function(r,i,o)&#123;var s=r.$eval(o.uploader);if(!(s instanceof t))throw new TypeError(&#39;&quot;Uploader&quot; must be an instance of FileUploader&#39;);if(s.isHTML5)&#123;var a=new n(&#123;uploader:s,element:i&#125;);a.getOptions=e(o.options).bind(a,r),a.getFilters=function()&#123;return o.filters&#125;&#125;&#125;&#125;&#125;,e.exports.$inject=[&quot;$parse&quot;,&quot;FileUploader&quot;,&quot;FileDrop&quot;]&#125;,function(e,t,n)&#123;&quot;use strict&quot;;var r=function(e)&#123;return e&amp;&amp;e.__esModule?e[&quot;default&quot;]:e&#125;;r(n(2));e.exports=function(e,t)&#123;return&#123;link:function(n,r,i)&#123;var o=n.$eval(i.uploader);if(!(o instanceof e))throw new TypeError(&#39;&quot;Uploader&quot; must be an instance of FileUploader&#39;);var s=new t(&#123;uploader:o,element:r&#125;);s.getOverClass=function()&#123;return i.overClass||s.overClass&#125;&#125;&#125;&#125;,e.exports.$inject=[&quot;FileUploader&quot;,&quot;FileOver&quot;]&#125;])&#125;);
//# sourceMappingURL=angular-file-upload.min.js.map
</code></pre>
]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>angular-file-upload</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
</search>
